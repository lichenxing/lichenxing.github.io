{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b343624781d47be31a3e2b30c6c921c93c2105b9","modified":1716040261822},{"_id":"source/CNAME","hash":"886bbb9f45124ef9765946d814581397651dc331","modified":1716040619451},{"_id":"source/_posts/folderSync.md","hash":"c3cb9e29f4cf0b53f98f9d2b02050625c4679e38","modified":1716040619451},{"_id":"source/_posts/hello-git.md","hash":"9b1c6fe02bd525f690b82d97f8fc2c4a37a6d189","modified":1716358580281},{"_id":"source/_posts/git-reset.md","hash":"dd5f7e4c7fbed72172c204ccb807cdc9fb1e2353","modified":1716040619451},{"_id":"source/_posts/SSH-Key.md","hash":"d4714ef0ab712cfa00d8dadc951fb9b436c67cff","modified":1716093591231},{"_id":"source/_posts/hello-domain.md","hash":"388da7540beacd1cf8b968ae3309e0e1f05f4315","modified":1716040619451},{"_id":"source/_posts/hello-github.md","hash":"379423ad3746e4c65fcadab5ee8cfd87d56e6546","modified":1716040619451},{"_id":"source/_posts/hello-hexo.md","hash":"c8e51ce71705e89207765d8f7dd73717d82b9b82","modified":1716040619451},{"_id":"source/_posts/hello-menu.md","hash":"329df57a3b370d1407912bbd3bf8ca1abaa60a67","modified":1716040619451},{"_id":"source/_posts/hello-theme.md","hash":"6dc5380d337626a0eb21151cbd9dde6f5a378b13","modified":1716040619452},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1716040619452},{"_id":"source/about/index.md","hash":"3ee7127e21ce798c6cf9a3d477bd0ce7e0e12832","modified":1716040619452},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"18b3b80cf6456697a675721d957362840c1ab949","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/.DS_Store","hash":"00ad5653ec1c49137c7734c3799318a653f597fd","modified":1716040284375},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1716040618879},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1716040618875},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1716040618878},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"0610cadb3976954c6f299d30320a93a1bd2a151c","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"eaec7c7b936197247e5acd73a79ca951da4d82ec","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1716040618881},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"ff049c2837a111da775d1661b605dd417614b84c","modified":1716040618880},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"52bff9d6530d07cb72ea9701f63269b56248f319","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"660a839e19e7abb49c7650455096fb7d53536ce5","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1716040618882},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1716040618876},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1716040618877},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1716040618883},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1716040618883},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1716358589094},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1716358589094},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1716358589094},{"_id":"public/content.json","hash":"83f7319408622ed356c4a8e4f2f9da5af5dfb397","modified":1716358589094},{"_id":"public/manifest.json","hash":"e66b69c5ab0202d749dc98771b5c66fc7efe776e","modified":1716358589094},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1716358589094},{"_id":"public/about/index.html","hash":"d25c9bd41fd3fe472407d434657f3d8d0b176a81","modified":1716358589094},{"_id":"public/2024/05/19/SSH-Key/index.html","hash":"2df0055f4e1a12fe7164cca5888361184e67bebc","modified":1716358589094},{"_id":"public/2024/05/18/folderSync/index.html","hash":"b4f0b9a6ed438fde8ff89990ffeb7f62797f94b8","modified":1716358589094},{"_id":"public/2024/05/18/hello-world/index.html","hash":"1240f102ea3bd0bef3a0b3a3396c11fbfc5b7199","modified":1716358589094},{"_id":"public/2024/05/18/git-reset/index.html","hash":"1a6a703f3ad924e308c5fe72a3ea77acb008e8fd","modified":1716358589094},{"_id":"public/2024/05/18/hello-domain/index.html","hash":"994d0bb1634ae2d9fe50c04ce3618477d0dcfedf","modified":1716358589094},{"_id":"public/2024/05/18/hello-github/index.html","hash":"5548faaf140f218eec578b5edd796cde0b421b6b","modified":1716358589094},{"_id":"public/2024/05/18/hello-hexo/index.html","hash":"182be6c09e452df9507f5a985a013863450aa710","modified":1716358589094},{"_id":"public/2024/05/18/hello-menu/index.html","hash":"c213b38c53b453e6b8f9ccbfd5031dda64413c28","modified":1716358589094},{"_id":"public/2024/05/22/hello-git/index.html","hash":"9ce7dbb732e9140b0359825179886a03e1394bf2","modified":1716358589094},{"_id":"public/2024/05/18/hello-theme/index.html","hash":"6cdbc4014609f6b0cdc143968850add0249c039e","modified":1716358589094},{"_id":"public/archives/2024/index.html","hash":"fe42274da5d82b1b53c334b8581c70ae25e73ef7","modified":1716358589094},{"_id":"public/archives/2024/05/index.html","hash":"e3c76a58dc765de1b1ba157f60063b44013f4105","modified":1716358589094},{"_id":"public/archives/page/2/index.html","hash":"92c30a8e863feb2e270676c31a4f44beddde3d67","modified":1716358589094},{"_id":"public/archives/2024/05/page/2/index.html","hash":"9126f03fefb2697eb48eb211779a27afe04a8d70","modified":1716358589094},{"_id":"public/archives/2024/page/2/index.html","hash":"88803221d047953fe99847112f5c28b49052e799","modified":1716358589094},{"_id":"public/categories/file/index.html","hash":"4bc6a8e27853c855b06b9ddf9ba25aa6710bdaa1","modified":1716358589094},{"_id":"public/categories/git/index.html","hash":"8ec1fd2af913f3a511ff3cc7cc6d47633059b7b1","modified":1716358589094},{"_id":"public/index.html","hash":"e048ba64bef60d9e2c764b3ce8f137d27d9e0075","modified":1716358589094},{"_id":"public/archives/index.html","hash":"e1f97b9e89a3cfa98c4b2a0a4f29952b9fb3f4f8","modified":1716358589094},{"_id":"public/page/2/index.html","hash":"6de2940fa23f9ac30b4a346f4bf7eb2ec30ac5fa","modified":1716358589094},{"_id":"public/tags/github/index.html","hash":"eeea73eb7c89c3b4b6f512e3fc4e976dd39afbd2","modified":1716358589094},{"_id":"public/tags/ssh/index.html","hash":"98adab9711fa9a6cbd06aa15a44a86519f071a84","modified":1716358589094},{"_id":"public/tags/hexo/index.html","hash":"6f04e7e49c1d1b2fb80dc02e8a341f3338cea8aa","modified":1716358589094},{"_id":"public/tags/file/index.html","hash":"5b46d7a058980f4fc596b56cd2638ec0fb842cc3","modified":1716358589094},{"_id":"public/tags/git/index.html","hash":"00c2cde940fd57a04258db96e4c83988e63adcc0","modified":1716358589094},{"_id":"public/categories/index.html","hash":"c3fb464a6c49e9964c88f7b0c7cf25849d8fbd95","modified":1716358589094},{"_id":"public/tags/index.html","hash":"f33bbc3a915e639ed256c077691cccea7e14924b","modified":1716358589094},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1716358589094},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1716358589094},{"_id":"public/CNAME","hash":"886bbb9f45124ef9765946d814581397651dc331","modified":1716358589094},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1716358589094},{"_id":"public/img/razor-bottom-black.svg","hash":"52bff9d6530d07cb72ea9701f63269b56248f319","modified":1716358589094},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1716358589094},{"_id":"public/img/razor-top-black.svg","hash":"660a839e19e7abb49c7650455096fb7d53536ce5","modified":1716358589094},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1716358589094},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1716358589094},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1716358589094},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1716358589094},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1716358589094},{"_id":"public/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1716358589094},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1716358589094}],"Category":[{"name":"file","_id":"clwhfl7ol0006rd3zecfy1zca"},{"name":"git","_id":"clwhfl7os000lrd3zbf53f66l"}],"Data":[],"Page":[{"title":"about","date":"2024-05-18T11:29:05.000Z","_content":"this is about page!","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-05-18 19:29:05\n---\nthis is about page!","updated":"2024-05-18T13:56:59.452Z","path":"about/index.html","comments":1,"layout":"page","_id":"clwhfl7o40000rd3z3ufv2h3u","content":"<p>this is about page!</p>\n","excerpt":"","more":"<p>this is about page!</p>\n"}],"Post":[{"title":"SSH Key","date":"2024-05-19T04:25:30.000Z","_content":"# 问题现象：\n\n```\nhexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n[master ddf123e] Site updated: 2024-05-18 18:16:33\n 2 files changed, 2 insertions(+), 2 deletions(-)\n/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line\n/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line\n/Users/oo/.ssh/config: terminating, 2 bad configuration options\n致命错误：无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\nFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n    at ChildProcess.emit (node:events:520:28)\n    at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n# 问题分析：\n\n根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。\n\n# 解决办法：\n\n检查配置文件，重新生成SSH Key。\n\n\n\n---\n\n\n\n在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：\n\n### 1. 检查现有的 SSH Key\n\n首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：\n\n```sh\nls -al ~/.ssh\n```\n\n这将列出 `~/.ssh` 目录下的文件。如果你看到 `id_rsa` 和 `id_rsa.pub` 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。\n\n### 2. 生成新的 SSH Key\n\n如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：\n\n```sh\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n替换 `your_email@example.com` 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 `~/.ssh/id_rsa`。\n\n接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。\n\n### 3. 启动 SSH 代理\n\n确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：\n\n```sh\neval \"$(ssh-agent -s)\"\n```\n\n这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：\n\n```sh\nssh-add ~/.ssh/id_rsa\n```\n\n### 4. 添加 SSH Key 到 GitHub\n\n现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：\n\n```sh\npbcopy < ~/.ssh/id_rsa.pub\n```\n\n这会将公钥复制到剪贴板。\n\n接着，打开 GitHub，登录到你的账户，按照以下步骤操作：\n\n1. 点击右上角的个人头像，然后选择 “Settings”。\n2. 在左侧菜单中，选择 “SSH and GPG keys”。\n3. 点击 “New SSH key” 按钮。\n4. 在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。\n5. 在 “Key” 字段中粘贴你复制的公钥。\n6. 点击 “Add SSH key” 按钮。\n\n### 5. 测试连接\n\n最后，测试是否正确配置了 SSH Key，使用以下命令：\n\n```sh\nssh -T git@github.com\n```\n\n如果一切配置正确，你会看到一条欢迎信息，类似：\n\n```\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这表示你已经成功通过 SSH 连接到 GitHub。\n\n### 总结\n\n以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。\n","source":"_posts/SSH-Key.md","raw":"---\ntitle: SSH Key\ndate: 2024-05-19 12:25:30\ntags: \n  - github\n  - ssh\n---\n# 问题现象：\n\n```\nhexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n[master ddf123e] Site updated: 2024-05-18 18:16:33\n 2 files changed, 2 insertions(+), 2 deletions(-)\n/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line\n/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line\n/Users/oo/.ssh/config: terminating, 2 bad configuration options\n致命错误：无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\nFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n    at ChildProcess.emit (node:events:520:28)\n    at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n# 问题分析：\n\n根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。\n\n# 解决办法：\n\n检查配置文件，重新生成SSH Key。\n\n\n\n---\n\n\n\n在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：\n\n### 1. 检查现有的 SSH Key\n\n首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：\n\n```sh\nls -al ~/.ssh\n```\n\n这将列出 `~/.ssh` 目录下的文件。如果你看到 `id_rsa` 和 `id_rsa.pub` 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。\n\n### 2. 生成新的 SSH Key\n\n如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：\n\n```sh\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n替换 `your_email@example.com` 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 `~/.ssh/id_rsa`。\n\n接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。\n\n### 3. 启动 SSH 代理\n\n确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：\n\n```sh\neval \"$(ssh-agent -s)\"\n```\n\n这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：\n\n```sh\nssh-add ~/.ssh/id_rsa\n```\n\n### 4. 添加 SSH Key 到 GitHub\n\n现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：\n\n```sh\npbcopy < ~/.ssh/id_rsa.pub\n```\n\n这会将公钥复制到剪贴板。\n\n接着，打开 GitHub，登录到你的账户，按照以下步骤操作：\n\n1. 点击右上角的个人头像，然后选择 “Settings”。\n2. 在左侧菜单中，选择 “SSH and GPG keys”。\n3. 点击 “New SSH key” 按钮。\n4. 在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。\n5. 在 “Key” 字段中粘贴你复制的公钥。\n6. 点击 “Add SSH key” 按钮。\n\n### 5. 测试连接\n\n最后，测试是否正确配置了 SSH Key，使用以下命令：\n\n```sh\nssh -T git@github.com\n```\n\n如果一切配置正确，你会看到一条欢迎信息，类似：\n\n```\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这表示你已经成功通过 SSH 连接到 GitHub。\n\n### 总结\n\n以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。\n","slug":"SSH-Key","published":1,"updated":"2024-05-19T04:39:51.231Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7o90001rd3z2rp2fiof","content":"<h1 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>[master ddf123e] Site updated: 2024-05-18 18:16:33<br> 2 files changed, 2 insertions(+), 2 deletions(-)<br>/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line<br>/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line<br>/Users/oo/.ssh/config: terminating, 2 bad configuration options<br>致命错误：无法读取远程仓库。<br><br>请确认您有正确的访问权限并且仓库存在。<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:520:28)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h1><p>根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。</p>\n<h1 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h1><p>检查配置文件，重新生成SSH Key。</p>\n<hr>\n<p>在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：</p>\n<h3 id=\"1-检查现有的-SSH-Key\"><a href=\"#1-检查现有的-SSH-Key\" class=\"headerlink\" title=\"1. 检查现有的 SSH Key\"></a>1. 检查现有的 SSH Key</h3><p>首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure>\n\n<p>这将列出 <code>~/.ssh</code> 目录下的文件。如果你看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。</p>\n<h3 id=\"2-生成新的-SSH-Key\"><a href=\"#2-生成新的-SSH-Key\" class=\"headerlink\" title=\"2. 生成新的 SSH Key\"></a>2. 生成新的 SSH Key</h3><p>如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>替换 <code>your_email@example.com</code> 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 <code>~/.ssh/id_rsa</code>。</p>\n<p>接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。</p>\n<h3 id=\"3-启动-SSH-代理\"><a href=\"#3-启动-SSH-代理\" class=\"headerlink\" title=\"3. 启动 SSH 代理\"></a>3. 启动 SSH 代理</h3><p>确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-添加-SSH-Key-到-GitHub\"><a href=\"#4-添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"4. 添加 SSH Key 到 GitHub\"></a>4. 添加 SSH Key 到 GitHub</h3><p>现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pbcopy &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p>这会将公钥复制到剪贴板。</p>\n<p>接着，打开 GitHub，登录到你的账户，按照以下步骤操作：</p>\n<ol>\n<li>点击右上角的个人头像，然后选择 “Settings”。</li>\n<li>在左侧菜单中，选择 “SSH and GPG keys”。</li>\n<li>点击 “New SSH key” 按钮。</li>\n<li>在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。</li>\n<li>在 “Key” 字段中粘贴你复制的公钥。</li>\n<li>点击 “Add SSH key” 按钮。</li>\n</ol>\n<h3 id=\"5-测试连接\"><a href=\"#5-测试连接\" class=\"headerlink\" title=\"5. 测试连接\"></a>5. 测试连接</h3><p>最后，测试是否正确配置了 SSH Key，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>如果一切配置正确，你会看到一条欢迎信息，类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n\n<p>这表示你已经成功通过 SSH 连接到 GitHub。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。</p>\n","excerpt":"","more":"<h1 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>[master ddf123e] Site updated: 2024-05-18 18:16:33<br> 2 files changed, 2 insertions(+), 2 deletions(-)<br>/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line<br>/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line<br>/Users/oo/.ssh/config: terminating, 2 bad configuration options<br>致命错误：无法读取远程仓库。<br><br>请确认您有正确的访问权限并且仓库存在。<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:520:28)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h1><p>根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。</p>\n<h1 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h1><p>检查配置文件，重新生成SSH Key。</p>\n<hr>\n<p>在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：</p>\n<h3 id=\"1-检查现有的-SSH-Key\"><a href=\"#1-检查现有的-SSH-Key\" class=\"headerlink\" title=\"1. 检查现有的 SSH Key\"></a>1. 检查现有的 SSH Key</h3><p>首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure>\n\n<p>这将列出 <code>~/.ssh</code> 目录下的文件。如果你看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。</p>\n<h3 id=\"2-生成新的-SSH-Key\"><a href=\"#2-生成新的-SSH-Key\" class=\"headerlink\" title=\"2. 生成新的 SSH Key\"></a>2. 生成新的 SSH Key</h3><p>如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>替换 <code>your_email@example.com</code> 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 <code>~/.ssh/id_rsa</code>。</p>\n<p>接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。</p>\n<h3 id=\"3-启动-SSH-代理\"><a href=\"#3-启动-SSH-代理\" class=\"headerlink\" title=\"3. 启动 SSH 代理\"></a>3. 启动 SSH 代理</h3><p>确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-添加-SSH-Key-到-GitHub\"><a href=\"#4-添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"4. 添加 SSH Key 到 GitHub\"></a>4. 添加 SSH Key 到 GitHub</h3><p>现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pbcopy &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p>这会将公钥复制到剪贴板。</p>\n<p>接着，打开 GitHub，登录到你的账户，按照以下步骤操作：</p>\n<ol>\n<li>点击右上角的个人头像，然后选择 “Settings”。</li>\n<li>在左侧菜单中，选择 “SSH and GPG keys”。</li>\n<li>点击 “New SSH key” 按钮。</li>\n<li>在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。</li>\n<li>在 “Key” 字段中粘贴你复制的公钥。</li>\n<li>点击 “Add SSH key” 按钮。</li>\n</ol>\n<h3 id=\"5-测试连接\"><a href=\"#5-测试连接\" class=\"headerlink\" title=\"5. 测试连接\"></a>5. 测试连接</h3><p>最后，测试是否正确配置了 SSH Key，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>如果一切配置正确，你会看到一条欢迎信息，类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n\n<p>这表示你已经成功通过 SSH 连接到 GitHub。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。</p>\n"},{"title":"hello domain","date":"2024-05-18T11:39:22.000Z","_content":"将hexo博客部署到个人域名上\n\n# 域名购买\n\n我是在腾讯云买的 首年45元 价格相对实惠\n购买的基本流程就是进入腾讯云官网\n进入控制台进行域名注册然后付钱买选择的域名就行\nhttps://www.tencentcloud.com/zh/products/domain\n<!-- more -->\n# 域名设置DNS解析\n\n- 进入控制台\n- 进入域名控制台\n- 进行解析设置，添加这两条记录\n  注意：这里的IP是ping yourname.github.io\n\n# 创建 CNAME 文件\n\n在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名\n比如我的域名是chenxing.live\n\n# 重新部署\n\n```\nhexo clean\nhexo g \nhexo d\n```\n\n# 最终验证\n\n输入自己的域名地址,比如我的就是这个 https://chenxing.live 进行验证。\n\n","source":"_posts/hello-domain.md","raw":"---\ntitle: hello domain\ndate: 2024-05-18 19:39:22\ntags: hexo\n---\n将hexo博客部署到个人域名上\n\n# 域名购买\n\n我是在腾讯云买的 首年45元 价格相对实惠\n购买的基本流程就是进入腾讯云官网\n进入控制台进行域名注册然后付钱买选择的域名就行\nhttps://www.tencentcloud.com/zh/products/domain\n<!-- more -->\n# 域名设置DNS解析\n\n- 进入控制台\n- 进入域名控制台\n- 进行解析设置，添加这两条记录\n  注意：这里的IP是ping yourname.github.io\n\n# 创建 CNAME 文件\n\n在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名\n比如我的域名是chenxing.live\n\n# 重新部署\n\n```\nhexo clean\nhexo g \nhexo d\n```\n\n# 最终验证\n\n输入自己的域名地址,比如我的就是这个 https://chenxing.live 进行验证。\n\n","slug":"hello-domain","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7oe0002rd3z4ux2fogf","content":"<p>将hexo博客部署到个人域名上</p>\n<h1 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h1><p>我是在腾讯云买的 首年45元 价格相对实惠<br>购买的基本流程就是进入腾讯云官网<br>进入控制台进行域名注册然后付钱买选择的域名就行<br><a href=\"https://www.tencentcloud.com/zh/products/domain\">https://www.tencentcloud.com/zh/products/domain</a></p>\n<span id=\"more\"></span>\n<h1 id=\"域名设置DNS解析\"><a href=\"#域名设置DNS解析\" class=\"headerlink\" title=\"域名设置DNS解析\"></a>域名设置DNS解析</h1><ul>\n<li>进入控制台</li>\n<li>进入域名控制台</li>\n<li>进行解析设置，添加这两条记录<br>注意：这里的IP是ping yourname.github.io</li>\n</ul>\n<h1 id=\"创建-CNAME-文件\"><a href=\"#创建-CNAME-文件\" class=\"headerlink\" title=\"创建 CNAME 文件\"></a>创建 CNAME 文件</h1><p>在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名<br>比如我的域名是chenxing.live</p>\n<h1 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo clean<br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最终验证\"><a href=\"#最终验证\" class=\"headerlink\" title=\"最终验证\"></a>最终验证</h1><p>输入自己的域名地址,比如我的就是这个 <a href=\"https://chenxing.live/\">https://chenxing.live</a> 进行验证。</p>\n","excerpt":"<p>将hexo博客部署到个人域名上</p>\n<h1 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h1><p>我是在腾讯云买的 首年45元 价格相对实惠<br>购买的基本流程就是进入腾讯云官网<br>进入控制台进行域名注册然后付钱买选择的域名就行<br><a href=\"https://www.tencentcloud.com/zh/products/domain\">https://www.tencentcloud.com/zh/products/domain</a></p>","more":"<h1 id=\"域名设置DNS解析\"><a href=\"#域名设置DNS解析\" class=\"headerlink\" title=\"域名设置DNS解析\"></a>域名设置DNS解析</h1><ul>\n<li>进入控制台</li>\n<li>进入域名控制台</li>\n<li>进行解析设置，添加这两条记录<br>注意：这里的IP是ping yourname.github.io</li>\n</ul>\n<h1 id=\"创建-CNAME-文件\"><a href=\"#创建-CNAME-文件\" class=\"headerlink\" title=\"创建 CNAME 文件\"></a>创建 CNAME 文件</h1><p>在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名<br>比如我的域名是chenxing.live</p>\n<h1 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo clean<br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最终验证\"><a href=\"#最终验证\" class=\"headerlink\" title=\"最终验证\"></a>最终验证</h1><p>输入自己的域名地址,比如我的就是这个 <a href=\"https://chenxing.live/\">https://chenxing.live</a> 进行验证。</p>"},{"title":"folderSync","date":"2024-05-18T11:41:52.000Z","_content":"**使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步**，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：\n<!-- more -->\n## 在 macOS 上设置 SFTP 服务器\n\n- 在 Mac 上，选取苹果菜单 >「系统偏好设置」，点按「共享」，然后选择「远程登录」。\n- 选择「远程登录」复选框。\n- 选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。\n\n注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh oo@10.90.0.199”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。\n\n## 在 Android 设备上配置 FolderSync\n\n### 1.下载并安装 FolderSync：\n- 从 Google Play 商店下载并安装 FolderSync 应用。\n### 2.配置 SFTP 账户：\n- 打开 FolderSync 应用。\n- 进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。\n- 在“账户类型”中选择“SFTP”。\n### 3.填写 SFTP 账户详细信息：\n- 主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199\n- 用户名： 输入你在 macOS 上的用户名。我的就是oo\n- 密码： 输入你在 macOS 上的用户密码。 \n- 远程路径： 输入你希望同步的 macOS 文件夹路径（例如 /Users/yourusername/Documents）。\n- 端口： 默认端口为 22，不需要更改。\n### 4.测试连接：\n- 填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。\n### 5.创建同步任务：\n- 转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。\n- 选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。\n- 选择本地文件夹，你可以选择 Android 设备上的任何文件夹。\n- 配置同步选项，例如同步方向（单向或双向）、同步频率等。\n## 注意事项\n- 确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。\n- 确保 macOS 上的防火墙允许 SSH 服务通过。\n- 根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。\n","source":"_posts/folderSync.md","raw":"---\ntitle: folderSync\ndate: 2024-05-18 19:41:52\ntags: file\ncategories: file\n---\n**使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步**，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：\n<!-- more -->\n## 在 macOS 上设置 SFTP 服务器\n\n- 在 Mac 上，选取苹果菜单 >「系统偏好设置」，点按「共享」，然后选择「远程登录」。\n- 选择「远程登录」复选框。\n- 选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。\n\n注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh oo@10.90.0.199”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。\n\n## 在 Android 设备上配置 FolderSync\n\n### 1.下载并安装 FolderSync：\n- 从 Google Play 商店下载并安装 FolderSync 应用。\n### 2.配置 SFTP 账户：\n- 打开 FolderSync 应用。\n- 进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。\n- 在“账户类型”中选择“SFTP”。\n### 3.填写 SFTP 账户详细信息：\n- 主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199\n- 用户名： 输入你在 macOS 上的用户名。我的就是oo\n- 密码： 输入你在 macOS 上的用户密码。 \n- 远程路径： 输入你希望同步的 macOS 文件夹路径（例如 /Users/yourusername/Documents）。\n- 端口： 默认端口为 22，不需要更改。\n### 4.测试连接：\n- 填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。\n### 5.创建同步任务：\n- 转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。\n- 选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。\n- 选择本地文件夹，你可以选择 Android 设备上的任何文件夹。\n- 配置同步选项，例如同步方向（单向或双向）、同步频率等。\n## 注意事项\n- 确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。\n- 确保 macOS 上的防火墙允许 SSH 服务通过。\n- 根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。\n","slug":"folderSync","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7oi0004rd3z3w2x5ppd","content":"<p><strong>使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步</strong>，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：</p>\n<span id=\"more\"></span>\n<h2 id=\"在-macOS-上设置-SFTP-服务器\"><a href=\"#在-macOS-上设置-SFTP-服务器\" class=\"headerlink\" title=\"在 macOS 上设置 SFTP 服务器\"></a>在 macOS 上设置 SFTP 服务器</h2><ul>\n<li>在 Mac 上，选取苹果菜单 &gt;「系统偏好设置」，点按「共享」，然后选择「远程登录」。</li>\n<li>选择「远程登录」复选框。</li>\n<li>选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。</li>\n</ul>\n<p>注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh <a href=\"mailto:&#111;&#x6f;&#x40;&#49;&#x30;&#46;&#x39;&#48;&#x2e;&#x30;&#x2e;&#49;&#57;&#57;\">&#111;&#x6f;&#x40;&#49;&#x30;&#46;&#x39;&#48;&#x2e;&#x30;&#x2e;&#49;&#57;&#57;</a>”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。</p>\n<h2 id=\"在-Android-设备上配置-FolderSync\"><a href=\"#在-Android-设备上配置-FolderSync\" class=\"headerlink\" title=\"在 Android 设备上配置 FolderSync\"></a>在 Android 设备上配置 FolderSync</h2><h3 id=\"1-下载并安装-FolderSync：\"><a href=\"#1-下载并安装-FolderSync：\" class=\"headerlink\" title=\"1.下载并安装 FolderSync：\"></a>1.下载并安装 FolderSync：</h3><ul>\n<li>从 Google Play 商店下载并安装 FolderSync 应用。</li>\n</ul>\n<h3 id=\"2-配置-SFTP-账户：\"><a href=\"#2-配置-SFTP-账户：\" class=\"headerlink\" title=\"2.配置 SFTP 账户：\"></a>2.配置 SFTP 账户：</h3><ul>\n<li>打开 FolderSync 应用。</li>\n<li>进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。</li>\n<li>在“账户类型”中选择“SFTP”。</li>\n</ul>\n<h3 id=\"3-填写-SFTP-账户详细信息：\"><a href=\"#3-填写-SFTP-账户详细信息：\" class=\"headerlink\" title=\"3.填写 SFTP 账户详细信息：\"></a>3.填写 SFTP 账户详细信息：</h3><ul>\n<li>主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199</li>\n<li>用户名： 输入你在 macOS 上的用户名。我的就是oo</li>\n<li>密码： 输入你在 macOS 上的用户密码。 </li>\n<li>远程路径： 输入你希望同步的 macOS 文件夹路径（例如 &#x2F;Users&#x2F;yourusername&#x2F;Documents）。</li>\n<li>端口： 默认端口为 22，不需要更改。</li>\n</ul>\n<h3 id=\"4-测试连接：\"><a href=\"#4-测试连接：\" class=\"headerlink\" title=\"4.测试连接：\"></a>4.测试连接：</h3><ul>\n<li>填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。</li>\n</ul>\n<h3 id=\"5-创建同步任务：\"><a href=\"#5-创建同步任务：\" class=\"headerlink\" title=\"5.创建同步任务：\"></a>5.创建同步任务：</h3><ul>\n<li>转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。</li>\n<li>选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。</li>\n<li>选择本地文件夹，你可以选择 Android 设备上的任何文件夹。</li>\n<li>配置同步选项，例如同步方向（单向或双向）、同步频率等。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。</li>\n<li>确保 macOS 上的防火墙允许 SSH 服务通过。</li>\n<li>根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。</li>\n</ul>\n","excerpt":"<p><strong>使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步</strong>，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：</p>","more":"<h2 id=\"在-macOS-上设置-SFTP-服务器\"><a href=\"#在-macOS-上设置-SFTP-服务器\" class=\"headerlink\" title=\"在 macOS 上设置 SFTP 服务器\"></a>在 macOS 上设置 SFTP 服务器</h2><ul>\n<li>在 Mac 上，选取苹果菜单 &gt;「系统偏好设置」，点按「共享」，然后选择「远程登录」。</li>\n<li>选择「远程登录」复选框。</li>\n<li>选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。</li>\n</ul>\n<p>注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh <a href=\"mailto:&#111;&#x6f;&#x40;&#49;&#x30;&#46;&#x39;&#48;&#x2e;&#x30;&#x2e;&#49;&#57;&#57;\">&#111;&#x6f;&#x40;&#49;&#x30;&#46;&#x39;&#48;&#x2e;&#x30;&#x2e;&#49;&#57;&#57;</a>”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。</p>\n<h2 id=\"在-Android-设备上配置-FolderSync\"><a href=\"#在-Android-设备上配置-FolderSync\" class=\"headerlink\" title=\"在 Android 设备上配置 FolderSync\"></a>在 Android 设备上配置 FolderSync</h2><h3 id=\"1-下载并安装-FolderSync：\"><a href=\"#1-下载并安装-FolderSync：\" class=\"headerlink\" title=\"1.下载并安装 FolderSync：\"></a>1.下载并安装 FolderSync：</h3><ul>\n<li>从 Google Play 商店下载并安装 FolderSync 应用。</li>\n</ul>\n<h3 id=\"2-配置-SFTP-账户：\"><a href=\"#2-配置-SFTP-账户：\" class=\"headerlink\" title=\"2.配置 SFTP 账户：\"></a>2.配置 SFTP 账户：</h3><ul>\n<li>打开 FolderSync 应用。</li>\n<li>进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。</li>\n<li>在“账户类型”中选择“SFTP”。</li>\n</ul>\n<h3 id=\"3-填写-SFTP-账户详细信息：\"><a href=\"#3-填写-SFTP-账户详细信息：\" class=\"headerlink\" title=\"3.填写 SFTP 账户详细信息：\"></a>3.填写 SFTP 账户详细信息：</h3><ul>\n<li>主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199</li>\n<li>用户名： 输入你在 macOS 上的用户名。我的就是oo</li>\n<li>密码： 输入你在 macOS 上的用户密码。 </li>\n<li>远程路径： 输入你希望同步的 macOS 文件夹路径（例如 &#x2F;Users&#x2F;yourusername&#x2F;Documents）。</li>\n<li>端口： 默认端口为 22，不需要更改。</li>\n</ul>\n<h3 id=\"4-测试连接：\"><a href=\"#4-测试连接：\" class=\"headerlink\" title=\"4.测试连接：\"></a>4.测试连接：</h3><ul>\n<li>填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。</li>\n</ul>\n<h3 id=\"5-创建同步任务：\"><a href=\"#5-创建同步任务：\" class=\"headerlink\" title=\"5.创建同步任务：\"></a>5.创建同步任务：</h3><ul>\n<li>转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。</li>\n<li>选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。</li>\n<li>选择本地文件夹，你可以选择 Android 设备上的任何文件夹。</li>\n<li>配置同步选项，例如同步方向（单向或双向）、同步频率等。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。</li>\n<li>确保 macOS 上的防火墙允许 SSH 服务通过。</li>\n<li>根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。</li>\n</ul>"},{"title":"hello-git","date":"2024-05-22T06:04:52.000Z","_content":"最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下\n\nGit是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：\n\n# 1. 分布式版本控制\nGit与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：\n- **离线工作能力**：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。\n- **备份和恢复**：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。\n\n# 2. 强大的分支模型\nGit的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：\n- **功能分支（Feature Branch）**：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。\n- **修复分支（Hotfix Branch）**：用于紧急修复生产环境中的问题。\n- **发布分支（Release Branch）**：在发布新版本前进行的最后调试和修复工作。\n\n# 3. 高效的合并和冲突解决\nGit使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：\n- **命令行工具**：如`git merge`和`git rebase`。\n- **图形化工具**：如GitKraken、Sourcetree等。\n\n# 4. 提交和历史记录\n每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：\n- `git log`：查看提交历史。\n- `git diff`：比较文件差异。\n- `git blame`：查看每行代码的最后修改记录。\n\n# 5. 分布式协作\nGit支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。\n\n## 基本命令\n以下是一些常用的Git命令及其简要说明：\n- `git init`：初始化一个新的Git仓库。\n- `git clone [url]`：克隆一个远程仓库到本地。\n- `git add [file]`：将文件的更改添加到暂存区。\n- `git commit -m \"message\"`：提交暂存区的内容。\n- `git status`：查看当前工作目录的状态。\n- `git push`：将本地提交推送到远程仓库。\n- `git pull`：从远程仓库拉取并合并更新。\n- `git branch`：列出、创建或删除分支。\n- `git checkout [branch]`：切换到指定分支。\n\n----\n## Git实践\n\n- **创建了本地版本仓库并将文件提交到本地仓库 常用操作**：\n1、mkdir 创建一个文件夹\n2、cd 进入该目录\n3、pwd 显示该目录路径\n4、git init 将创建的文件夹 变成一个本地仓库\n5、git add 文件名\n6、git commit -m \"这里通常对提交的文件做一个简单的说明\"\n7、git status 随时掌握工作去的状态\n8、git diff 查看修改内容\n9、git log 查看历史记录\n10、git log  --pretty=oneline  查看历史记录（带过滤）\n11、git reflog 用来记录每一次的命令\n12、git reset --hard commit_id 返回到历史版本\n13、cat 文件名  查看文件内容\n14、git checkout -- 文件名  实质是用版本库里面的文件版本替换工作去的版本\n15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致\n\n- **远程托管**：\n16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）\n17、git push -u origin master 第一次把当前分支master的所有内容推送到远程  \n18、git push origin master 非首次推送\n19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息\n     \n- **分支管理**：\n20、git branch 查看分支\n21、git branch branch_name 创建分支( branch_name为自定义的分支名称）  \n22、git checkout branch_name 切换分支\n23、git checkout -b branch_name  创建并切换分支\n24、git merge branch_name 合并某分支到当前分支\n25、git branch -d branch_name 删除分支\n26、git log --graph 查看分支合并图\n27、git merge --no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并\n28、git stash 把当前工作现场“隐藏”\n29、git stash list 查看隐藏的工作现场\n30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除\n31、git stash pop 恢复工作现场的同时，stash内容也被删除\n32、git branch -D branch_name 强行丢弃一个没有被合并过的分支\n\n- **创建标签**：\n33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id\n34、git tag -a tag_name  -m \"此处指定标签信息\"\n35、git tag -s tag_name  -m \"此处用PGP签名标签\"\n36、git tag 查看所有标签\n37、git show tag_name 查看标签信息\n\n- **操作标签**：\n38、git tag -d tag_name 删除一个本地标签\n39、git push origin tag_name 推送某个标签到本地\n40、git push origin --tags 推送全部未推送过的本地标签\n41、git push origin ： refs/tags/tag_name 删除一个远程标签\n\n- **自定义git**：\n42、git config  --global color.ui true\n43、git config  --global alias.st status 设置status的别名为st\n44、git config  --global alias.last 'log -1' 配置了一个git last，显示最后一次提交信息\n\n注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成\n注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）","source":"_posts/hello-git.md","raw":"---\ntitle: hello-git\ndate: 2024-05-22 14:04:52\ntags: git\n---\n最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下\n\nGit是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：\n\n# 1. 分布式版本控制\nGit与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：\n- **离线工作能力**：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。\n- **备份和恢复**：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。\n\n# 2. 强大的分支模型\nGit的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：\n- **功能分支（Feature Branch）**：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。\n- **修复分支（Hotfix Branch）**：用于紧急修复生产环境中的问题。\n- **发布分支（Release Branch）**：在发布新版本前进行的最后调试和修复工作。\n\n# 3. 高效的合并和冲突解决\nGit使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：\n- **命令行工具**：如`git merge`和`git rebase`。\n- **图形化工具**：如GitKraken、Sourcetree等。\n\n# 4. 提交和历史记录\n每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：\n- `git log`：查看提交历史。\n- `git diff`：比较文件差异。\n- `git blame`：查看每行代码的最后修改记录。\n\n# 5. 分布式协作\nGit支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。\n\n## 基本命令\n以下是一些常用的Git命令及其简要说明：\n- `git init`：初始化一个新的Git仓库。\n- `git clone [url]`：克隆一个远程仓库到本地。\n- `git add [file]`：将文件的更改添加到暂存区。\n- `git commit -m \"message\"`：提交暂存区的内容。\n- `git status`：查看当前工作目录的状态。\n- `git push`：将本地提交推送到远程仓库。\n- `git pull`：从远程仓库拉取并合并更新。\n- `git branch`：列出、创建或删除分支。\n- `git checkout [branch]`：切换到指定分支。\n\n----\n## Git实践\n\n- **创建了本地版本仓库并将文件提交到本地仓库 常用操作**：\n1、mkdir 创建一个文件夹\n2、cd 进入该目录\n3、pwd 显示该目录路径\n4、git init 将创建的文件夹 变成一个本地仓库\n5、git add 文件名\n6、git commit -m \"这里通常对提交的文件做一个简单的说明\"\n7、git status 随时掌握工作去的状态\n8、git diff 查看修改内容\n9、git log 查看历史记录\n10、git log  --pretty=oneline  查看历史记录（带过滤）\n11、git reflog 用来记录每一次的命令\n12、git reset --hard commit_id 返回到历史版本\n13、cat 文件名  查看文件内容\n14、git checkout -- 文件名  实质是用版本库里面的文件版本替换工作去的版本\n15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致\n\n- **远程托管**：\n16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）\n17、git push -u origin master 第一次把当前分支master的所有内容推送到远程  \n18、git push origin master 非首次推送\n19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息\n     \n- **分支管理**：\n20、git branch 查看分支\n21、git branch branch_name 创建分支( branch_name为自定义的分支名称）  \n22、git checkout branch_name 切换分支\n23、git checkout -b branch_name  创建并切换分支\n24、git merge branch_name 合并某分支到当前分支\n25、git branch -d branch_name 删除分支\n26、git log --graph 查看分支合并图\n27、git merge --no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并\n28、git stash 把当前工作现场“隐藏”\n29、git stash list 查看隐藏的工作现场\n30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除\n31、git stash pop 恢复工作现场的同时，stash内容也被删除\n32、git branch -D branch_name 强行丢弃一个没有被合并过的分支\n\n- **创建标签**：\n33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id\n34、git tag -a tag_name  -m \"此处指定标签信息\"\n35、git tag -s tag_name  -m \"此处用PGP签名标签\"\n36、git tag 查看所有标签\n37、git show tag_name 查看标签信息\n\n- **操作标签**：\n38、git tag -d tag_name 删除一个本地标签\n39、git push origin tag_name 推送某个标签到本地\n40、git push origin --tags 推送全部未推送过的本地标签\n41、git push origin ： refs/tags/tag_name 删除一个远程标签\n\n- **自定义git**：\n42、git config  --global color.ui true\n43、git config  --global alias.st status 设置status的别名为st\n44、git config  --global alias.last 'log -1' 配置了一个git last，显示最后一次提交信息\n\n注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成\n注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）","slug":"hello-git","published":1,"updated":"2024-05-22T06:16:20.281Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7oj0005rd3z9prx9c2n","content":"<p>最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下</p>\n<p>Git是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：</p>\n<h1 id=\"1-分布式版本控制\"><a href=\"#1-分布式版本控制\" class=\"headerlink\" title=\"1. 分布式版本控制\"></a>1. 分布式版本控制</h1><p>Git与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：</p>\n<ul>\n<li><strong>离线工作能力</strong>：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。</li>\n<li><strong>备份和恢复</strong>：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。</li>\n</ul>\n<h1 id=\"2-强大的分支模型\"><a href=\"#2-强大的分支模型\" class=\"headerlink\" title=\"2. 强大的分支模型\"></a>2. 强大的分支模型</h1><p>Git的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：</p>\n<ul>\n<li><strong>功能分支（Feature Branch）</strong>：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。</li>\n<li><strong>修复分支（Hotfix Branch）</strong>：用于紧急修复生产环境中的问题。</li>\n<li><strong>发布分支（Release Branch）</strong>：在发布新版本前进行的最后调试和修复工作。</li>\n</ul>\n<h1 id=\"3-高效的合并和冲突解决\"><a href=\"#3-高效的合并和冲突解决\" class=\"headerlink\" title=\"3. 高效的合并和冲突解决\"></a>3. 高效的合并和冲突解决</h1><p>Git使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：</p>\n<ul>\n<li><strong>命令行工具</strong>：如<code>git merge</code>和<code>git rebase</code>。</li>\n<li><strong>图形化工具</strong>：如GitKraken、Sourcetree等。</li>\n</ul>\n<h1 id=\"4-提交和历史记录\"><a href=\"#4-提交和历史记录\" class=\"headerlink\" title=\"4. 提交和历史记录\"></a>4. 提交和历史记录</h1><p>每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：</p>\n<ul>\n<li><code>git log</code>：查看提交历史。</li>\n<li><code>git diff</code>：比较文件差异。</li>\n<li><code>git blame</code>：查看每行代码的最后修改记录。</li>\n</ul>\n<h1 id=\"5-分布式协作\"><a href=\"#5-分布式协作\" class=\"headerlink\" title=\"5. 分布式协作\"></a>5. 分布式协作</h1><p>Git支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>以下是一些常用的Git命令及其简要说明：</p>\n<ul>\n<li><code>git init</code>：初始化一个新的Git仓库。</li>\n<li><code>git clone [url]</code>：克隆一个远程仓库到本地。</li>\n<li><code>git add [file]</code>：将文件的更改添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交暂存区的内容。</li>\n<li><code>git status</code>：查看当前工作目录的状态。</li>\n<li><code>git push</code>：将本地提交推送到远程仓库。</li>\n<li><code>git pull</code>：从远程仓库拉取并合并更新。</li>\n<li><code>git branch</code>：列出、创建或删除分支。</li>\n<li><code>git checkout [branch]</code>：切换到指定分支。</li>\n</ul>\n<hr>\n<h2 id=\"Git实践\"><a href=\"#Git实践\" class=\"headerlink\" title=\"Git实践\"></a>Git实践</h2><ul>\n<li><p><strong>创建了本地版本仓库并将文件提交到本地仓库 常用操作</strong>：<br>1、mkdir 创建一个文件夹<br>2、cd 进入该目录<br>3、pwd 显示该目录路径<br>4、git init 将创建的文件夹 变成一个本地仓库<br>5、git add 文件名<br>6、git commit -m “这里通常对提交的文件做一个简单的说明”<br>7、git status 随时掌握工作去的状态<br>8、git diff 查看修改内容<br>9、git log 查看历史记录<br>10、git log  –pretty&#x3D;oneline  查看历史记录（带过滤）<br>11、git reflog 用来记录每一次的命令<br>12、git reset –hard commit_id 返回到历史版本<br>13、cat 文件名  查看文件内容<br>14、git checkout – 文件名  实质是用版本库里面的文件版本替换工作去的版本<br>15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致</p>\n</li>\n<li><p><strong>远程托管</strong>：<br>16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）<br>17、git push -u origin master 第一次把当前分支master的所有内容推送到远程<br>18、git push origin master 非首次推送<br>19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息</p>\n</li>\n<li><p><strong>分支管理</strong>：<br>20、git branch 查看分支<br>21、git branch branch_name 创建分支( branch_name为自定义的分支名称）<br>22、git checkout branch_name 切换分支<br>23、git checkout -b branch_name  创建并切换分支<br>24、git merge branch_name 合并某分支到当前分支<br>25、git branch -d branch_name 删除分支<br>26、git log –graph 查看分支合并图<br>27、git merge –no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并<br>28、git stash 把当前工作现场“隐藏”<br>29、git stash list 查看隐藏的工作现场<br>30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除<br>31、git stash pop 恢复工作现场的同时，stash内容也被删除<br>32、git branch -D branch_name 强行丢弃一个没有被合并过的分支</p>\n</li>\n<li><p><strong>创建标签</strong>：<br>33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id<br>34、git tag -a tag_name  -m “此处指定标签信息”<br>35、git tag -s tag_name  -m “此处用PGP签名标签”<br>36、git tag 查看所有标签<br>37、git show tag_name 查看标签信息</p>\n</li>\n<li><p><strong>操作标签</strong>：<br>38、git tag -d tag_name 删除一个本地标签<br>39、git push origin tag_name 推送某个标签到本地<br>40、git push origin –tags 推送全部未推送过的本地标签<br>41、git push origin ： refs&#x2F;tags&#x2F;tag_name 删除一个远程标签</p>\n</li>\n<li><p><strong>自定义git</strong>：<br>42、git config  –global color.ui true<br>43、git config  –global alias.st status 设置status的别名为st<br>44、git config  –global alias.last ‘log -1’ 配置了一个git last，显示最后一次提交信息</p>\n</li>\n</ul>\n<p>注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成<br>注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）</p>\n","excerpt":"","more":"<p>最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下</p>\n<p>Git是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：</p>\n<h1 id=\"1-分布式版本控制\"><a href=\"#1-分布式版本控制\" class=\"headerlink\" title=\"1. 分布式版本控制\"></a>1. 分布式版本控制</h1><p>Git与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：</p>\n<ul>\n<li><strong>离线工作能力</strong>：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。</li>\n<li><strong>备份和恢复</strong>：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。</li>\n</ul>\n<h1 id=\"2-强大的分支模型\"><a href=\"#2-强大的分支模型\" class=\"headerlink\" title=\"2. 强大的分支模型\"></a>2. 强大的分支模型</h1><p>Git的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：</p>\n<ul>\n<li><strong>功能分支（Feature Branch）</strong>：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。</li>\n<li><strong>修复分支（Hotfix Branch）</strong>：用于紧急修复生产环境中的问题。</li>\n<li><strong>发布分支（Release Branch）</strong>：在发布新版本前进行的最后调试和修复工作。</li>\n</ul>\n<h1 id=\"3-高效的合并和冲突解决\"><a href=\"#3-高效的合并和冲突解决\" class=\"headerlink\" title=\"3. 高效的合并和冲突解决\"></a>3. 高效的合并和冲突解决</h1><p>Git使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：</p>\n<ul>\n<li><strong>命令行工具</strong>：如<code>git merge</code>和<code>git rebase</code>。</li>\n<li><strong>图形化工具</strong>：如GitKraken、Sourcetree等。</li>\n</ul>\n<h1 id=\"4-提交和历史记录\"><a href=\"#4-提交和历史记录\" class=\"headerlink\" title=\"4. 提交和历史记录\"></a>4. 提交和历史记录</h1><p>每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：</p>\n<ul>\n<li><code>git log</code>：查看提交历史。</li>\n<li><code>git diff</code>：比较文件差异。</li>\n<li><code>git blame</code>：查看每行代码的最后修改记录。</li>\n</ul>\n<h1 id=\"5-分布式协作\"><a href=\"#5-分布式协作\" class=\"headerlink\" title=\"5. 分布式协作\"></a>5. 分布式协作</h1><p>Git支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>以下是一些常用的Git命令及其简要说明：</p>\n<ul>\n<li><code>git init</code>：初始化一个新的Git仓库。</li>\n<li><code>git clone [url]</code>：克隆一个远程仓库到本地。</li>\n<li><code>git add [file]</code>：将文件的更改添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交暂存区的内容。</li>\n<li><code>git status</code>：查看当前工作目录的状态。</li>\n<li><code>git push</code>：将本地提交推送到远程仓库。</li>\n<li><code>git pull</code>：从远程仓库拉取并合并更新。</li>\n<li><code>git branch</code>：列出、创建或删除分支。</li>\n<li><code>git checkout [branch]</code>：切换到指定分支。</li>\n</ul>\n<hr>\n<h2 id=\"Git实践\"><a href=\"#Git实践\" class=\"headerlink\" title=\"Git实践\"></a>Git实践</h2><ul>\n<li><p><strong>创建了本地版本仓库并将文件提交到本地仓库 常用操作</strong>：<br>1、mkdir 创建一个文件夹<br>2、cd 进入该目录<br>3、pwd 显示该目录路径<br>4、git init 将创建的文件夹 变成一个本地仓库<br>5、git add 文件名<br>6、git commit -m “这里通常对提交的文件做一个简单的说明”<br>7、git status 随时掌握工作去的状态<br>8、git diff 查看修改内容<br>9、git log 查看历史记录<br>10、git log  –pretty&#x3D;oneline  查看历史记录（带过滤）<br>11、git reflog 用来记录每一次的命令<br>12、git reset –hard commit_id 返回到历史版本<br>13、cat 文件名  查看文件内容<br>14、git checkout – 文件名  实质是用版本库里面的文件版本替换工作去的版本<br>15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致</p>\n</li>\n<li><p><strong>远程托管</strong>：<br>16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）<br>17、git push -u origin master 第一次把当前分支master的所有内容推送到远程<br>18、git push origin master 非首次推送<br>19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息</p>\n</li>\n<li><p><strong>分支管理</strong>：<br>20、git branch 查看分支<br>21、git branch branch_name 创建分支( branch_name为自定义的分支名称）<br>22、git checkout branch_name 切换分支<br>23、git checkout -b branch_name  创建并切换分支<br>24、git merge branch_name 合并某分支到当前分支<br>25、git branch -d branch_name 删除分支<br>26、git log –graph 查看分支合并图<br>27、git merge –no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并<br>28、git stash 把当前工作现场“隐藏”<br>29、git stash list 查看隐藏的工作现场<br>30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除<br>31、git stash pop 恢复工作现场的同时，stash内容也被删除<br>32、git branch -D branch_name 强行丢弃一个没有被合并过的分支</p>\n</li>\n<li><p><strong>创建标签</strong>：<br>33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id<br>34、git tag -a tag_name  -m “此处指定标签信息”<br>35、git tag -s tag_name  -m “此处用PGP签名标签”<br>36、git tag 查看所有标签<br>37、git show tag_name 查看标签信息</p>\n</li>\n<li><p><strong>操作标签</strong>：<br>38、git tag -d tag_name 删除一个本地标签<br>39、git push origin tag_name 推送某个标签到本地<br>40、git push origin –tags 推送全部未推送过的本地标签<br>41、git push origin ： refs&#x2F;tags&#x2F;tag_name 删除一个远程标签</p>\n</li>\n<li><p><strong>自定义git</strong>：<br>42、git config  –global color.ui true<br>43、git config  –global alias.st status 设置status的别名为st<br>44、git config  –global alias.last ‘log -1’ 配置了一个git last，显示最后一次提交信息</p>\n</li>\n</ul>\n<p>注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成<br>注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）</p>\n"},{"title":"hello hexo","date":"2024-05-18T11:37:11.000Z","_content":"Hexo+Github搭建个人博客\n\n## 1. 介绍\n这是首次安装hexo成功后创建的test文档！\n\n## 2. 常用操作\n通过终端\ncd 进入自己创建的myblogs文件夹 \n然后执行\nhexo clean 清静态缓存\nhexo g 生成html文件\nhexo d 部署到Github\nhexo s 启动服务 关闭 control+c\n\n## 3. 注意事项\nhexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens\n可参考https://blog.csdn.net/qq_21040559/article/details/122621179\n\n## 4. 参考博文：\nhttps://blog.csdn.net/qq_21040559/article/details/122621179\nhttps://hexo.io/zh-cn/docs/commands\nhttps://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\nhttps://yanglukuan.github.io/2017/08/17/firstblog/","source":"_posts/hello-hexo.md","raw":"---\ntitle: hello hexo\ndate: 2024-05-18 19:37:11\ntags: hexo\n---\nHexo+Github搭建个人博客\n\n## 1. 介绍\n这是首次安装hexo成功后创建的test文档！\n\n## 2. 常用操作\n通过终端\ncd 进入自己创建的myblogs文件夹 \n然后执行\nhexo clean 清静态缓存\nhexo g 生成html文件\nhexo d 部署到Github\nhexo s 启动服务 关闭 control+c\n\n## 3. 注意事项\nhexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens\n可参考https://blog.csdn.net/qq_21040559/article/details/122621179\n\n## 4. 参考博文：\nhttps://blog.csdn.net/qq_21040559/article/details/122621179\nhttps://hexo.io/zh-cn/docs/commands\nhttps://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\nhttps://yanglukuan.github.io/2017/08/17/firstblog/","slug":"hello-hexo","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7ol0007rd3z6ptlh2sw","content":"<p>Hexo+Github搭建个人博客</p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>这是首次安装hexo成功后创建的test文档！</p>\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2. 常用操作\"></a>2. 常用操作</h2><p>通过终端<br>cd 进入自己创建的myblogs文件夹<br>然后执行<br>hexo clean 清静态缓存<br>hexo g 生成html文件<br>hexo d 部署到Github<br>hexo s 启动服务 关闭 control+c</p>\n<h2 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h2><p>hexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens<br>可参考<a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a></p>\n<h2 id=\"4-参考博文：\"><a href=\"#4-参考博文：\" class=\"headerlink\" title=\"4. 参考博文：\"></a>4. 参考博文：</h2><p><a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a><br><a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br><a href=\"https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\">https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f</a><br><a href=\"https://yanglukuan.github.io/2017/08/17/firstblog/\">https://yanglukuan.github.io/2017/08/17/firstblog/</a></p>\n","excerpt":"","more":"<p>Hexo+Github搭建个人博客</p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>这是首次安装hexo成功后创建的test文档！</p>\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2. 常用操作\"></a>2. 常用操作</h2><p>通过终端<br>cd 进入自己创建的myblogs文件夹<br>然后执行<br>hexo clean 清静态缓存<br>hexo g 生成html文件<br>hexo d 部署到Github<br>hexo s 启动服务 关闭 control+c</p>\n<h2 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h2><p>hexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens<br>可参考<a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a></p>\n<h2 id=\"4-参考博文：\"><a href=\"#4-参考博文：\" class=\"headerlink\" title=\"4. 参考博文：\"></a>4. 参考博文：</h2><p><a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a><br><a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br><a href=\"https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\">https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f</a><br><a href=\"https://yanglukuan.github.io/2017/08/17/firstblog/\">https://yanglukuan.github.io/2017/08/17/firstblog/</a></p>\n"},{"title":"hello github","date":"2024-05-18T11:38:05.000Z","_content":"将个人博客源码也托管到github\n关键点：分支切换 找到隐藏文件\n<!-- more -->\n# 配置步骤\n\n## 1.本地电脑创建文件夹并进入该文件夹\n\n```\nmkdir chenxingBlogs\ncd chenxingBlogs\n```\n\n## 2.将静态站托管仓库克隆回本地\n\n```\ngit clone https://github.com/lichenxing/lichenxing.github.io.git\n```\n\n## 3.新建分支并切换\n\n```\n# 新建并切换分支\ngit checkout -b source\n```\n\n备注：如果只是切换分支 git checkout 分支名。\n\n## 4.清理文件\n\n删除hexo自动生成的静态文件（注意保留.git目录）\n\n在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。\n\n## 5.添加hexo源码\n\n将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。\n\n## 6.同步代码到github\n```\ngit add -A\ngit commit -m '初始化自动部署分支'\ngit push --set-upstream origin source\n```\n## 7.登录github检查自己的仓库中是否已经有了源码的分支\n检查是否有「初始化自动部署分支」的提交。\n# 参考文档\n\nhttps://www.idzd.top/archives/1430/\n\n# 注意事项\n\n1. 在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。\n2. mac电脑显示隐藏文件快捷键：**Command + Shift + .** 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态\n","source":"_posts/hello-github.md","raw":"---\ntitle: hello github\ndate: 2024-05-18 19:38:05\ntags:\n  - hexo\n  - git\n---\n将个人博客源码也托管到github\n关键点：分支切换 找到隐藏文件\n<!-- more -->\n# 配置步骤\n\n## 1.本地电脑创建文件夹并进入该文件夹\n\n```\nmkdir chenxingBlogs\ncd chenxingBlogs\n```\n\n## 2.将静态站托管仓库克隆回本地\n\n```\ngit clone https://github.com/lichenxing/lichenxing.github.io.git\n```\n\n## 3.新建分支并切换\n\n```\n# 新建并切换分支\ngit checkout -b source\n```\n\n备注：如果只是切换分支 git checkout 分支名。\n\n## 4.清理文件\n\n删除hexo自动生成的静态文件（注意保留.git目录）\n\n在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。\n\n## 5.添加hexo源码\n\n将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。\n\n## 6.同步代码到github\n```\ngit add -A\ngit commit -m '初始化自动部署分支'\ngit push --set-upstream origin source\n```\n## 7.登录github检查自己的仓库中是否已经有了源码的分支\n检查是否有「初始化自动部署分支」的提交。\n# 参考文档\n\nhttps://www.idzd.top/archives/1430/\n\n# 注意事项\n\n1. 在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。\n2. mac电脑显示隐藏文件快捷键：**Command + Shift + .** 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态\n","slug":"hello-github","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7om0009rd3z8xcn0hmy","content":"<p>将个人博客源码也托管到github<br>关键点：分支切换 找到隐藏文件</p>\n<span id=\"more\"></span>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"1-本地电脑创建文件夹并进入该文件夹\"><a href=\"#1-本地电脑创建文件夹并进入该文件夹\" class=\"headerlink\" title=\"1.本地电脑创建文件夹并进入该文件夹\"></a>1.本地电脑创建文件夹并进入该文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">mkdir chenxingBlogs<br>cd chenxingBlogs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-将静态站托管仓库克隆回本地\"><a href=\"#2-将静态站托管仓库克隆回本地\" class=\"headerlink\" title=\"2.将静态站托管仓库克隆回本地\"></a>2.将静态站托管仓库克隆回本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone https://github.com/lichenxing/lichenxing.github.io.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-新建分支并切换\"><a href=\"#3-新建分支并切换\" class=\"headerlink\" title=\"3.新建分支并切换\"></a>3.新建分支并切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 新建并切换分支<br>git checkout -b source<br></code></pre></td></tr></table></figure>\n\n<p>备注：如果只是切换分支 git checkout 分支名。</p>\n<h2 id=\"4-清理文件\"><a href=\"#4-清理文件\" class=\"headerlink\" title=\"4.清理文件\"></a>4.清理文件</h2><p>删除hexo自动生成的静态文件（注意保留.git目录）</p>\n<p>在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。</p>\n<h2 id=\"5-添加hexo源码\"><a href=\"#5-添加hexo源码\" class=\"headerlink\" title=\"5.添加hexo源码\"></a>5.添加hexo源码</h2><p>将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。</p>\n<h2 id=\"6-同步代码到github\"><a href=\"#6-同步代码到github\" class=\"headerlink\" title=\"6.同步代码到github\"></a>6.同步代码到github</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git add -A<br>git commit -m &#x27;初始化自动部署分支&#x27;<br>git push --set-upstream origin source<br></code></pre></td></tr></table></figure>\n<h2 id=\"7-登录github检查自己的仓库中是否已经有了源码的分支\"><a href=\"#7-登录github检查自己的仓库中是否已经有了源码的分支\" class=\"headerlink\" title=\"7.登录github检查自己的仓库中是否已经有了源码的分支\"></a>7.登录github检查自己的仓库中是否已经有了源码的分支</h2><p>检查是否有「初始化自动部署分支」的提交。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://www.idzd.top/archives/1430/\">https://www.idzd.top/archives/1430/</a></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。</li>\n<li>mac电脑显示隐藏文件快捷键：<strong>Command + Shift + .</strong> 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态</li>\n</ol>\n","excerpt":"<p>将个人博客源码也托管到github<br>关键点：分支切换 找到隐藏文件</p>","more":"<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"1-本地电脑创建文件夹并进入该文件夹\"><a href=\"#1-本地电脑创建文件夹并进入该文件夹\" class=\"headerlink\" title=\"1.本地电脑创建文件夹并进入该文件夹\"></a>1.本地电脑创建文件夹并进入该文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">mkdir chenxingBlogs<br>cd chenxingBlogs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-将静态站托管仓库克隆回本地\"><a href=\"#2-将静态站托管仓库克隆回本地\" class=\"headerlink\" title=\"2.将静态站托管仓库克隆回本地\"></a>2.将静态站托管仓库克隆回本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone https://github.com/lichenxing/lichenxing.github.io.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-新建分支并切换\"><a href=\"#3-新建分支并切换\" class=\"headerlink\" title=\"3.新建分支并切换\"></a>3.新建分支并切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 新建并切换分支<br>git checkout -b source<br></code></pre></td></tr></table></figure>\n\n<p>备注：如果只是切换分支 git checkout 分支名。</p>\n<h2 id=\"4-清理文件\"><a href=\"#4-清理文件\" class=\"headerlink\" title=\"4.清理文件\"></a>4.清理文件</h2><p>删除hexo自动生成的静态文件（注意保留.git目录）</p>\n<p>在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。</p>\n<h2 id=\"5-添加hexo源码\"><a href=\"#5-添加hexo源码\" class=\"headerlink\" title=\"5.添加hexo源码\"></a>5.添加hexo源码</h2><p>将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。</p>\n<h2 id=\"6-同步代码到github\"><a href=\"#6-同步代码到github\" class=\"headerlink\" title=\"6.同步代码到github\"></a>6.同步代码到github</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git add -A<br>git commit -m &#x27;初始化自动部署分支&#x27;<br>git push --set-upstream origin source<br></code></pre></td></tr></table></figure>\n<h2 id=\"7-登录github检查自己的仓库中是否已经有了源码的分支\"><a href=\"#7-登录github检查自己的仓库中是否已经有了源码的分支\" class=\"headerlink\" title=\"7.登录github检查自己的仓库中是否已经有了源码的分支\"></a>7.登录github检查自己的仓库中是否已经有了源码的分支</h2><p>检查是否有「初始化自动部署分支」的提交。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://www.idzd.top/archives/1430/\">https://www.idzd.top/archives/1430/</a></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。</li>\n<li>mac电脑显示隐藏文件快捷键：<strong>Command + Shift + .</strong> 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态</li>\n</ol>"},{"title":"hello menu","date":"2024-05-18T11:36:01.000Z","_content":"自定义修改icarus的菜单，增删改新的菜单选项\n比如增加关于、相册等\n\n# 修改主题的配置文件_config.icarus.yml\n\n```\nmenu:\n主页: /\n归档: /archives\n分类: /categories\n标签: /tags\n相册: /photo\n关于: /about\n```\n\n注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面\n\n# 在Git控制台中创建对应页面\n\n从博客网站的根目录打开Git控制台，新建对应页面，例如：\n\n```\nhexo new page \"about\"\nhexo new page \"photo\"\n```\n\n# 继续在控制台键入命令\n\n```\nhexo cl\nhexo g\nhexo s\n```\n\n# 重新加载博客主页验证\n\n浏览器打开 http://localhost:4000/  新创建的菜单选项就成功了。\n","source":"_posts/hello-menu.md","raw":"---\ntitle: hello menu\ndate: 2024-05-18 19:36:01\ntags: hexo\n---\n自定义修改icarus的菜单，增删改新的菜单选项\n比如增加关于、相册等\n\n# 修改主题的配置文件_config.icarus.yml\n\n```\nmenu:\n主页: /\n归档: /archives\n分类: /categories\n标签: /tags\n相册: /photo\n关于: /about\n```\n\n注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面\n\n# 在Git控制台中创建对应页面\n\n从博客网站的根目录打开Git控制台，新建对应页面，例如：\n\n```\nhexo new page \"about\"\nhexo new page \"photo\"\n```\n\n# 继续在控制台键入命令\n\n```\nhexo cl\nhexo g\nhexo s\n```\n\n# 重新加载博客主页验证\n\n浏览器打开 http://localhost:4000/  新创建的菜单选项就成功了。\n","slug":"hello-menu","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7on000ard3zgj8t0j8z","content":"<p>自定义修改icarus的菜单，增删改新的菜单选项<br>比如增加关于、相册等</p>\n<h1 id=\"修改主题的配置文件-config-icarus-yml\"><a href=\"#修改主题的配置文件-config-icarus-yml\" class=\"headerlink\" title=\"修改主题的配置文件_config.icarus.yml\"></a>修改主题的配置文件_config.icarus.yml</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">menu:<br>主页: /<br>归档: /archives<br>分类: /categories<br>标签: /tags<br>相册: /photo<br>关于: /about<br></code></pre></td></tr></table></figure>\n\n<p>注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面</p>\n<h1 id=\"在Git控制台中创建对应页面\"><a href=\"#在Git控制台中创建对应页面\" class=\"headerlink\" title=\"在Git控制台中创建对应页面\"></a>在Git控制台中创建对应页面</h1><p>从博客网站的根目录打开Git控制台，新建对应页面，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo new page &quot;about&quot;<br>hexo new page &quot;photo&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"继续在控制台键入命令\"><a href=\"#继续在控制台键入命令\" class=\"headerlink\" title=\"继续在控制台键入命令\"></a>继续在控制台键入命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo cl<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"重新加载博客主页验证\"><a href=\"#重新加载博客主页验证\" class=\"headerlink\" title=\"重新加载博客主页验证\"></a>重新加载博客主页验证</h1><p>浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a>  新创建的菜单选项就成功了。</p>\n","excerpt":"","more":"<p>自定义修改icarus的菜单，增删改新的菜单选项<br>比如增加关于、相册等</p>\n<h1 id=\"修改主题的配置文件-config-icarus-yml\"><a href=\"#修改主题的配置文件-config-icarus-yml\" class=\"headerlink\" title=\"修改主题的配置文件_config.icarus.yml\"></a>修改主题的配置文件_config.icarus.yml</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">menu:<br>主页: /<br>归档: /archives<br>分类: /categories<br>标签: /tags<br>相册: /photo<br>关于: /about<br></code></pre></td></tr></table></figure>\n\n<p>注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面</p>\n<h1 id=\"在Git控制台中创建对应页面\"><a href=\"#在Git控制台中创建对应页面\" class=\"headerlink\" title=\"在Git控制台中创建对应页面\"></a>在Git控制台中创建对应页面</h1><p>从博客网站的根目录打开Git控制台，新建对应页面，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo new page &quot;about&quot;<br>hexo new page &quot;photo&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"继续在控制台键入命令\"><a href=\"#继续在控制台键入命令\" class=\"headerlink\" title=\"继续在控制台键入命令\"></a>继续在控制台键入命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo cl<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"重新加载博客主页验证\"><a href=\"#重新加载博客主页验证\" class=\"headerlink\" title=\"重新加载博客主页验证\"></a>重新加载博客主页验证</h1><p>浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a>  新创建的菜单选项就成功了。</p>\n"},{"title":"hello theme","date":"2024-05-18T11:34:45.000Z","_content":"对个人博客的主题进行更换。\n\n## 步骤简介\n\n1. 进入hexo官网挑选自己喜欢的主题 https://hexo.io/themes/\n2. 确定选择icarus主题，下载icarus主题 https://github.com/ppoffice/hexo-theme-icarus\n3. 更换配置文件 https://github.com/ppoffice/hexo-theme-icarus\n\n## 遇到的问题\n\nhexo clean时报错 prism_plugin\n\n**现象**\n\n```\nERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20\n```\n\n**解决**\n\n在_config.yml文件中增加下面代码\n\n```\nprism_plugin:\nmode: 'preprocess' # realtime/preprocess\ntheme: 'default'\nline_number: false # default false\n```\n\n","source":"_posts/hello-theme.md","raw":"---\ntitle: hello theme\ndate: 2024-05-18 19:34:45\ntags: hexo \n---\n对个人博客的主题进行更换。\n\n## 步骤简介\n\n1. 进入hexo官网挑选自己喜欢的主题 https://hexo.io/themes/\n2. 确定选择icarus主题，下载icarus主题 https://github.com/ppoffice/hexo-theme-icarus\n3. 更换配置文件 https://github.com/ppoffice/hexo-theme-icarus\n\n## 遇到的问题\n\nhexo clean时报错 prism_plugin\n\n**现象**\n\n```\nERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20\n```\n\n**解决**\n\n在_config.yml文件中增加下面代码\n\n```\nprism_plugin:\nmode: 'preprocess' # realtime/preprocess\ntheme: 'default'\nline_number: false # default false\n```\n\n","slug":"hello-theme","published":1,"updated":"2024-05-18T13:56:59.452Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7oo000crd3z7oj80wcy","content":"<p>对个人博客的主题进行更换。</p>\n<h2 id=\"步骤简介\"><a href=\"#步骤简介\" class=\"headerlink\" title=\"步骤简介\"></a>步骤简介</h2><ol>\n<li>进入hexo官网挑选自己喜欢的主题 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>确定选择icarus主题，下载icarus主题 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n<li>更换配置文件 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>hexo clean时报错 prism_plugin</p>\n<p><strong>现象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决</strong></p>\n<p>在_config.yml文件中增加下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">prism_plugin:<br>mode: &#x27;preprocess&#x27; # realtime/preprocess<br>theme: &#x27;default&#x27;<br>line_number: false # default false<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>对个人博客的主题进行更换。</p>\n<h2 id=\"步骤简介\"><a href=\"#步骤简介\" class=\"headerlink\" title=\"步骤简介\"></a>步骤简介</h2><ol>\n<li>进入hexo官网挑选自己喜欢的主题 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>确定选择icarus主题，下载icarus主题 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n<li>更换配置文件 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>hexo clean时报错 prism_plugin</p>\n<p><strong>现象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决</strong></p>\n<p>在_config.yml文件中增加下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">prism_plugin:<br>mode: &#x27;preprocess&#x27; # realtime/preprocess<br>theme: &#x27;default&#x27;<br>line_number: false # default false<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-05-18T13:56:59.452Z","updated":"2024-05-18T13:56:59.452Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7op000erd3zegh57od4","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"git reset","date":"2024-05-18T11:41:00.000Z","_content":"要将代码回退到之前的某一次提交，你可以使用 **git reset** 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：\n<!-- more -->\n## 1.**确定要回退到的提交哈希值**: 使用 **git log** 查看提交历史，找到你想要回退到的提交的哈希值\n```\ngit log\n```\n## 2.**执行回退操作:** 使用 **git reset --hard <commit-hash>** 将 HEAD 指针重置到你选择的提交\n```\ngit reset --hard <commit-hash>\n```\n这将会重置你的工作目录和暂存区，使其与指定提交一致。\n## 3.**如果需要，强制推送到远程仓库**: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 **-f** 或 **--force** 选项来强制推送。\n\n```\ngit push origin <branch-name> --force\n```\n请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。\n通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。\n","source":"_posts/git-reset.md","raw":"---\ntitle: git reset\ndate: 2024-05-18 19:41:00\ntags: git\ncategories: git\n---\n要将代码回退到之前的某一次提交，你可以使用 **git reset** 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：\n<!-- more -->\n## 1.**确定要回退到的提交哈希值**: 使用 **git log** 查看提交历史，找到你想要回退到的提交的哈希值\n```\ngit log\n```\n## 2.**执行回退操作:** 使用 **git reset --hard <commit-hash>** 将 HEAD 指针重置到你选择的提交\n```\ngit reset --hard <commit-hash>\n```\n这将会重置你的工作目录和暂存区，使其与指定提交一致。\n## 3.**如果需要，强制推送到远程仓库**: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 **-f** 或 **--force** 选项来强制推送。\n\n```\ngit push origin <branch-name> --force\n```\n请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。\n通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。\n","slug":"git-reset","published":1,"updated":"2024-05-18T13:56:59.451Z","comments":1,"layout":"post","photos":[],"_id":"clwhfl7oq000ird3z2ah7dygd","content":"<p>要将代码回退到之前的某一次提交，你可以使用 <strong>git reset</strong> 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：</p>\n<span id=\"more\"></span>\n<h2 id=\"1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\"><a href=\"#1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\" class=\"headerlink\" title=\"1.确定要回退到的提交哈希值: 使用 git log 查看提交历史，找到你想要回退到的提交的哈希值\"></a>1.<strong>确定要回退到的提交哈希值</strong>: 使用 <strong>git log</strong> 查看提交历史，找到你想要回退到的提交的哈希值</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git log<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\"><a href=\"#2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\" class=\"headerlink\" title=\"2.执行回退操作: 使用 git reset –hard  将 HEAD 指针重置到你选择的提交\"></a>2.<strong>执行回退操作:</strong> 使用 <strong>git reset –hard <commit-hash></strong> 将 HEAD 指针重置到你选择的提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></figure>\n<p>这将会重置你的工作目录和暂存区，使其与指定提交一致。</p>\n<h2 id=\"3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\"><a href=\"#3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\" class=\"headerlink\" title=\"3.如果需要，强制推送到远程仓库: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 -f 或 –force 选项来强制推送。\"></a>3.<strong>如果需要，强制推送到远程仓库</strong>: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 <strong>-f</strong> 或 <strong>–force</strong> 选项来强制推送。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git push origin &lt;branch-name&gt; --force<br></code></pre></td></tr></table></figure>\n<p>请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。<br>通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。</p>\n","excerpt":"<p>要将代码回退到之前的某一次提交，你可以使用 <strong>git reset</strong> 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：</p>","more":"<h2 id=\"1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\"><a href=\"#1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\" class=\"headerlink\" title=\"1.确定要回退到的提交哈希值: 使用 git log 查看提交历史，找到你想要回退到的提交的哈希值\"></a>1.<strong>确定要回退到的提交哈希值</strong>: 使用 <strong>git log</strong> 查看提交历史，找到你想要回退到的提交的哈希值</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git log<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\"><a href=\"#2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\" class=\"headerlink\" title=\"2.执行回退操作: 使用 git reset –hard  将 HEAD 指针重置到你选择的提交\"></a>2.<strong>执行回退操作:</strong> 使用 <strong>git reset –hard <commit-hash></strong> 将 HEAD 指针重置到你选择的提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></figure>\n<p>这将会重置你的工作目录和暂存区，使其与指定提交一致。</p>\n<h2 id=\"3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\"><a href=\"#3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\" class=\"headerlink\" title=\"3.如果需要，强制推送到远程仓库: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 -f 或 –force 选项来强制推送。\"></a>3.<strong>如果需要，强制推送到远程仓库</strong>: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 <strong>-f</strong> 或 <strong>–force</strong> 选项来强制推送。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git push origin &lt;branch-name&gt; --force<br></code></pre></td></tr></table></figure>\n<p>请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。<br>通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clwhfl7oi0004rd3z3w2x5ppd","category_id":"clwhfl7ol0006rd3zecfy1zca","_id":"clwhfl7oq000frd3zhxamcij6"},{"post_id":"clwhfl7oq000ird3z2ah7dygd","category_id":"clwhfl7os000lrd3zbf53f66l","_id":"clwhfl7ot000qrd3z6xza0jhj"}],"PostTag":[{"post_id":"clwhfl7o90001rd3z2rp2fiof","tag_id":"clwhfl7og0003rd3z4ajb7oo9","_id":"clwhfl7oo000drd3zh9ko17jk"},{"post_id":"clwhfl7o90001rd3z2rp2fiof","tag_id":"clwhfl7ol0008rd3z3eg0drfx","_id":"clwhfl7oq000grd3zgfxg8etj"},{"post_id":"clwhfl7oo000crd3z7oj80wcy","tag_id":"clwhfl7oo000brd3ze153dqd5","_id":"clwhfl7or000jrd3zdvui79gw"},{"post_id":"clwhfl7oe0002rd3z4ux2fogf","tag_id":"clwhfl7oo000brd3ze153dqd5","_id":"clwhfl7or000krd3zh0mhaaew"},{"post_id":"clwhfl7oi0004rd3z3w2x5ppd","tag_id":"clwhfl7oq000hrd3z8gmtccj4","_id":"clwhfl7os000nrd3zbxba5j2h"},{"post_id":"clwhfl7oj0005rd3z9prx9c2n","tag_id":"clwhfl7os000mrd3z3rck146r","_id":"clwhfl7ot000prd3zafg76f3f"},{"post_id":"clwhfl7ol0007rd3z6ptlh2sw","tag_id":"clwhfl7oo000brd3ze153dqd5","_id":"clwhfl7ou000srd3zgk7lhuoq"},{"post_id":"clwhfl7om0009rd3z8xcn0hmy","tag_id":"clwhfl7oo000brd3ze153dqd5","_id":"clwhfl7ov000vrd3z5kv73a47"},{"post_id":"clwhfl7om0009rd3z8xcn0hmy","tag_id":"clwhfl7os000mrd3z3rck146r","_id":"clwhfl7ov000wrd3zcwxl9ovx"},{"post_id":"clwhfl7on000ard3zgj8t0j8z","tag_id":"clwhfl7oo000brd3ze153dqd5","_id":"clwhfl7ov000yrd3zheid4pf3"},{"post_id":"clwhfl7oq000ird3z2ah7dygd","tag_id":"clwhfl7os000mrd3z3rck146r","_id":"clwhfl7ov000zrd3z5cdqgotk"}],"Tag":[{"name":"github","_id":"clwhfl7og0003rd3z4ajb7oo9"},{"name":"ssh","_id":"clwhfl7ol0008rd3z3eg0drfx"},{"name":"hexo","_id":"clwhfl7oo000brd3ze153dqd5"},{"name":"file","_id":"clwhfl7oq000hrd3z8gmtccj4"},{"name":"git","_id":"clwhfl7os000mrd3z3rck146r"}]}}