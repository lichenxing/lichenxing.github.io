{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source\\CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source\\CNAME","hash":"886bbb9f45124ef9765946d814581397651dc331","modified":1719989201356},{"_id":"source\\_posts\\SSH-Key.md","hash":"36f58304e6485d624e2dca4f6fff9d4aaba388a5","modified":1719989201357},{"_id":"source\\_posts\\app-launcher.md","hash":"faf786825b991faa6b050630fc934c2a5edb71f7","modified":1719989201358},{"_id":"source\\_posts\\folderSync.md","hash":"2f919982b1179ca8450d7e639106f19608f6f2f6","modified":1719989201360},{"_id":"source\\_posts\\git-reset.md","hash":"e7b67ab313f80019c97e2f7edfcc58059a28bd60","modified":1719989201362},{"_id":"source\\_posts\\hello-adb.md","hash":"7f313f4d6fadf1766105304dde1819855aa90781","modified":1719989201363},{"_id":"source\\_posts\\hello-django.md","hash":"fc047c3c2c36388f2da82f611f1f2fba0d2ab2a1","modified":1719989201364},{"_id":"source\\_posts\\hello-domain.md","hash":"126cb6ab2f3051b5316d4590496e91ba36f3d541","modified":1719989201364},{"_id":"source\\_posts\\hello-git.md","hash":"53caf3a6b4517dae88a98cb896e799d4df2b098d","modified":1719989201366},{"_id":"source\\_posts\\hello-github.md","hash":"80447b5b4f96a7f34ea6a997002f168e0ee922fd","modified":1719989201367},{"_id":"source\\_posts\\hello-hexo.md","hash":"d24ecae3b361fc8bf285ba2dc58daf9bcdf69268","modified":1719989201368},{"_id":"source\\_posts\\hello-menu.md","hash":"18e8f0d8b5615afcfebe1a9a1a76ef03ac099ede","modified":1719989201370},{"_id":"source\\_posts\\hello-ollama.md","hash":"b13e8f656fa91614d48477220aacd348b741db87","modified":1719989201371},{"_id":"source\\_posts\\hello-theme.md","hash":"b963f872a4373237dae5789c3089685d313415df","modified":1719989201372},{"_id":"source\\_posts\\hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1719989201374},{"_id":"source\\_posts\\mysql.md","hash":"391715dbc77cc9cd001133994839387b38fd03d1","modified":1719989201375},{"_id":"source\\_posts\\test-hexo-admin.md","hash":"6be8a70d7bbc3371b9a7b3ed47bcdc426314614b","modified":1719989201377},{"_id":"source\\about\\index.md","hash":"48c3b119f9f5c9d85522b0a0379ad338a2a6207c","modified":1719989292425},{"_id":"node_modules\\hexo-theme-icarus\\layout\\comment\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191176},{"_id":"node_modules\\hexo-theme-icarus\\layout\\donate\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191195},{"_id":"node_modules\\hexo-theme-icarus\\layout\\misc\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191199},{"_id":"node_modules\\hexo-theme-icarus\\layout\\search\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191206},{"_id":"node_modules\\hexo-theme-icarus\\layout\\share\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191207},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\comment\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191092},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\donate\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191112},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\misc\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191114},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\search\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191118},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\share\\.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719989191120},{"_id":"node_modules\\hexo-theme-icarus\\CONTRIBUTING.md","hash":"c5086f94020aa58e2a7d131806e0cf15e7b54854","modified":1719989191076},{"_id":"node_modules\\hexo-theme-icarus\\LICENSE","hash":"bb9d587dd8b9073462ae10daf252ea3092a81b1b","modified":1719989191077},{"_id":"node_modules\\hexo-theme-icarus\\README.md","hash":"f3ed15651b630370a4a6a749aab718f18db02bbf","modified":1719989191078},{"_id":"node_modules\\hexo-theme-icarus\\package.json","hash":"d1b00c70d9e1815cca50d23284d7c9eebb27e1fb","modified":1719989191213},{"_id":"node_modules\\hexo-theme-icarus\\include\\config.js","hash":"17e78ff6e35a9bb6015b76be940fb1b47fa791f1","modified":1719989191080},{"_id":"node_modules\\hexo-theme-icarus\\include\\dependency.js","hash":"51a47a1271e0e1d1d2f2cae0f945bc9e68a14841","modified":1719989191081},{"_id":"node_modules\\hexo-theme-icarus\\include\\register.js","hash":"d26ded5207a7647d487a078d7560eb1557d23a14","modified":1719989191091},{"_id":"node_modules\\hexo-theme-icarus\\languages\\de.yml","hash":"b63e162471ecce52d4f429f4bdeec6e34abe0d1e","modified":1719989191146},{"_id":"node_modules\\hexo-theme-icarus\\languages\\en.yml","hash":"30c7f76da0e76aaa1d67149bd6ff0686c6f62618","modified":1719989191147},{"_id":"node_modules\\hexo-theme-icarus\\languages\\es.yml","hash":"218050f931f5cbc54507dadb3d9d78123bc7a114","modified":1719989191149},{"_id":"node_modules\\hexo-theme-icarus\\languages\\fr.yml","hash":"9cecc684ef8c3c5037c228c9769d4fe8c98fe06b","modified":1719989191150},{"_id":"node_modules\\hexo-theme-icarus\\languages\\id.yml","hash":"140b8473ea15e3d6bd0cbf25730946f7395bcfd0","modified":1719989191152},{"_id":"node_modules\\hexo-theme-icarus\\languages\\it.yml","hash":"c0dd5e7f59a71327a63824c342427785623d7644","modified":1719989191154},{"_id":"node_modules\\hexo-theme-icarus\\languages\\ja.yml","hash":"c057ed106686484b610955911528698cf3e1c5cb","modified":1719989191155},{"_id":"node_modules\\hexo-theme-icarus\\languages\\ko.yml","hash":"099b7bf9ea1deda3dd89436e40d17e61f44abe18","modified":1719989191156},{"_id":"node_modules\\hexo-theme-icarus\\languages\\pl.yml","hash":"7f7dd9693eff26fca94970055c66a11732d2ff6d","modified":1719989191158},{"_id":"node_modules\\hexo-theme-icarus\\languages\\pt-BR.yml","hash":"cbb50c0f957c620dc3312181416f4d95136bf70f","modified":1719989191160},{"_id":"node_modules\\hexo-theme-icarus\\languages\\ru.yml","hash":"0dd2a3121f21fed318a707bd443c449016c64ee9","modified":1719989191161},{"_id":"node_modules\\hexo-theme-icarus\\languages\\sv.yml","hash":"c4ddf40abdbe6bd8743d60976af7b5df31485117","modified":1719989191162},{"_id":"node_modules\\hexo-theme-icarus\\languages\\tk.yml","hash":"3d7a91ab47d69bfbe06ae8cdd44a01cc5bcdcefd","modified":1719989191165},{"_id":"node_modules\\hexo-theme-icarus\\languages\\tr.yml","hash":"508090a5140c854d991d25b2de3859cb4c5dc98d","modified":1719989191166},{"_id":"node_modules\\hexo-theme-icarus\\languages\\vn.yml","hash":"6b0443202e7ad34a9518f52e087021924c3082ef","modified":1719989191168},{"_id":"node_modules\\hexo-theme-icarus\\languages\\zh-CN.yml","hash":"48ae4765804b66b3e3f4951f5d2f3cc7a8ae5bfb","modified":1719989191169},{"_id":"node_modules\\hexo-theme-icarus\\languages\\zh-TW.yml","hash":"4d10ef78f64e8de8ce1919c31f823a72b1198088","modified":1719989191170},{"_id":"node_modules\\hexo-theme-icarus\\layout\\archive.jsx","hash":"66a86c0e930aad27a7f84a1392ee90c5e92b6026","modified":1719989191172},{"_id":"node_modules\\hexo-theme-icarus\\layout\\categories.jsx","hash":"50d81072a5b5508a906b2c96289982d081a59edd","modified":1719989191174},{"_id":"node_modules\\hexo-theme-icarus\\layout\\category.jsx","hash":"16c8cf03fd976d839242dcf9240ccaf59b843daa","modified":1719989191175},{"_id":"node_modules\\hexo-theme-icarus\\layout\\index.jsx","hash":"c2e7008020c4358f491c8e2ad871aa2274a427d0","modified":1719989191196},{"_id":"node_modules\\hexo-theme-icarus\\layout\\layout.jsx","hash":"c5dbc189ba84e7da16b062084c6de2266c576cd1","modified":1719989191197},{"_id":"node_modules\\hexo-theme-icarus\\layout\\page.jsx","hash":"8a3cce132f7a4d52450cdcada54afeb5465fdc8d","modified":1719989191200},{"_id":"node_modules\\hexo-theme-icarus\\layout\\post.jsx","hash":"8a3cce132f7a4d52450cdcada54afeb5465fdc8d","modified":1719989191204},{"_id":"node_modules\\hexo-theme-icarus\\layout\\tag.jsx","hash":"49c04b040ba0ff138ad36d6478bd76e18edc8085","modified":1719989191208},{"_id":"node_modules\\hexo-theme-icarus\\layout\\tags.jsx","hash":"5bd27a87fc6e456beb3e56e1dcdbd1f7ac010ce1","modified":1719989191210},{"_id":"node_modules\\hexo-theme-icarus\\scripts\\index.js","hash":"8dde4f5a15e9fb40461421a1b232907cd4a760f5","modified":1719989191215},{"_id":"node_modules\\hexo-theme-icarus\\include\\migration\\head.js","hash":"9dc06fb9f1c8dfb93a0dc6aa695e68bd5745cdbe","modified":1719989191084},{"_id":"node_modules\\hexo-theme-icarus\\include\\migration\\v2_v3.js","hash":"a2ece0657feecd674b7282527d2c0527d5e22ecd","modified":1719989191085},{"_id":"node_modules\\hexo-theme-icarus\\include\\migration\\v3_v4.js","hash":"3eae4e9a217512505bf926d4c6ab7e3a445a9008","modified":1719989191086},{"_id":"node_modules\\hexo-theme-icarus\\include\\migration\\v4_v5.js","hash":"0294a0e38f63e9e0e23cdd6a326f45109ec6d111","modified":1719989191088},{"_id":"node_modules\\hexo-theme-icarus\\include\\migration\\v5_v5.1.js","hash":"0e3679f4b18b6a439fc69432f7a582b41b6c21c3","modified":1719989191090},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\config.json","hash":"0808c015e764168347f822e318c9d28d985543eb","modified":1719989191111},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\article.styl","hash":"02eeb21438fefb53ce1f55642c3f5f7d4923911f","modified":1719989191124},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\base.styl","hash":"0d9cf52474d206dcbf17be1c4cf78ba75f5e98a6","modified":1719989191125},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\button.styl","hash":"f9e52370ee7801b35682d76071f98f7ce6126231","modified":1719989191126},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\card.styl","hash":"6feb59420aa2fd67e52dd5b917623dc2fcb75bda","modified":1719989191127},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\codeblock.styl","hash":"f364a88a0ca1550a61cbbe588459f87c2652b5e0","modified":1719989191128},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\donate.styl","hash":"9f8e5cc0bec3e4452b900fafe0975d41e311a076","modified":1719989191129},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\footer.styl","hash":"d90d5137f29841ca4dc48c62e344bebe0cd7aa76","modified":1719989191131},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\helper.styl","hash":"4519470a51ebce65d2a0f2682d66b509d321e7ca","modified":1719989191132},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\navbar.styl","hash":"30b948a8e425b5c36aaa6ffdcc13c5fa1fffd739","modified":1719989191134},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\pagination.styl","hash":"b2addeb9b0bcf46f157d2742012ad647c1bca090","modified":1719989191135},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\plugin.styl","hash":"06d8a505b0615d8e5df173cb3e00d45bc0b976e2","modified":1719989191136},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\responsive.styl","hash":"9a481311478b788851d437b82a934fcfce758f9f","modified":1719989191138},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\search.styl","hash":"ff947d107b57b5d8865680be1301f6c49abcc3e1","modified":1719989191139},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\timeline.styl","hash":"0f15f648821abe412e2105e157c9810bb4834aa4","modified":1719989191140},{"_id":"node_modules\\hexo-theme-icarus\\include\\style\\widget.styl","hash":"2d6cfac39d66391c65facb26f0965e528c12007e","modified":1719989191141},{"_id":"node_modules\\hexo-theme-icarus\\include\\util\\console.js","hash":"9bd6d4691b56012ea17146db577e27ae20e0c335","modified":1719989191144},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\article.jsx","hash":"5b5aced7929f1ff0472eb6b58643935f22013c1c","modified":1719989191179},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\comment.jsx","hash":"dee9f64341ac6e9911a22e2886e8766512642d85","modified":1719989191180},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\donates.jsx","hash":"aa3c3ee496eaf1cacbdd8dc4022650061010f006","modified":1719989191181},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\footer.jsx","hash":"7f687ced0d35015926375183dc38d47640a020f6","modified":1719989191184},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\head.jsx","hash":"91088ee9e7d8a2d39f7ea7bce123fb2e64c2d0f2","modified":1719989191185},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\navbar.jsx","hash":"f387ff7de38d9fb72ea06eaa3bb5b6eef436e6cc","modified":1719989191187},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\plugins.jsx","hash":"be530269e8c1eebbc0380c7a17df173bc702d946","modified":1719989191188},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\scripts.jsx","hash":"dd54deefa449837ff57d748e3b5efd4a99e8a2ca","modified":1719989191189},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\search.jsx","hash":"c9ecd670819e3af4b68bcefd2ef1300d8a068cbd","modified":1719989191190},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\share.jsx","hash":"1d8167c3c9231ef6bdd7138331174e8309ad0899","modified":1719989191191},{"_id":"node_modules\\hexo-theme-icarus\\layout\\common\\widgets.jsx","hash":"59fe235a65fcf1c8e44be1d74d6c4ea390c0b888","modified":1719989191192},{"_id":"node_modules\\hexo-theme-icarus\\layout\\plugin\\animejs.jsx","hash":"bd2b9209051a03e5cb3bdf2c97e6c16d0d75cb8a","modified":1719989191202},{"_id":"node_modules\\hexo-theme-icarus\\layout\\plugin\\back_to_top.jsx","hash":"2c29b2a62e07b700b98df18cf0c80d648059ad25","modified":1719989191203},{"_id":"node_modules\\hexo-theme-icarus\\layout\\widget\\profile.jsx","hash":"424b006a2d774e6586c50d255edba289cb6282e1","modified":1719989191212},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\cyberpunk.styl","hash":"ca393322f37c04fbc579399ea3eb80d8c2d87bae","modified":1719989191218},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\default.styl","hash":"b2d886eacd43ab395ae3221e92bc0a9d23eff3a0","modified":1719989191219},{"_id":"node_modules\\hexo-theme-icarus\\source\\css\\style.styl","hash":"4494bd1e471afa42f2e97252e2d6ac5e640f47b0","modified":1719989191220},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1719989191222},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\favicon.svg","hash":"50322629b1947588ff7a6e59fb07cb1b5bfb9f8c","modified":1719989191224},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\logo.svg","hash":"f4a9aa50f9a732981ae79e3711a997fc7325a7db","modified":1719989191225},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1719989191226},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1719989191227},{"_id":"node_modules\\hexo-theme-icarus\\source\\img\\razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1719989191229},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\animation.js","hash":"54a894f060c04c390c75216d26227dc26cf22036","modified":1719989191231},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\back_to_top.js","hash":"142738e7b2b089ade64a6c753ba3fddef0818ecb","modified":1719989191232},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\column.js","hash":"017a2e7c662e3e66ee96ba9b93ea54219b8035a3","modified":1719989191234},{"_id":"node_modules\\hexo-theme-icarus\\source\\js\\main.js","hash":"82505c4b249d9b83eb4128e1a43e7e527fb32c98","modified":1719989191236},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\article.json","hash":"949eb619353609af7876f7a349a0a84a08773b7f","modified":1719989191095},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\comment.json","hash":"2aa3683d5f8cc065296d2c8350b1c4dcc2a20d1c","modified":1719989191097},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\donates.json","hash":"f0f0b093db47f21d12db8eb062aa98ff7d76ab5d","modified":1719989191098},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\footer.json","hash":"9852820a8f803193d7b41c6d48c4a260c66ade50","modified":1719989191100},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\head.json","hash":"23949deaae0ee8e3906d0bdd1f08cfbe2af14754","modified":1719989191101},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\navbar.json","hash":"62d56f955da52430ae64623fbefc1053b4afcc85","modified":1719989191102},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\plugins.json","hash":"215663c13e0992f987f337271b9048d60194ed90","modified":1719989191104},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\providers.json","hash":"5453827e1c267c67102bc983c8d2313865aa64fd","modified":1719989191105},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\search.json","hash":"dd34241b3776bc9aed8ef815c67f2fa622d0984b","modified":1719989191106},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\share.json","hash":"da98300e9197fbc717082419652d54636fd118b9","modified":1719989191107},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\sidebar.json","hash":"5687b24e32bcff12ff7660ff5dc26d74f466a994","modified":1719989191108},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\common\\widgets.json","hash":"9a1e31cfd667baf366ef6734959b8770c077e63d","modified":1719989191109},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\plugin\\animejs.json","hash":"0b5c4a315c0d25f2b296eb44ed14a1d59ccb8613","modified":1719989191116},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\plugin\\back_to_top.json","hash":"c8e0e97a61c3a02c9736f303c206dd406de95d9a","modified":1719989191117},{"_id":"node_modules\\hexo-theme-icarus\\include\\schema\\widget\\profile.json","hash":"994aff115d59827ad6f98d03adf55b1cf1245378","modified":1719989191122},{"_id":"public/js/algolia.js","hash":"16a5d7ae50b43884722baa87ab77d74507dee2c2","modified":1720005366583},{"_id":"public/js/google_cse.js","hash":"ac0567af39a4edb1be580e6f11ca5899fdde9416","modified":1720005366583},{"_id":"public/js/insight.js","hash":"1f7e612a9aa34bca06b34768c22a41b29981cf6d","modified":1720005366583},{"_id":"public/js/toc.js","hash":"42057564a71e4d5d4b4091a41e16dcbfc6c7d337","modified":1720005366583},{"_id":"public/content.json","hash":"f69e61e9842f6cc6b1ee32e0baa4eb783fd4ce5b","modified":1720005366583},{"_id":"public/manifest.json","hash":"e66b69c5ab0202d749dc98771b5c66fc7efe776e","modified":1720005366583},{"_id":"public/about/index.html","hash":"b62a1435d9aa2f22446a33797a3c8159bc9aadc9","modified":1720005366583},{"_id":"public/2024/07/03/hello-world/index.html","hash":"bb96e4d09eeb7dcf158ca1f37374f57d6f155b1b","modified":1720005366583},{"_id":"public/2024/06/09/test-hexo-admin/index.html","hash":"978a0cd66c02f1d210b7cc26338ba78af933a417","modified":1720005366583},{"_id":"public/2024/06/05/hello-ollama/index.html","hash":"d52587579dda954a3a926a1aedee602563f23fa9","modified":1720005366583},{"_id":"public/2024/06/02/hello-django/index.html","hash":"9b837660914334512e98a2ab5cfb9b4f985a60b9","modified":1720005366583},{"_id":"public/2024/06/02/app-launcher/index.html","hash":"d14d063826a81435cdb7db43b2c0efb792794c74","modified":1720005366583},{"_id":"public/2024/05/30/mysql/index.html","hash":"d57843141675b13a8e6048a162f872dbfaf86a3f","modified":1720005366583},{"_id":"public/2024/05/27/hello-adb/index.html","hash":"42a6a42ef9250a09dda60ffc1ad9e075af224e69","modified":1720005366583},{"_id":"public/2024/05/22/hello-git/index.html","hash":"1bddf889df63ff92a34197c074510f9e18aa77f6","modified":1720005366583},{"_id":"public/2024/05/19/SSH-Key/index.html","hash":"1c5ca3c7c86409b25c102bfb95d518b39106ac4b","modified":1720005366583},{"_id":"public/2024/05/18/folderSync/index.html","hash":"59046d64a98b9b62530a84814e581e2777cdc6f3","modified":1720005366583},{"_id":"public/2024/05/18/git-reset/index.html","hash":"b8226c6cb48b924de5bf266d25db3222f3a370a4","modified":1720005366583},{"_id":"public/2024/05/18/hello-domain/index.html","hash":"327cd0ba32cec73c562e23285a54156253e10bfd","modified":1720005366583},{"_id":"public/2024/05/18/hello-github/index.html","hash":"db84fca581c1225b1414a0f87e8f170f090570f1","modified":1720005366583},{"_id":"public/2024/05/18/hello-hexo/index.html","hash":"db172505c5641e5d983c846501043059d0a98b26","modified":1720005366583},{"_id":"public/2024/05/18/hello-menu/index.html","hash":"c068c7d311a2db8f986e74283ad7e89b0ede3256","modified":1720005366583},{"_id":"public/2024/05/18/hello-theme/index.html","hash":"a81cccd5e9c0b9d52b8e0e80f936ea491ca2780d","modified":1720005366583},{"_id":"public/archives/index.html","hash":"5f5f94024e639c60f6bf7587eaaf87a62040f9ca","modified":1720005366583},{"_id":"public/archives/page/2/index.html","hash":"e97a9b553e120d2928e341c5457961e7f54a1589","modified":1720005366583},{"_id":"public/archives/2024/index.html","hash":"e66a76d8c1b66ecb05bca766e40d3853b0cccdd6","modified":1720005366583},{"_id":"public/archives/2024/page/2/index.html","hash":"c55e83608fe5c5ad76fb7e829354150217698b0d","modified":1720005366583},{"_id":"public/archives/2024/05/index.html","hash":"afc912797b90e5a5047187a106b3193e99aaf7fa","modified":1720005366583},{"_id":"public/archives/2024/05/page/2/index.html","hash":"494633c6dc6728000f7bdc37045e884cb74299d8","modified":1720005366583},{"_id":"public/archives/2024/06/index.html","hash":"f5c8f79ecfb356b9243d20307d61f72242942975","modified":1720005366583},{"_id":"public/archives/2024/07/index.html","hash":"c6b9a4f9f1f47769e396cfdaff30f87a9d47ec2f","modified":1720005366583},{"_id":"public/categories/file/index.html","hash":"10c9768e4efd6d4db787d999899c59c9a9510d13","modified":1720005366583},{"_id":"public/categories/git/index.html","hash":"ef890021bcb068e721596365f14a6eddaede03fe","modified":1720005366583},{"_id":"public/categories/adb/index.html","hash":"1b774e4ddfa71432b54b1c52462217a45a906525","modified":1720005366583},{"_id":"public/categories/ollama/index.html","hash":"9c2bbfa93059d9ee1954a261a2235ad6754d4bb4","modified":1720005366583},{"_id":"public/index.html","hash":"a6eea583d7fe54cb71d5a5b24f021cc9d520aae5","modified":1720005366583},{"_id":"public/page/2/index.html","hash":"1e9c28ae3c61c7c3511c94ecf0b2663f798aae31","modified":1720005366583},{"_id":"public/tags/github/index.html","hash":"9b102f2222dd6f321465fcf462881c1a90e73ff7","modified":1720005366583},{"_id":"public/tags/ssh/index.html","hash":"bbdd839b78381a8237df9049a6f679f078311868","modified":1720005366583},{"_id":"public/tags/launcher/index.html","hash":"6106919fe6483897f880780e195fa69381b87cf5","modified":1720005366583},{"_id":"public/tags/file/index.html","hash":"289916c03648fea61990bd7c6eb9dc914a870e25","modified":1720005366583},{"_id":"public/tags/git/index.html","hash":"4ab0077d6f511ddca48f172d05543538d473c625","modified":1720005366583},{"_id":"public/tags/adb/index.html","hash":"5edd6778c1dc98b79254fe77dd261a94d45337bf","modified":1720005366583},{"_id":"public/tags/django/index.html","hash":"573db956c1a0fdc49c759d03b85625d25b744e8f","modified":1720005366583},{"_id":"public/tags/hexo/index.html","hash":"66c7fe4bde53ef4e4650aea33baa1a60e36c1262","modified":1720005366583},{"_id":"public/tags/ollama/index.html","hash":"7ee0f320e396d073783ae2a245a802fc10271772","modified":1720005366583},{"_id":"public/tags/mysql/index.html","hash":"a66d6ace9ac32ce72f355f91fe324a6eaf3e556b","modified":1720005366583},{"_id":"public/categories/index.html","hash":"6b31bb68a88825609af71f4a838e45bf9097e386","modified":1720005366583},{"_id":"public/tags/index.html","hash":"c96b31a42a2a9cfb49b0ff1a197643ca7303e5d3","modified":1720005366583},{"_id":"public/CNAME","hash":"886bbb9f45124ef9765946d814581397651dc331","modified":1720005366583},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1720005366583},{"_id":"public/img/favicon.svg","hash":"50322629b1947588ff7a6e59fb07cb1b5bfb9f8c","modified":1720005366583},{"_id":"public/img/logo.svg","hash":"f4a9aa50f9a732981ae79e3711a997fc7325a7db","modified":1720005366583},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1720005366583},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1720005366583},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1720005366583},{"_id":"public/css/cyberpunk.css","hash":"b462177bee11f76e84e649f8192d5a68cb4b1402","modified":1720005366583},{"_id":"public/css/default.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1720005366583},{"_id":"public/css/style.css","hash":"8717dd0ed1fe2a4237fbfb4f4f6e566cb1ee16b7","modified":1720005366583},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1720005366583},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1720005366583},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1720005366583},{"_id":"public/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1720005366583}],"Category":[{"name":"file","_id":"cly5qse370006yoim7s0h1ttt"},{"name":"git","_id":"cly5qse3e000byoim6pv88jav"},{"name":"adb","_id":"cly5qse3k000iyoim0vof14ap"},{"name":"ollama","_id":"cly5qse3s000tyoim9bx87lrp"}],"Data":[],"Page":[{"title":"about","date":"2024-05-18T11:29:05.000Z","_content":"this is about page test！\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-05-18 19:29:05\n---\nthis is about page test！\n\n","updated":"2024-07-03T06:48:12.425Z","path":"about/index.html","comments":1,"layout":"page","_id":"cly5qse2i0000yoimdnqt51pe","content":"<p>this is about page test！</p>\n","excerpt":"","more":"<p>this is about page test！</p>\n"}],"Post":[{"title":"SSH Key","date":"2024-05-19T04:25:30.000Z","_content":"# 问题现象：\n\n```\nhexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n[master ddf123e] Site updated: 2024-05-18 18:16:33\n 2 files changed, 2 insertions(+), 2 deletions(-)\n/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line\n/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line\n/Users/oo/.ssh/config: terminating, 2 bad configuration options\n致命错误：无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\nFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n    at ChildProcess.emit (node:events:520:28)\n    at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n# 问题分析：\n\n根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。\n\n# 解决办法：\n\n检查配置文件，重新生成SSH Key。\n\n\n\n---\n\n\n\n在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：\n\n### 1. 检查现有的 SSH Key\n\n首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：\n\n```sh\nls -al ~/.ssh\n```\n\n这将列出 `~/.ssh` 目录下的文件。如果你看到 `id_rsa` 和 `id_rsa.pub` 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。\n\n### 2. 生成新的 SSH Key\n\n如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：\n\n```sh\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n替换 `your_email@example.com` 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 `~/.ssh/id_rsa`。\n\n接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。\n\n### 3. 启动 SSH 代理\n\n确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：\n\n```sh\neval \"$(ssh-agent -s)\"\n```\n\n这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：\n\n```sh\nssh-add ~/.ssh/id_rsa\n```\n\n### 4. 添加 SSH Key 到 GitHub\n\n现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：\n\n```sh\npbcopy < ~/.ssh/id_rsa.pub\n```\n\n这会将公钥复制到剪贴板。\n\n接着，打开 GitHub，登录到你的账户，按照以下步骤操作：\n\n1. 点击右上角的个人头像，然后选择 “Settings”。\n2. 在左侧菜单中，选择 “SSH and GPG keys”。\n3. 点击 “New SSH key” 按钮。\n4. 在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。\n5. 在 “Key” 字段中粘贴你复制的公钥。\n6. 点击 “Add SSH key” 按钮。\n\n### 5. 测试连接\n\n最后，测试是否正确配置了 SSH Key，使用以下命令：\n\n```sh\nssh -T git@github.com\n```\n\n如果一切配置正确，你会看到一条欢迎信息，类似：\n\n```\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这表示你已经成功通过 SSH 连接到 GitHub。\n\n### 总结\n\n以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。\n","source":"_posts/SSH-Key.md","raw":"---\ntitle: SSH Key\ndate: 2024-05-19 12:25:30\ntags: \n  - github\n  - ssh\n---\n# 问题现象：\n\n```\nhexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n[master ddf123e] Site updated: 2024-05-18 18:16:33\n 2 files changed, 2 insertions(+), 2 deletions(-)\n/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line\n/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line\n/Users/oo/.ssh/config: terminating, 2 bad configuration options\n致命错误：无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\nFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n    at ChildProcess.emit (node:events:520:28)\n    at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n# 问题分析：\n\n根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。\n\n# 解决办法：\n\n检查配置文件，重新生成SSH Key。\n\n\n\n---\n\n\n\n在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：\n\n### 1. 检查现有的 SSH Key\n\n首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：\n\n```sh\nls -al ~/.ssh\n```\n\n这将列出 `~/.ssh` 目录下的文件。如果你看到 `id_rsa` 和 `id_rsa.pub` 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。\n\n### 2. 生成新的 SSH Key\n\n如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：\n\n```sh\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n替换 `your_email@example.com` 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 `~/.ssh/id_rsa`。\n\n接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。\n\n### 3. 启动 SSH 代理\n\n确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：\n\n```sh\neval \"$(ssh-agent -s)\"\n```\n\n这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：\n\n```sh\nssh-add ~/.ssh/id_rsa\n```\n\n### 4. 添加 SSH Key 到 GitHub\n\n现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：\n\n```sh\npbcopy < ~/.ssh/id_rsa.pub\n```\n\n这会将公钥复制到剪贴板。\n\n接着，打开 GitHub，登录到你的账户，按照以下步骤操作：\n\n1. 点击右上角的个人头像，然后选择 “Settings”。\n2. 在左侧菜单中，选择 “SSH and GPG keys”。\n3. 点击 “New SSH key” 按钮。\n4. 在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。\n5. 在 “Key” 字段中粘贴你复制的公钥。\n6. 点击 “Add SSH key” 按钮。\n\n### 5. 测试连接\n\n最后，测试是否正确配置了 SSH Key，使用以下命令：\n\n```sh\nssh -T git@github.com\n```\n\n如果一切配置正确，你会看到一条欢迎信息，类似：\n\n```\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n这表示你已经成功通过 SSH 连接到 GitHub。\n\n### 总结\n\n以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。\n","slug":"SSH-Key","published":1,"updated":"2024-07-03T06:46:41.357Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse2o0001yoim3phf8lla","content":"<h1 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>[master ddf123e] Site updated: 2024-05-18 18:16:33<br> 2 files changed, 2 insertions(+), 2 deletions(-)<br>/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line<br>/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line<br>/Users/oo/.ssh/config: terminating, 2 bad configuration options<br>致命错误：无法读取远程仓库。<br><br>请确认您有正确的访问权限并且仓库存在。<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:520:28)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h1><p>根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。</p>\n<h1 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h1><p>检查配置文件，重新生成SSH Key。</p>\n<hr>\n<p>在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：</p>\n<h3 id=\"1-检查现有的-SSH-Key\"><a href=\"#1-检查现有的-SSH-Key\" class=\"headerlink\" title=\"1. 检查现有的 SSH Key\"></a>1. 检查现有的 SSH Key</h3><p>首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure>\n\n<p>这将列出 <code>~/.ssh</code> 目录下的文件。如果你看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。</p>\n<h3 id=\"2-生成新的-SSH-Key\"><a href=\"#2-生成新的-SSH-Key\" class=\"headerlink\" title=\"2. 生成新的 SSH Key\"></a>2. 生成新的 SSH Key</h3><p>如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>替换 <code>your_email@example.com</code> 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 <code>~/.ssh/id_rsa</code>。</p>\n<p>接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。</p>\n<h3 id=\"3-启动-SSH-代理\"><a href=\"#3-启动-SSH-代理\" class=\"headerlink\" title=\"3. 启动 SSH 代理\"></a>3. 启动 SSH 代理</h3><p>确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-添加-SSH-Key-到-GitHub\"><a href=\"#4-添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"4. 添加 SSH Key 到 GitHub\"></a>4. 添加 SSH Key 到 GitHub</h3><p>现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pbcopy &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p>这会将公钥复制到剪贴板。</p>\n<p>接着，打开 GitHub，登录到你的账户，按照以下步骤操作：</p>\n<ol>\n<li>点击右上角的个人头像，然后选择 “Settings”。</li>\n<li>在左侧菜单中，选择 “SSH and GPG keys”。</li>\n<li>点击 “New SSH key” 按钮。</li>\n<li>在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。</li>\n<li>在 “Key” 字段中粘贴你复制的公钥。</li>\n<li>点击 “Add SSH key” 按钮。</li>\n</ol>\n<h3 id=\"5-测试连接\"><a href=\"#5-测试连接\" class=\"headerlink\" title=\"5. 测试连接\"></a>5. 测试连接</h3><p>最后，测试是否正确配置了 SSH Key，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>如果一切配置正确，你会看到一条欢迎信息，类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n\n<p>这表示你已经成功通过 SSH 连接到 GitHub。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。</p>\n","excerpt":"","more":"<h1 id=\"问题现象：\"><a href=\"#问题现象：\" class=\"headerlink\" title=\"问题现象：\"></a>问题现象：</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>[master ddf123e] Site updated: 2024-05-18 18:16:33<br> 2 files changed, 2 insertions(+), 2 deletions(-)<br>/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line<br>/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line<br>/Users/oo/.ssh/config: terminating, 2 bad configuration options<br>致命错误：无法读取远程仓库。<br><br>请确认您有正确的访问权限并且仓库存在。<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:520:28)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h1><p>根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。</p>\n<h1 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h1><p>检查配置文件，重新生成SSH Key。</p>\n<hr>\n<p>在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作：</p>\n<h3 id=\"1-检查现有的-SSH-Key\"><a href=\"#1-检查现有的-SSH-Key\" class=\"headerlink\" title=\"1. 检查现有的 SSH Key\"></a>1. 检查现有的 SSH Key</h3><p>首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure>\n\n<p>这将列出 <code>~/.ssh</code> 目录下的文件。如果你看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。</p>\n<h3 id=\"2-生成新的-SSH-Key\"><a href=\"#2-生成新的-SSH-Key\" class=\"headerlink\" title=\"2. 生成新的 SSH Key\"></a>2. 生成新的 SSH Key</h3><p>如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>替换 <code>your_email@example.com</code> 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 <code>~/.ssh/id_rsa</code>。</p>\n<p>接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。</p>\n<h3 id=\"3-启动-SSH-代理\"><a href=\"#3-启动-SSH-代理\" class=\"headerlink\" title=\"3. 启动 SSH 代理\"></a>3. 启动 SSH 代理</h3><p>确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-添加-SSH-Key-到-GitHub\"><a href=\"#4-添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"4. 添加 SSH Key 到 GitHub\"></a>4. 添加 SSH Key 到 GitHub</h3><p>现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pbcopy &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p>这会将公钥复制到剪贴板。</p>\n<p>接着，打开 GitHub，登录到你的账户，按照以下步骤操作：</p>\n<ol>\n<li>点击右上角的个人头像，然后选择 “Settings”。</li>\n<li>在左侧菜单中，选择 “SSH and GPG keys”。</li>\n<li>点击 “New SSH key” 按钮。</li>\n<li>在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。</li>\n<li>在 “Key” 字段中粘贴你复制的公钥。</li>\n<li>点击 “Add SSH key” 按钮。</li>\n</ol>\n<h3 id=\"5-测试连接\"><a href=\"#5-测试连接\" class=\"headerlink\" title=\"5. 测试连接\"></a>5. 测试连接</h3><p>最后，测试是否正确配置了 SSH Key，使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh -T git@github.com<br></code></pre></td></tr></table></figure>\n\n<p>如果一切配置正确，你会看到一条欢迎信息，类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure>\n\n<p>这表示你已经成功通过 SSH 连接到 GitHub。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。</p>\n"},{"title":"app-launcher","date":"2024-06-02T02:33:24.000Z","_content":"通过 adb shell 命令直接设置默认启动器\n\n## 确认设备连接\n`adb devices`\n\n## 列出所有已安装的包名\n`adb shell pm list packages`\n\n## 查找应用主活动\n`adb shell dumpsys package 应用包名 | grep -A 100 'Activity'\nadb shell dumpsys package com.rokid.glass.dxeducation | grep -A 100 'Activity'`\n\n## 设置launcher\n`adb shell cmd package set-home-activity  应用包名/.activity.主活动\nadb shell cmd package set-home-activity  com.rokid.glass.dxeducation/.activity.UserGuideActivity`","source":"_posts/app-launcher.md","raw":"---\ntitle: app-launcher\ndate: 2024-06-02 10:33:24\ntags: launcher\n---\n通过 adb shell 命令直接设置默认启动器\n\n## 确认设备连接\n`adb devices`\n\n## 列出所有已安装的包名\n`adb shell pm list packages`\n\n## 查找应用主活动\n`adb shell dumpsys package 应用包名 | grep -A 100 'Activity'\nadb shell dumpsys package com.rokid.glass.dxeducation | grep -A 100 'Activity'`\n\n## 设置launcher\n`adb shell cmd package set-home-activity  应用包名/.activity.主活动\nadb shell cmd package set-home-activity  com.rokid.glass.dxeducation/.activity.UserGuideActivity`","slug":"app-launcher","published":1,"updated":"2024-07-03T06:46:41.358Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse2v0002yoim0g2hg8xz","content":"<p>通过 adb shell 命令直接设置默认启动器</p>\n<h2 id=\"确认设备连接\"><a href=\"#确认设备连接\" class=\"headerlink\" title=\"确认设备连接\"></a>确认设备连接</h2><p><code>adb devices</code></p>\n<h2 id=\"列出所有已安装的包名\"><a href=\"#列出所有已安装的包名\" class=\"headerlink\" title=\"列出所有已安装的包名\"></a>列出所有已安装的包名</h2><p><code>adb shell pm list packages</code></p>\n<h2 id=\"查找应用主活动\"><a href=\"#查找应用主活动\" class=\"headerlink\" title=\"查找应用主活动\"></a>查找应用主活动</h2><p><code>adb shell dumpsys package 应用包名 | grep -A 100 &#39;Activity&#39; adb shell dumpsys package com.rokid.glass.dxeducation | grep -A 100 &#39;Activity&#39;</code></p>\n<h2 id=\"设置launcher\"><a href=\"#设置launcher\" class=\"headerlink\" title=\"设置launcher\"></a>设置launcher</h2><p><code>adb shell cmd package set-home-activity  应用包名/.activity.主活动 adb shell cmd package set-home-activity  com.rokid.glass.dxeducation/.activity.UserGuideActivity</code></p>\n","excerpt":"","more":"<p>通过 adb shell 命令直接设置默认启动器</p>\n<h2 id=\"确认设备连接\"><a href=\"#确认设备连接\" class=\"headerlink\" title=\"确认设备连接\"></a>确认设备连接</h2><p><code>adb devices</code></p>\n<h2 id=\"列出所有已安装的包名\"><a href=\"#列出所有已安装的包名\" class=\"headerlink\" title=\"列出所有已安装的包名\"></a>列出所有已安装的包名</h2><p><code>adb shell pm list packages</code></p>\n<h2 id=\"查找应用主活动\"><a href=\"#查找应用主活动\" class=\"headerlink\" title=\"查找应用主活动\"></a>查找应用主活动</h2><p><code>adb shell dumpsys package 应用包名 | grep -A 100 &#39;Activity&#39; adb shell dumpsys package com.rokid.glass.dxeducation | grep -A 100 &#39;Activity&#39;</code></p>\n<h2 id=\"设置launcher\"><a href=\"#设置launcher\" class=\"headerlink\" title=\"设置launcher\"></a>设置launcher</h2><p><code>adb shell cmd package set-home-activity  应用包名/.activity.主活动 adb shell cmd package set-home-activity  com.rokid.glass.dxeducation/.activity.UserGuideActivity</code></p>\n"},{"title":"folderSync","date":"2024-05-18T11:41:52.000Z","_content":"**使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步**，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：\n<!-- more -->\n## 在 macOS 上设置 SFTP 服务器\n\n- 在 Mac 上，选取苹果菜单 >「系统偏好设置」，点按「共享」，然后选择「远程登录」。\n- 选择「远程登录」复选框。\n- 选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。\n\n注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh oo@10.90.0.199”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。\n\n## 在 Android 设备上配置 FolderSync\n\n### 1.下载并安装 FolderSync：\n- 从 Google Play 商店下载并安装 FolderSync 应用。\n### 2.配置 SFTP 账户：\n- 打开 FolderSync 应用。\n- 进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。\n- 在“账户类型”中选择“SFTP”。\n### 3.填写 SFTP 账户详细信息：\n- 主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199\n- 用户名： 输入你在 macOS 上的用户名。我的就是oo\n- 密码： 输入你在 macOS 上的用户密码。 \n- 远程路径： 输入你希望同步的 macOS 文件夹路径（例如 /Users/yourusername/Documents）。\n- 端口： 默认端口为 22，不需要更改。\n### 4.测试连接：\n- 填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。\n### 5.创建同步任务：\n- 转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。\n- 选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。\n- 选择本地文件夹，你可以选择 Android 设备上的任何文件夹。\n- 配置同步选项，例如同步方向（单向或双向）、同步频率等。\n## 注意事项\n- 确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。\n- 确保 macOS 上的防火墙允许 SSH 服务通过。\n- 根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。\n","source":"_posts/folderSync.md","raw":"---\ntitle: folderSync\ndate: 2024-05-18 19:41:52\ntags: file\ncategories: file\n---\n**使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步**，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：\n<!-- more -->\n## 在 macOS 上设置 SFTP 服务器\n\n- 在 Mac 上，选取苹果菜单 >「系统偏好设置」，点按「共享」，然后选择「远程登录」。\n- 选择「远程登录」复选框。\n- 选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。\n\n注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh oo@10.90.0.199”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。\n\n## 在 Android 设备上配置 FolderSync\n\n### 1.下载并安装 FolderSync：\n- 从 Google Play 商店下载并安装 FolderSync 应用。\n### 2.配置 SFTP 账户：\n- 打开 FolderSync 应用。\n- 进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。\n- 在“账户类型”中选择“SFTP”。\n### 3.填写 SFTP 账户详细信息：\n- 主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199\n- 用户名： 输入你在 macOS 上的用户名。我的就是oo\n- 密码： 输入你在 macOS 上的用户密码。 \n- 远程路径： 输入你希望同步的 macOS 文件夹路径（例如 /Users/yourusername/Documents）。\n- 端口： 默认端口为 22，不需要更改。\n### 4.测试连接：\n- 填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。\n### 5.创建同步任务：\n- 转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。\n- 选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。\n- 选择本地文件夹，你可以选择 Android 设备上的任何文件夹。\n- 配置同步选项，例如同步方向（单向或双向）、同步频率等。\n## 注意事项\n- 确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。\n- 确保 macOS 上的防火墙允许 SSH 服务通过。\n- 根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。\n","slug":"folderSync","published":1,"updated":"2024-07-03T06:46:41.360Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse320004yoimbwo38l5d","content":"<p><strong>使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步</strong>，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：</p>\n<span id=\"more\"></span>\n<h2 id=\"在-macOS-上设置-SFTP-服务器\"><a href=\"#在-macOS-上设置-SFTP-服务器\" class=\"headerlink\" title=\"在 macOS 上设置 SFTP 服务器\"></a>在 macOS 上设置 SFTP 服务器</h2><ul>\n<li>在 Mac 上，选取苹果菜单 &gt;「系统偏好设置」，点按「共享」，然后选择「远程登录」。</li>\n<li>选择「远程登录」复选框。</li>\n<li>选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。</li>\n</ul>\n<p>注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh <a href=\"mailto:&#111;&#x6f;&#64;&#x31;&#48;&#x2e;&#x39;&#x30;&#x2e;&#48;&#46;&#x31;&#57;&#x39;\">&#111;&#x6f;&#64;&#x31;&#48;&#x2e;&#x39;&#x30;&#x2e;&#48;&#46;&#x31;&#57;&#x39;</a>”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。</p>\n<h2 id=\"在-Android-设备上配置-FolderSync\"><a href=\"#在-Android-设备上配置-FolderSync\" class=\"headerlink\" title=\"在 Android 设备上配置 FolderSync\"></a>在 Android 设备上配置 FolderSync</h2><h3 id=\"1-下载并安装-FolderSync：\"><a href=\"#1-下载并安装-FolderSync：\" class=\"headerlink\" title=\"1.下载并安装 FolderSync：\"></a>1.下载并安装 FolderSync：</h3><ul>\n<li>从 Google Play 商店下载并安装 FolderSync 应用。</li>\n</ul>\n<h3 id=\"2-配置-SFTP-账户：\"><a href=\"#2-配置-SFTP-账户：\" class=\"headerlink\" title=\"2.配置 SFTP 账户：\"></a>2.配置 SFTP 账户：</h3><ul>\n<li>打开 FolderSync 应用。</li>\n<li>进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。</li>\n<li>在“账户类型”中选择“SFTP”。</li>\n</ul>\n<h3 id=\"3-填写-SFTP-账户详细信息：\"><a href=\"#3-填写-SFTP-账户详细信息：\" class=\"headerlink\" title=\"3.填写 SFTP 账户详细信息：\"></a>3.填写 SFTP 账户详细信息：</h3><ul>\n<li>主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199</li>\n<li>用户名： 输入你在 macOS 上的用户名。我的就是oo</li>\n<li>密码： 输入你在 macOS 上的用户密码。 </li>\n<li>远程路径： 输入你希望同步的 macOS 文件夹路径（例如 &#x2F;Users&#x2F;yourusername&#x2F;Documents）。</li>\n<li>端口： 默认端口为 22，不需要更改。</li>\n</ul>\n<h3 id=\"4-测试连接：\"><a href=\"#4-测试连接：\" class=\"headerlink\" title=\"4.测试连接：\"></a>4.测试连接：</h3><ul>\n<li>填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。</li>\n</ul>\n<h3 id=\"5-创建同步任务：\"><a href=\"#5-创建同步任务：\" class=\"headerlink\" title=\"5.创建同步任务：\"></a>5.创建同步任务：</h3><ul>\n<li>转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。</li>\n<li>选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。</li>\n<li>选择本地文件夹，你可以选择 Android 设备上的任何文件夹。</li>\n<li>配置同步选项，例如同步方向（单向或双向）、同步频率等。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。</li>\n<li>确保 macOS 上的防火墙允许 SSH 服务通过。</li>\n<li>根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。</li>\n</ul>\n","excerpt":"<p><strong>使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步</strong>，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤：</p>","more":"<h2 id=\"在-macOS-上设置-SFTP-服务器\"><a href=\"#在-macOS-上设置-SFTP-服务器\" class=\"headerlink\" title=\"在 macOS 上设置 SFTP 服务器\"></a>在 macOS 上设置 SFTP 服务器</h2><ul>\n<li>在 Mac 上，选取苹果菜单 &gt;「系统偏好设置」，点按「共享」，然后选择「远程登录」。</li>\n<li>选择「远程登录」复选框。</li>\n<li>选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。</li>\n</ul>\n<p>注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh <a href=\"mailto:&#111;&#x6f;&#64;&#x31;&#48;&#x2e;&#x39;&#x30;&#x2e;&#48;&#46;&#x31;&#57;&#x39;\">&#111;&#x6f;&#64;&#x31;&#48;&#x2e;&#x39;&#x30;&#x2e;&#48;&#46;&#x31;&#57;&#x39;</a>”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。</p>\n<h2 id=\"在-Android-设备上配置-FolderSync\"><a href=\"#在-Android-设备上配置-FolderSync\" class=\"headerlink\" title=\"在 Android 设备上配置 FolderSync\"></a>在 Android 设备上配置 FolderSync</h2><h3 id=\"1-下载并安装-FolderSync：\"><a href=\"#1-下载并安装-FolderSync：\" class=\"headerlink\" title=\"1.下载并安装 FolderSync：\"></a>1.下载并安装 FolderSync：</h3><ul>\n<li>从 Google Play 商店下载并安装 FolderSync 应用。</li>\n</ul>\n<h3 id=\"2-配置-SFTP-账户：\"><a href=\"#2-配置-SFTP-账户：\" class=\"headerlink\" title=\"2.配置 SFTP 账户：\"></a>2.配置 SFTP 账户：</h3><ul>\n<li>打开 FolderSync 应用。</li>\n<li>进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。</li>\n<li>在“账户类型”中选择“SFTP”。</li>\n</ul>\n<h3 id=\"3-填写-SFTP-账户详细信息：\"><a href=\"#3-填写-SFTP-账户详细信息：\" class=\"headerlink\" title=\"3.填写 SFTP 账户详细信息：\"></a>3.填写 SFTP 账户详细信息：</h3><ul>\n<li>主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199</li>\n<li>用户名： 输入你在 macOS 上的用户名。我的就是oo</li>\n<li>密码： 输入你在 macOS 上的用户密码。 </li>\n<li>远程路径： 输入你希望同步的 macOS 文件夹路径（例如 &#x2F;Users&#x2F;yourusername&#x2F;Documents）。</li>\n<li>端口： 默认端口为 22，不需要更改。</li>\n</ul>\n<h3 id=\"4-测试连接：\"><a href=\"#4-测试连接：\" class=\"headerlink\" title=\"4.测试连接：\"></a>4.测试连接：</h3><ul>\n<li>填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。</li>\n</ul>\n<h3 id=\"5-创建同步任务：\"><a href=\"#5-创建同步任务：\" class=\"headerlink\" title=\"5.创建同步任务：\"></a>5.创建同步任务：</h3><ul>\n<li>转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。</li>\n<li>选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。</li>\n<li>选择本地文件夹，你可以选择 Android 设备上的任何文件夹。</li>\n<li>配置同步选项，例如同步方向（单向或双向）、同步频率等。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。</li>\n<li>确保 macOS 上的防火墙允许 SSH 服务通过。</li>\n<li>根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。</li>\n</ul>"},{"title":"git reset","date":"2024-05-18T11:41:00.000Z","_content":"要将代码回退到之前的某一次提交，你可以使用 **git reset** 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：\n<!-- more -->\n## 1.**确定要回退到的提交哈希值**: 使用 **git log** 查看提交历史，找到你想要回退到的提交的哈希值\n```\ngit log\n```\n## 2.**执行回退操作:** 使用 **git reset --hard <commit-hash>** 将 HEAD 指针重置到你选择的提交\n```\ngit reset --hard <commit-hash>\n```\n这将会重置你的工作目录和暂存区，使其与指定提交一致。\n## 3.**如果需要，强制推送到远程仓库**: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 **-f** 或 **--force** 选项来强制推送。\n\n```\ngit push origin <branch-name> --force\n```\n请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。\n通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。\n","source":"_posts/git-reset.md","raw":"---\ntitle: git reset\ndate: 2024-05-18 19:41:00\ntags: git\ncategories: git\n---\n要将代码回退到之前的某一次提交，你可以使用 **git reset** 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：\n<!-- more -->\n## 1.**确定要回退到的提交哈希值**: 使用 **git log** 查看提交历史，找到你想要回退到的提交的哈希值\n```\ngit log\n```\n## 2.**执行回退操作:** 使用 **git reset --hard <commit-hash>** 将 HEAD 指针重置到你选择的提交\n```\ngit reset --hard <commit-hash>\n```\n这将会重置你的工作目录和暂存区，使其与指定提交一致。\n## 3.**如果需要，强制推送到远程仓库**: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 **-f** 或 **--force** 选项来强制推送。\n\n```\ngit push origin <branch-name> --force\n```\n请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。\n通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。\n","slug":"git-reset","published":1,"updated":"2024-07-03T06:46:41.362Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse340005yoimaafjhui3","content":"<p>要将代码回退到之前的某一次提交，你可以使用 <strong>git reset</strong> 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：</p>\n<span id=\"more\"></span>\n<h2 id=\"1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\"><a href=\"#1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\" class=\"headerlink\" title=\"1.确定要回退到的提交哈希值: 使用 git log 查看提交历史，找到你想要回退到的提交的哈希值\"></a>1.<strong>确定要回退到的提交哈希值</strong>: 使用 <strong>git log</strong> 查看提交历史，找到你想要回退到的提交的哈希值</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git log<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\"><a href=\"#2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\" class=\"headerlink\" title=\"2.执行回退操作: 使用 git reset –hard  将 HEAD 指针重置到你选择的提交\"></a>2.<strong>执行回退操作:</strong> 使用 <strong>git reset –hard <commit-hash></strong> 将 HEAD 指针重置到你选择的提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></figure>\n<p>这将会重置你的工作目录和暂存区，使其与指定提交一致。</p>\n<h2 id=\"3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\"><a href=\"#3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\" class=\"headerlink\" title=\"3.如果需要，强制推送到远程仓库: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 -f 或 –force 选项来强制推送。\"></a>3.<strong>如果需要，强制推送到远程仓库</strong>: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 <strong>-f</strong> 或 <strong>–force</strong> 选项来强制推送。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git push origin &lt;branch-name&gt; --force<br></code></pre></td></tr></table></figure>\n<p>请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。<br>通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。</p>\n","excerpt":"<p>要将代码回退到之前的某一次提交，你可以使用 <strong>git reset</strong> 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤：</p>","more":"<h2 id=\"1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\"><a href=\"#1-确定要回退到的提交哈希值-使用-git-log-查看提交历史，找到你想要回退到的提交的哈希值\" class=\"headerlink\" title=\"1.确定要回退到的提交哈希值: 使用 git log 查看提交历史，找到你想要回退到的提交的哈希值\"></a>1.<strong>确定要回退到的提交哈希值</strong>: 使用 <strong>git log</strong> 查看提交历史，找到你想要回退到的提交的哈希值</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git log<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\"><a href=\"#2-执行回退操作-使用-git-reset-–hard-将-HEAD-指针重置到你选择的提交\" class=\"headerlink\" title=\"2.执行回退操作: 使用 git reset –hard  将 HEAD 指针重置到你选择的提交\"></a>2.<strong>执行回退操作:</strong> 使用 <strong>git reset –hard <commit-hash></strong> 将 HEAD 指针重置到你选择的提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></figure>\n<p>这将会重置你的工作目录和暂存区，使其与指定提交一致。</p>\n<h2 id=\"3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\"><a href=\"#3-如果需要，强制推送到远程仓库-如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用-f-或-–force-选项来强制推送。\" class=\"headerlink\" title=\"3.如果需要，强制推送到远程仓库: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 -f 或 –force 选项来强制推送。\"></a>3.<strong>如果需要，强制推送到远程仓库</strong>: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 <strong>-f</strong> 或 <strong>–force</strong> 选项来强制推送。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git push origin &lt;branch-name&gt; --force<br></code></pre></td></tr></table></figure>\n<p>请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。<br>通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。</p>"},{"title":"hello adb","date":"2024-05-27T09:30:48.000Z","_content":"由于在干活过程中需要经常使用adb，所以抽空把adb常用的一些命令总结一下：\n\nADB（Android Debug Bridge）是一种功能强大的工具，可以用来管理和控制Android设备。以下是一些常用的ADB命令及其简要说明：\n\n### 基本命令\n\n1. **连接设备**\n   ```sh\n   adb devices\n   ```\n   列出所有连接的Android设备的序列号。\n\n2. **启动ADB服务器**\n   ```sh\n   adb start-server\n   ```\n   启动ADB后台服务。\n\n3. **停止ADB服务器**\n   ```sh\n   adb kill-server\n   ```\n   停止ADB后台服务。\n\n### 文件操作\n\n1. **推送文件到设备**\n   ```sh\n   adb push <本地文件路径> <设备目标路径>\n   ```\n   将文件从计算机推送到设备，例如：\n   ```sh\n   adb push example.txt /sdcard/Download/\n   ```\n\n2. **从设备拉取文件**\n   ```sh\n   adb pull <设备文件路径> <本地目标路径>\n   ```\n   从设备拉取文件到计算机，例如：\n   ```sh\n   adb pull /sdcard/Download/example.txt ./\n   ```\n\n### 应用管理\n\n1. **安装应用**\n   ```sh\n   adb install <apk文件路径>\n   ```\n   安装APK文件到设备，例如：\n   ```sh\n   adb install example.apk\n   ```\n\n2. **卸载应用**\n   ```sh\n   adb uninstall <应用包名>\n   ```\n   卸载设备上的应用，例如：\n   ```sh\n   adb uninstall com.example.app\n   ```\n\n3. **列出已安装的应用**\n   ```sh\n   adb shell pm list packages\n   ```\n   列出设备上已安装的所有应用包名。\n\n### 设备控制\n\n1. **重启设备**\n   ```sh\n   adb reboot\n   ```\n   重启Android设备。\n\n2. **重启到引导加载程序**\n   ```sh\n   adb reboot bootloader\n   ```\n   重启设备到引导加载程序模式。\n\n3. **进入恢复模式**\n   ```sh\n   adb reboot recovery\n   ```\n   重启设备到恢复模式。\n\n### 调试与日志\n\n1. **启动Shell**\n   ```sh\n   adb shell\n   ```\n   启动设备上的命令行shell。\n\n2. **查看日志**\n   ```sh\n   adb logcat\n   ```\n   查看设备的系统日志。\n\n### 其他\n\n1. **获取设备信息**\n   ```sh\n   adb shell getprop\n   ```\n   获取设备的属性信息。\n\n2. **获取设备屏幕截图**\n   ```sh\n   adb shell screencap /sdcard/screenshot.png\n   adb pull /sdcard/screenshot.png\n   ```\n   获取设备的屏幕截图并拉取到本地。\n\n3. **录制屏幕**\n   ```sh\n   adb shell screenrecord /sdcard/demo.mp4\n   adb pull /sdcard/demo.mp4\n   ```\n   录制设备的屏幕并拉取到本地。\n","source":"_posts/hello-adb.md","raw":"---\ntitle: hello adb\ndate: 2024-05-27 17:30:48\ntags: adb\ncategories: adb\n---\n由于在干活过程中需要经常使用adb，所以抽空把adb常用的一些命令总结一下：\n\nADB（Android Debug Bridge）是一种功能强大的工具，可以用来管理和控制Android设备。以下是一些常用的ADB命令及其简要说明：\n\n### 基本命令\n\n1. **连接设备**\n   ```sh\n   adb devices\n   ```\n   列出所有连接的Android设备的序列号。\n\n2. **启动ADB服务器**\n   ```sh\n   adb start-server\n   ```\n   启动ADB后台服务。\n\n3. **停止ADB服务器**\n   ```sh\n   adb kill-server\n   ```\n   停止ADB后台服务。\n\n### 文件操作\n\n1. **推送文件到设备**\n   ```sh\n   adb push <本地文件路径> <设备目标路径>\n   ```\n   将文件从计算机推送到设备，例如：\n   ```sh\n   adb push example.txt /sdcard/Download/\n   ```\n\n2. **从设备拉取文件**\n   ```sh\n   adb pull <设备文件路径> <本地目标路径>\n   ```\n   从设备拉取文件到计算机，例如：\n   ```sh\n   adb pull /sdcard/Download/example.txt ./\n   ```\n\n### 应用管理\n\n1. **安装应用**\n   ```sh\n   adb install <apk文件路径>\n   ```\n   安装APK文件到设备，例如：\n   ```sh\n   adb install example.apk\n   ```\n\n2. **卸载应用**\n   ```sh\n   adb uninstall <应用包名>\n   ```\n   卸载设备上的应用，例如：\n   ```sh\n   adb uninstall com.example.app\n   ```\n\n3. **列出已安装的应用**\n   ```sh\n   adb shell pm list packages\n   ```\n   列出设备上已安装的所有应用包名。\n\n### 设备控制\n\n1. **重启设备**\n   ```sh\n   adb reboot\n   ```\n   重启Android设备。\n\n2. **重启到引导加载程序**\n   ```sh\n   adb reboot bootloader\n   ```\n   重启设备到引导加载程序模式。\n\n3. **进入恢复模式**\n   ```sh\n   adb reboot recovery\n   ```\n   重启设备到恢复模式。\n\n### 调试与日志\n\n1. **启动Shell**\n   ```sh\n   adb shell\n   ```\n   启动设备上的命令行shell。\n\n2. **查看日志**\n   ```sh\n   adb logcat\n   ```\n   查看设备的系统日志。\n\n### 其他\n\n1. **获取设备信息**\n   ```sh\n   adb shell getprop\n   ```\n   获取设备的属性信息。\n\n2. **获取设备屏幕截图**\n   ```sh\n   adb shell screencap /sdcard/screenshot.png\n   adb pull /sdcard/screenshot.png\n   ```\n   获取设备的屏幕截图并拉取到本地。\n\n3. **录制屏幕**\n   ```sh\n   adb shell screenrecord /sdcard/demo.mp4\n   adb pull /sdcard/demo.mp4\n   ```\n   录制设备的屏幕并拉取到本地。\n","slug":"hello-adb","published":1,"updated":"2024-07-03T06:46:41.363Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse380007yoimhod65bw5","content":"<p>由于在干活过程中需要经常使用adb，所以抽空把adb常用的一些命令总结一下：</p>\n<p>ADB（Android Debug Bridge）是一种功能强大的工具，可以用来管理和控制Android设备。以下是一些常用的ADB命令及其简要说明：</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ol>\n<li><p><strong>连接设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb devices<br></code></pre></td></tr></table></figure>\n<p>列出所有连接的Android设备的序列号。</p>\n</li>\n<li><p><strong>启动ADB服务器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb start-server<br></code></pre></td></tr></table></figure>\n<p>启动ADB后台服务。</p>\n</li>\n<li><p><strong>停止ADB服务器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb kill-server<br></code></pre></td></tr></table></figure>\n<p>停止ADB后台服务。</p>\n</li>\n</ol>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><ol>\n<li><p><strong>推送文件到设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb push &lt;本地文件路径&gt; &lt;设备目标路径&gt;<br></code></pre></td></tr></table></figure>\n<p>将文件从计算机推送到设备，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb push example.txt /sdcard/Download/<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从设备拉取文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb pull &lt;设备文件路径&gt; &lt;本地目标路径&gt;<br></code></pre></td></tr></table></figure>\n<p>从设备拉取文件到计算机，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb pull /sdcard/Download/example.txt ./<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h3><ol>\n<li><p><strong>安装应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb install &lt;apk文件路径&gt;<br></code></pre></td></tr></table></figure>\n<p>安装APK文件到设备，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb install example.apk<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>卸载应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb uninstall &lt;应用包名&gt;<br></code></pre></td></tr></table></figure>\n<p>卸载设备上的应用，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb uninstall com.example.app<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出已安装的应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell pm list packages<br></code></pre></td></tr></table></figure>\n<p>列出设备上已安装的所有应用包名。</p>\n</li>\n</ol>\n<h3 id=\"设备控制\"><a href=\"#设备控制\" class=\"headerlink\" title=\"设备控制\"></a>设备控制</h3><ol>\n<li><p><strong>重启设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot<br></code></pre></td></tr></table></figure>\n<p>重启Android设备。</p>\n</li>\n<li><p><strong>重启到引导加载程序</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot bootloader<br></code></pre></td></tr></table></figure>\n<p>重启设备到引导加载程序模式。</p>\n</li>\n<li><p><strong>进入恢复模式</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot recovery<br></code></pre></td></tr></table></figure>\n<p>重启设备到恢复模式。</p>\n</li>\n</ol>\n<h3 id=\"调试与日志\"><a href=\"#调试与日志\" class=\"headerlink\" title=\"调试与日志\"></a>调试与日志</h3><ol>\n<li><p><strong>启动Shell</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell<br></code></pre></td></tr></table></figure>\n<p>启动设备上的命令行shell。</p>\n</li>\n<li><p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb logcat<br></code></pre></td></tr></table></figure>\n<p>查看设备的系统日志。</p>\n</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p><strong>获取设备信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell getprop<br></code></pre></td></tr></table></figure>\n<p>获取设备的属性信息。</p>\n</li>\n<li><p><strong>获取设备屏幕截图</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell screencap /sdcard/screenshot.png<br>adb pull /sdcard/screenshot.png<br></code></pre></td></tr></table></figure>\n<p>获取设备的屏幕截图并拉取到本地。</p>\n</li>\n<li><p><strong>录制屏幕</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell screenrecord /sdcard/demo.mp4<br>adb pull /sdcard/demo.mp4<br></code></pre></td></tr></table></figure>\n<p>录制设备的屏幕并拉取到本地。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>由于在干活过程中需要经常使用adb，所以抽空把adb常用的一些命令总结一下：</p>\n<p>ADB（Android Debug Bridge）是一种功能强大的工具，可以用来管理和控制Android设备。以下是一些常用的ADB命令及其简要说明：</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ol>\n<li><p><strong>连接设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb devices<br></code></pre></td></tr></table></figure>\n<p>列出所有连接的Android设备的序列号。</p>\n</li>\n<li><p><strong>启动ADB服务器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb start-server<br></code></pre></td></tr></table></figure>\n<p>启动ADB后台服务。</p>\n</li>\n<li><p><strong>停止ADB服务器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb kill-server<br></code></pre></td></tr></table></figure>\n<p>停止ADB后台服务。</p>\n</li>\n</ol>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><ol>\n<li><p><strong>推送文件到设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb push &lt;本地文件路径&gt; &lt;设备目标路径&gt;<br></code></pre></td></tr></table></figure>\n<p>将文件从计算机推送到设备，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb push example.txt /sdcard/Download/<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从设备拉取文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb pull &lt;设备文件路径&gt; &lt;本地目标路径&gt;<br></code></pre></td></tr></table></figure>\n<p>从设备拉取文件到计算机，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb pull /sdcard/Download/example.txt ./<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h3><ol>\n<li><p><strong>安装应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb install &lt;apk文件路径&gt;<br></code></pre></td></tr></table></figure>\n<p>安装APK文件到设备，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb install example.apk<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>卸载应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb uninstall &lt;应用包名&gt;<br></code></pre></td></tr></table></figure>\n<p>卸载设备上的应用，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb uninstall com.example.app<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>列出已安装的应用</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell pm list packages<br></code></pre></td></tr></table></figure>\n<p>列出设备上已安装的所有应用包名。</p>\n</li>\n</ol>\n<h3 id=\"设备控制\"><a href=\"#设备控制\" class=\"headerlink\" title=\"设备控制\"></a>设备控制</h3><ol>\n<li><p><strong>重启设备</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot<br></code></pre></td></tr></table></figure>\n<p>重启Android设备。</p>\n</li>\n<li><p><strong>重启到引导加载程序</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot bootloader<br></code></pre></td></tr></table></figure>\n<p>重启设备到引导加载程序模式。</p>\n</li>\n<li><p><strong>进入恢复模式</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb reboot recovery<br></code></pre></td></tr></table></figure>\n<p>重启设备到恢复模式。</p>\n</li>\n</ol>\n<h3 id=\"调试与日志\"><a href=\"#调试与日志\" class=\"headerlink\" title=\"调试与日志\"></a>调试与日志</h3><ol>\n<li><p><strong>启动Shell</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell<br></code></pre></td></tr></table></figure>\n<p>启动设备上的命令行shell。</p>\n</li>\n<li><p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb logcat<br></code></pre></td></tr></table></figure>\n<p>查看设备的系统日志。</p>\n</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p><strong>获取设备信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell getprop<br></code></pre></td></tr></table></figure>\n<p>获取设备的属性信息。</p>\n</li>\n<li><p><strong>获取设备屏幕截图</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell screencap /sdcard/screenshot.png<br>adb pull /sdcard/screenshot.png<br></code></pre></td></tr></table></figure>\n<p>获取设备的屏幕截图并拉取到本地。</p>\n</li>\n<li><p><strong>录制屏幕</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">adb shell screenrecord /sdcard/demo.mp4<br>adb pull /sdcard/demo.mp4<br></code></pre></td></tr></table></figure>\n<p>录制设备的屏幕并拉取到本地。</p>\n</li>\n</ol>\n"},{"title":"hello django","date":"2024-06-02T13:44:12.000Z","_content":"## 问题描述\nfrom django.conf.urls import url # 用 url 需要引入\nImportError: cannot import name 'url' from 'django.conf.urls' (/Users/oo/PycharmProjects/djangolearn001/.venv/lib/python3.9/site-packages/django/conf/urls/__init__.py)\n\n## 问题原因\n这是因为在Django 4.0及更高版本中，django.conf.urls.url已被移除。取而代之的是使用django.urls.path和django.urls.re_path。\n\n## 问题解决\n\n将原来的url()调用替换为path()或re_path()\n\n```\nfrom django.urls import path, re_path\nfrom . import viewsurlpatterns = [\npath('example/', views.example_view, name='example'),\nre_path(r'^example-regex/$', views.example_view, name='example-regex'),\n]\n```\n","source":"_posts/hello-django.md","raw":"---\ntitle: hello django\ndate: 2024-06-02 21:44:12\ntags: django\n---\n## 问题描述\nfrom django.conf.urls import url # 用 url 需要引入\nImportError: cannot import name 'url' from 'django.conf.urls' (/Users/oo/PycharmProjects/djangolearn001/.venv/lib/python3.9/site-packages/django/conf/urls/__init__.py)\n\n## 问题原因\n这是因为在Django 4.0及更高版本中，django.conf.urls.url已被移除。取而代之的是使用django.urls.path和django.urls.re_path。\n\n## 问题解决\n\n将原来的url()调用替换为path()或re_path()\n\n```\nfrom django.urls import path, re_path\nfrom . import viewsurlpatterns = [\npath('example/', views.example_view, name='example'),\nre_path(r'^example-regex/$', views.example_view, name='example-regex'),\n]\n```\n","slug":"hello-django","published":1,"updated":"2024-07-03T06:46:41.364Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3b0009yoimhh2449l3","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>from django.conf.urls import url # 用 url 需要引入<br>ImportError: cannot import name ‘url’ from ‘django.conf.urls’ (&#x2F;Users&#x2F;oo&#x2F;PycharmProjects&#x2F;djangolearn001&#x2F;.venv&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;django&#x2F;conf&#x2F;urls&#x2F;<strong>init</strong>.py)</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>这是因为在Django 4.0及更高版本中，django.conf.urls.url已被移除。取而代之的是使用django.urls.path和django.urls.re_path。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>将原来的url()调用替换为path()或re_path()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">from django.urls import path, re_path<br>from . import viewsurlpatterns = [<br>path(&#x27;example/&#x27;, views.example_view, name=&#x27;example&#x27;),<br>re_path(r&#x27;^example-regex/$&#x27;, views.example_view, name=&#x27;example-regex&#x27;),<br>]<br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>from django.conf.urls import url # 用 url 需要引入<br>ImportError: cannot import name ‘url’ from ‘django.conf.urls’ (&#x2F;Users&#x2F;oo&#x2F;PycharmProjects&#x2F;djangolearn001&#x2F;.venv&#x2F;lib&#x2F;python3.9&#x2F;site-packages&#x2F;django&#x2F;conf&#x2F;urls&#x2F;<strong>init</strong>.py)</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>这是因为在Django 4.0及更高版本中，django.conf.urls.url已被移除。取而代之的是使用django.urls.path和django.urls.re_path。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>将原来的url()调用替换为path()或re_path()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">from django.urls import path, re_path<br>from . import viewsurlpatterns = [<br>path(&#x27;example/&#x27;, views.example_view, name=&#x27;example&#x27;),<br>re_path(r&#x27;^example-regex/$&#x27;, views.example_view, name=&#x27;example-regex&#x27;),<br>]<br></code></pre></td></tr></table></figure>\n"},{"title":"hello domain","date":"2024-05-18T11:39:22.000Z","_content":"将hexo博客部署到个人域名上\n\n# 域名购买\n\n我是在腾讯云买的 首年45元 价格相对实惠\n购买的基本流程就是进入腾讯云官网\n进入控制台进行域名注册然后付钱买选择的域名就行\nhttps://www.tencentcloud.com/zh/products/domain\n<!-- more -->\n# 域名设置DNS解析\n\n- 进入控制台\n- 进入域名控制台\n- 进行解析设置，添加这两条记录\n  注意：这里的IP是ping yourname.github.io\n\n# 创建 CNAME 文件\n\n在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名\n比如我的域名是chenxing.live\n\n# 重新部署\n\n```\nhexo clean\nhexo g \nhexo d\n```\n\n# 最终验证\n\n输入自己的域名地址,比如我的就是这个 https://chenxing.live 进行验证。\n\n","source":"_posts/hello-domain.md","raw":"---\ntitle: hello domain\ndate: 2024-05-18 19:39:22\ntags: hexo\n---\n将hexo博客部署到个人域名上\n\n# 域名购买\n\n我是在腾讯云买的 首年45元 价格相对实惠\n购买的基本流程就是进入腾讯云官网\n进入控制台进行域名注册然后付钱买选择的域名就行\nhttps://www.tencentcloud.com/zh/products/domain\n<!-- more -->\n# 域名设置DNS解析\n\n- 进入控制台\n- 进入域名控制台\n- 进行解析设置，添加这两条记录\n  注意：这里的IP是ping yourname.github.io\n\n# 创建 CNAME 文件\n\n在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名\n比如我的域名是chenxing.live\n\n# 重新部署\n\n```\nhexo clean\nhexo g \nhexo d\n```\n\n# 最终验证\n\n输入自己的域名地址,比如我的就是这个 https://chenxing.live 进行验证。\n\n","slug":"hello-domain","published":1,"updated":"2024-07-03T06:46:41.364Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3c000ayoim26fc3qt4","content":"<p>将hexo博客部署到个人域名上</p>\n<h1 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h1><p>我是在腾讯云买的 首年45元 价格相对实惠<br>购买的基本流程就是进入腾讯云官网<br>进入控制台进行域名注册然后付钱买选择的域名就行<br><a href=\"https://www.tencentcloud.com/zh/products/domain\">https://www.tencentcloud.com/zh/products/domain</a></p>\n<span id=\"more\"></span>\n<h1 id=\"域名设置DNS解析\"><a href=\"#域名设置DNS解析\" class=\"headerlink\" title=\"域名设置DNS解析\"></a>域名设置DNS解析</h1><ul>\n<li>进入控制台</li>\n<li>进入域名控制台</li>\n<li>进行解析设置，添加这两条记录<br>注意：这里的IP是ping yourname.github.io</li>\n</ul>\n<h1 id=\"创建-CNAME-文件\"><a href=\"#创建-CNAME-文件\" class=\"headerlink\" title=\"创建 CNAME 文件\"></a>创建 CNAME 文件</h1><p>在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名<br>比如我的域名是chenxing.live</p>\n<h1 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo clean<br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最终验证\"><a href=\"#最终验证\" class=\"headerlink\" title=\"最终验证\"></a>最终验证</h1><p>输入自己的域名地址,比如我的就是这个 <a href=\"https://chenxing.live/\">https://chenxing.live</a> 进行验证。</p>\n","excerpt":"<p>将hexo博客部署到个人域名上</p>\n<h1 id=\"域名购买\"><a href=\"#域名购买\" class=\"headerlink\" title=\"域名购买\"></a>域名购买</h1><p>我是在腾讯云买的 首年45元 价格相对实惠<br>购买的基本流程就是进入腾讯云官网<br>进入控制台进行域名注册然后付钱买选择的域名就行<br><a href=\"https://www.tencentcloud.com/zh/products/domain\">https://www.tencentcloud.com/zh/products/domain</a></p>","more":"<h1 id=\"域名设置DNS解析\"><a href=\"#域名设置DNS解析\" class=\"headerlink\" title=\"域名设置DNS解析\"></a>域名设置DNS解析</h1><ul>\n<li>进入控制台</li>\n<li>进入域名控制台</li>\n<li>进行解析设置，添加这两条记录<br>注意：这里的IP是ping yourname.github.io</li>\n</ul>\n<h1 id=\"创建-CNAME-文件\"><a href=\"#创建-CNAME-文件\" class=\"headerlink\" title=\"创建 CNAME 文件\"></a>创建 CNAME 文件</h1><p>在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名<br>比如我的域名是chenxing.live</p>\n<h1 id=\"重新部署\"><a href=\"#重新部署\" class=\"headerlink\" title=\"重新部署\"></a>重新部署</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo clean<br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"最终验证\"><a href=\"#最终验证\" class=\"headerlink\" title=\"最终验证\"></a>最终验证</h1><p>输入自己的域名地址,比如我的就是这个 <a href=\"https://chenxing.live/\">https://chenxing.live</a> 进行验证。</p>"},{"title":"hello-git","date":"2024-05-22T06:04:52.000Z","_content":"最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下\n\nGit是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：\n\n# 1. 分布式版本控制\nGit与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：\n- **离线工作能力**：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。\n- **备份和恢复**：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。\n\n# 2. 强大的分支模型\nGit的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：\n- **功能分支（Feature Branch）**：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。\n- **修复分支（Hotfix Branch）**：用于紧急修复生产环境中的问题。\n- **发布分支（Release Branch）**：在发布新版本前进行的最后调试和修复工作。\n\n# 3. 高效的合并和冲突解决\nGit使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：\n- **命令行工具**：如`git merge`和`git rebase`。\n- **图形化工具**：如GitKraken、Sourcetree等。\n\n# 4. 提交和历史记录\n每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：\n- `git log`：查看提交历史。\n- `git diff`：比较文件差异。\n- `git blame`：查看每行代码的最后修改记录。\n\n# 5. 分布式协作\nGit支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。\n\n## 基本命令\n以下是一些常用的Git命令及其简要说明：\n- `git init`：初始化一个新的Git仓库。\n- `git clone [url]`：克隆一个远程仓库到本地。\n- `git add [file]`：将文件的更改添加到暂存区。\n- `git commit -m \"message\"`：提交暂存区的内容。\n- `git status`：查看当前工作目录的状态。\n- `git push`：将本地提交推送到远程仓库。\n- `git pull`：从远程仓库拉取并合并更新。\n- `git branch`：列出、创建或删除分支。\n- `git checkout [branch]`：切换到指定分支。\n\n----\n## Git实践\n\n- **创建了本地版本仓库并将文件提交到本地仓库 常用操作**：\n1、mkdir 创建一个文件夹\n2、cd 进入该目录\n3、pwd 显示该目录路径\n4、git init 将创建的文件夹 变成一个本地仓库\n5、git add 文件名\n6、git commit -m \"这里通常对提交的文件做一个简单的说明\"\n7、git status 随时掌握工作去的状态\n8、git diff 查看修改内容\n9、git log 查看历史记录\n10、git log  --pretty=oneline  查看历史记录（带过滤）\n11、git reflog 用来记录每一次的命令\n12、git reset --hard commit_id 返回到历史版本\n13、cat 文件名  查看文件内容\n14、git checkout -- 文件名  实质是用版本库里面的文件版本替换工作去的版本\n15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致\n\n- **远程托管**：\n16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）\n17、git push -u origin master 第一次把当前分支master的所有内容推送到远程  \n18、git push origin master 非首次推送\n19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息\n     \n- **分支管理**：\n20、git branch 查看分支\n21、git branch branch_name 创建分支( branch_name为自定义的分支名称）  \n22、git checkout branch_name 切换分支\n23、git checkout -b branch_name  创建并切换分支\n24、git merge branch_name 合并某分支到当前分支\n25、git branch -d branch_name 删除分支\n26、git log --graph 查看分支合并图\n27、git merge --no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并\n28、git stash 把当前工作现场“隐藏”\n29、git stash list 查看隐藏的工作现场\n30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除\n31、git stash pop 恢复工作现场的同时，stash内容也被删除\n32、git branch -D branch_name 强行丢弃一个没有被合并过的分支\n\n- **创建标签**：\n33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id\n34、git tag -a tag_name  -m \"此处指定标签信息\"\n35、git tag -s tag_name  -m \"此处用PGP签名标签\"\n36、git tag 查看所有标签\n37、git show tag_name 查看标签信息\n\n- **操作标签**：\n38、git tag -d tag_name 删除一个本地标签\n39、git push origin tag_name 推送某个标签到本地\n40、git push origin --tags 推送全部未推送过的本地标签\n41、git push origin ： refs/tags/tag_name 删除一个远程标签\n\n- **自定义git**：\n42、git config  --global color.ui true\n43、git config  --global alias.st status 设置status的别名为st\n44、git config  --global alias.last 'log -1' 配置了一个git last，显示最后一次提交信息\n\n注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成\n注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）","source":"_posts/hello-git.md","raw":"---\ntitle: hello-git\ndate: 2024-05-22 14:04:52\ntags: git\n---\n最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下\n\nGit是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：\n\n# 1. 分布式版本控制\nGit与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：\n- **离线工作能力**：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。\n- **备份和恢复**：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。\n\n# 2. 强大的分支模型\nGit的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：\n- **功能分支（Feature Branch）**：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。\n- **修复分支（Hotfix Branch）**：用于紧急修复生产环境中的问题。\n- **发布分支（Release Branch）**：在发布新版本前进行的最后调试和修复工作。\n\n# 3. 高效的合并和冲突解决\nGit使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：\n- **命令行工具**：如`git merge`和`git rebase`。\n- **图形化工具**：如GitKraken、Sourcetree等。\n\n# 4. 提交和历史记录\n每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：\n- `git log`：查看提交历史。\n- `git diff`：比较文件差异。\n- `git blame`：查看每行代码的最后修改记录。\n\n# 5. 分布式协作\nGit支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。\n\n## 基本命令\n以下是一些常用的Git命令及其简要说明：\n- `git init`：初始化一个新的Git仓库。\n- `git clone [url]`：克隆一个远程仓库到本地。\n- `git add [file]`：将文件的更改添加到暂存区。\n- `git commit -m \"message\"`：提交暂存区的内容。\n- `git status`：查看当前工作目录的状态。\n- `git push`：将本地提交推送到远程仓库。\n- `git pull`：从远程仓库拉取并合并更新。\n- `git branch`：列出、创建或删除分支。\n- `git checkout [branch]`：切换到指定分支。\n\n----\n## Git实践\n\n- **创建了本地版本仓库并将文件提交到本地仓库 常用操作**：\n1、mkdir 创建一个文件夹\n2、cd 进入该目录\n3、pwd 显示该目录路径\n4、git init 将创建的文件夹 变成一个本地仓库\n5、git add 文件名\n6、git commit -m \"这里通常对提交的文件做一个简单的说明\"\n7、git status 随时掌握工作去的状态\n8、git diff 查看修改内容\n9、git log 查看历史记录\n10、git log  --pretty=oneline  查看历史记录（带过滤）\n11、git reflog 用来记录每一次的命令\n12、git reset --hard commit_id 返回到历史版本\n13、cat 文件名  查看文件内容\n14、git checkout -- 文件名  实质是用版本库里面的文件版本替换工作去的版本\n15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致\n\n- **远程托管**：\n16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）\n17、git push -u origin master 第一次把当前分支master的所有内容推送到远程  \n18、git push origin master 非首次推送\n19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息\n     \n- **分支管理**：\n20、git branch 查看分支\n21、git branch branch_name 创建分支( branch_name为自定义的分支名称）  \n22、git checkout branch_name 切换分支\n23、git checkout -b branch_name  创建并切换分支\n24、git merge branch_name 合并某分支到当前分支\n25、git branch -d branch_name 删除分支\n26、git log --graph 查看分支合并图\n27、git merge --no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并\n28、git stash 把当前工作现场“隐藏”\n29、git stash list 查看隐藏的工作现场\n30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除\n31、git stash pop 恢复工作现场的同时，stash内容也被删除\n32、git branch -D branch_name 强行丢弃一个没有被合并过的分支\n\n- **创建标签**：\n33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id\n34、git tag -a tag_name  -m \"此处指定标签信息\"\n35、git tag -s tag_name  -m \"此处用PGP签名标签\"\n36、git tag 查看所有标签\n37、git show tag_name 查看标签信息\n\n- **操作标签**：\n38、git tag -d tag_name 删除一个本地标签\n39、git push origin tag_name 推送某个标签到本地\n40、git push origin --tags 推送全部未推送过的本地标签\n41、git push origin ： refs/tags/tag_name 删除一个远程标签\n\n- **自定义git**：\n42、git config  --global color.ui true\n43、git config  --global alias.st status 设置status的别名为st\n44、git config  --global alias.last 'log -1' 配置了一个git last，显示最后一次提交信息\n\n注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成\n注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）","slug":"hello-git","published":1,"updated":"2024-07-03T06:46:41.366Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3g000dyoimebsi9ry9","content":"<p>最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下</p>\n<p>Git是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：</p>\n<h1 id=\"1-分布式版本控制\"><a href=\"#1-分布式版本控制\" class=\"headerlink\" title=\"1. 分布式版本控制\"></a>1. 分布式版本控制</h1><p>Git与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：</p>\n<ul>\n<li><strong>离线工作能力</strong>：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。</li>\n<li><strong>备份和恢复</strong>：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。</li>\n</ul>\n<h1 id=\"2-强大的分支模型\"><a href=\"#2-强大的分支模型\" class=\"headerlink\" title=\"2. 强大的分支模型\"></a>2. 强大的分支模型</h1><p>Git的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：</p>\n<ul>\n<li><strong>功能分支（Feature Branch）</strong>：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。</li>\n<li><strong>修复分支（Hotfix Branch）</strong>：用于紧急修复生产环境中的问题。</li>\n<li><strong>发布分支（Release Branch）</strong>：在发布新版本前进行的最后调试和修复工作。</li>\n</ul>\n<h1 id=\"3-高效的合并和冲突解决\"><a href=\"#3-高效的合并和冲突解决\" class=\"headerlink\" title=\"3. 高效的合并和冲突解决\"></a>3. 高效的合并和冲突解决</h1><p>Git使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：</p>\n<ul>\n<li><strong>命令行工具</strong>：如<code>git merge</code>和<code>git rebase</code>。</li>\n<li><strong>图形化工具</strong>：如GitKraken、Sourcetree等。</li>\n</ul>\n<h1 id=\"4-提交和历史记录\"><a href=\"#4-提交和历史记录\" class=\"headerlink\" title=\"4. 提交和历史记录\"></a>4. 提交和历史记录</h1><p>每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：</p>\n<ul>\n<li><code>git log</code>：查看提交历史。</li>\n<li><code>git diff</code>：比较文件差异。</li>\n<li><code>git blame</code>：查看每行代码的最后修改记录。</li>\n</ul>\n<h1 id=\"5-分布式协作\"><a href=\"#5-分布式协作\" class=\"headerlink\" title=\"5. 分布式协作\"></a>5. 分布式协作</h1><p>Git支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>以下是一些常用的Git命令及其简要说明：</p>\n<ul>\n<li><code>git init</code>：初始化一个新的Git仓库。</li>\n<li><code>git clone [url]</code>：克隆一个远程仓库到本地。</li>\n<li><code>git add [file]</code>：将文件的更改添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交暂存区的内容。</li>\n<li><code>git status</code>：查看当前工作目录的状态。</li>\n<li><code>git push</code>：将本地提交推送到远程仓库。</li>\n<li><code>git pull</code>：从远程仓库拉取并合并更新。</li>\n<li><code>git branch</code>：列出、创建或删除分支。</li>\n<li><code>git checkout [branch]</code>：切换到指定分支。</li>\n</ul>\n<hr>\n<h2 id=\"Git实践\"><a href=\"#Git实践\" class=\"headerlink\" title=\"Git实践\"></a>Git实践</h2><ul>\n<li><p><strong>创建了本地版本仓库并将文件提交到本地仓库 常用操作</strong>：<br>1、mkdir 创建一个文件夹<br>2、cd 进入该目录<br>3、pwd 显示该目录路径<br>4、git init 将创建的文件夹 变成一个本地仓库<br>5、git add 文件名<br>6、git commit -m “这里通常对提交的文件做一个简单的说明”<br>7、git status 随时掌握工作去的状态<br>8、git diff 查看修改内容<br>9、git log 查看历史记录<br>10、git log  –pretty&#x3D;oneline  查看历史记录（带过滤）<br>11、git reflog 用来记录每一次的命令<br>12、git reset –hard commit_id 返回到历史版本<br>13、cat 文件名  查看文件内容<br>14、git checkout – 文件名  实质是用版本库里面的文件版本替换工作去的版本<br>15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致</p>\n</li>\n<li><p><strong>远程托管</strong>：<br>16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）<br>17、git push -u origin master 第一次把当前分支master的所有内容推送到远程<br>18、git push origin master 非首次推送<br>19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息</p>\n</li>\n<li><p><strong>分支管理</strong>：<br>20、git branch 查看分支<br>21、git branch branch_name 创建分支( branch_name为自定义的分支名称）<br>22、git checkout branch_name 切换分支<br>23、git checkout -b branch_name  创建并切换分支<br>24、git merge branch_name 合并某分支到当前分支<br>25、git branch -d branch_name 删除分支<br>26、git log –graph 查看分支合并图<br>27、git merge –no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并<br>28、git stash 把当前工作现场“隐藏”<br>29、git stash list 查看隐藏的工作现场<br>30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除<br>31、git stash pop 恢复工作现场的同时，stash内容也被删除<br>32、git branch -D branch_name 强行丢弃一个没有被合并过的分支</p>\n</li>\n<li><p><strong>创建标签</strong>：<br>33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id<br>34、git tag -a tag_name  -m “此处指定标签信息”<br>35、git tag -s tag_name  -m “此处用PGP签名标签”<br>36、git tag 查看所有标签<br>37、git show tag_name 查看标签信息</p>\n</li>\n<li><p><strong>操作标签</strong>：<br>38、git tag -d tag_name 删除一个本地标签<br>39、git push origin tag_name 推送某个标签到本地<br>40、git push origin –tags 推送全部未推送过的本地标签<br>41、git push origin ： refs&#x2F;tags&#x2F;tag_name 删除一个远程标签</p>\n</li>\n<li><p><strong>自定义git</strong>：<br>42、git config  –global color.ui true<br>43、git config  –global alias.st status 设置status的别名为st<br>44、git config  –global alias.last ‘log -1’ 配置了一个git last，显示最后一次提交信息</p>\n</li>\n</ul>\n<p>注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成<br>注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）</p>\n","excerpt":"","more":"<p>最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下</p>\n<p>Git是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍：</p>\n<h1 id=\"1-分布式版本控制\"><a href=\"#1-分布式版本控制\" class=\"headerlink\" title=\"1. 分布式版本控制\"></a>1. 分布式版本控制</h1><p>Git与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势：</p>\n<ul>\n<li><strong>离线工作能力</strong>：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。</li>\n<li><strong>备份和恢复</strong>：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。</li>\n</ul>\n<h1 id=\"2-强大的分支模型\"><a href=\"#2-强大的分支模型\" class=\"headerlink\" title=\"2. 强大的分支模型\"></a>2. 强大的分支模型</h1><p>Git的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括：</p>\n<ul>\n<li><strong>功能分支（Feature Branch）</strong>：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。</li>\n<li><strong>修复分支（Hotfix Branch）</strong>：用于紧急修复生产环境中的问题。</li>\n<li><strong>发布分支（Release Branch）</strong>：在发布新版本前进行的最后调试和修复工作。</li>\n</ul>\n<h1 id=\"3-高效的合并和冲突解决\"><a href=\"#3-高效的合并和冲突解决\" class=\"headerlink\" title=\"3. 高效的合并和冲突解决\"></a>3. 高效的合并和冲突解决</h1><p>Git使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如：</p>\n<ul>\n<li><strong>命令行工具</strong>：如<code>git merge</code>和<code>git rebase</code>。</li>\n<li><strong>图形化工具</strong>：如GitKraken、Sourcetree等。</li>\n</ul>\n<h1 id=\"4-提交和历史记录\"><a href=\"#4-提交和历史记录\" class=\"headerlink\" title=\"4. 提交和历史记录\"></a>4. 提交和历史记录</h1><p>每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括：</p>\n<ul>\n<li><code>git log</code>：查看提交历史。</li>\n<li><code>git diff</code>：比较文件差异。</li>\n<li><code>git blame</code>：查看每行代码的最后修改记录。</li>\n</ul>\n<h1 id=\"5-分布式协作\"><a href=\"#5-分布式协作\" class=\"headerlink\" title=\"5. 分布式协作\"></a>5. 分布式协作</h1><p>Git支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p>以下是一些常用的Git命令及其简要说明：</p>\n<ul>\n<li><code>git init</code>：初始化一个新的Git仓库。</li>\n<li><code>git clone [url]</code>：克隆一个远程仓库到本地。</li>\n<li><code>git add [file]</code>：将文件的更改添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交暂存区的内容。</li>\n<li><code>git status</code>：查看当前工作目录的状态。</li>\n<li><code>git push</code>：将本地提交推送到远程仓库。</li>\n<li><code>git pull</code>：从远程仓库拉取并合并更新。</li>\n<li><code>git branch</code>：列出、创建或删除分支。</li>\n<li><code>git checkout [branch]</code>：切换到指定分支。</li>\n</ul>\n<hr>\n<h2 id=\"Git实践\"><a href=\"#Git实践\" class=\"headerlink\" title=\"Git实践\"></a>Git实践</h2><ul>\n<li><p><strong>创建了本地版本仓库并将文件提交到本地仓库 常用操作</strong>：<br>1、mkdir 创建一个文件夹<br>2、cd 进入该目录<br>3、pwd 显示该目录路径<br>4、git init 将创建的文件夹 变成一个本地仓库<br>5、git add 文件名<br>6、git commit -m “这里通常对提交的文件做一个简单的说明”<br>7、git status 随时掌握工作去的状态<br>8、git diff 查看修改内容<br>9、git log 查看历史记录<br>10、git log  –pretty&#x3D;oneline  查看历史记录（带过滤）<br>11、git reflog 用来记录每一次的命令<br>12、git reset –hard commit_id 返回到历史版本<br>13、cat 文件名  查看文件内容<br>14、git checkout – 文件名  实质是用版本库里面的文件版本替换工作去的版本<br>15、git rm 文件名  删除文件  直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致</p>\n</li>\n<li><p><strong>远程托管</strong>：<br>16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）<br>17、git push -u origin master 第一次把当前分支master的所有内容推送到远程<br>18、git push origin master 非首次推送<br>19、git clone ssh地址  从远程库克隆     git remote -v 查看远程库信息</p>\n</li>\n<li><p><strong>分支管理</strong>：<br>20、git branch 查看分支<br>21、git branch branch_name 创建分支( branch_name为自定义的分支名称）<br>22、git checkout branch_name 切换分支<br>23、git checkout -b branch_name  创建并切换分支<br>24、git merge branch_name 合并某分支到当前分支<br>25、git branch -d branch_name 删除分支<br>26、git log –graph 查看分支合并图<br>27、git merge –no-ff branch_name  普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并<br>28、git stash 把当前工作现场“隐藏”<br>29、git stash list 查看隐藏的工作现场<br>30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除<br>31、git stash pop 恢复工作现场的同时，stash内容也被删除<br>32、git branch -D branch_name 强行丢弃一个没有被合并过的分支</p>\n</li>\n<li><p><strong>创建标签</strong>：<br>33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id<br>34、git tag -a tag_name  -m “此处指定标签信息”<br>35、git tag -s tag_name  -m “此处用PGP签名标签”<br>36、git tag 查看所有标签<br>37、git show tag_name 查看标签信息</p>\n</li>\n<li><p><strong>操作标签</strong>：<br>38、git tag -d tag_name 删除一个本地标签<br>39、git push origin tag_name 推送某个标签到本地<br>40、git push origin –tags 推送全部未推送过的本地标签<br>41、git push origin ： refs&#x2F;tags&#x2F;tag_name 删除一个远程标签</p>\n</li>\n<li><p><strong>自定义git</strong>：<br>42、git config  –global color.ui true<br>43、git config  –global alias.st status 设置status的别名为st<br>44、git config  –global alias.last ‘log -1’ 配置了一个git last，显示最后一次提交信息</p>\n</li>\n</ul>\n<p>注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成<br>注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）</p>\n"},{"title":"hello github","date":"2024-05-18T11:38:05.000Z","_content":"将个人博客源码也托管到github\n关键点：分支切换 找到隐藏文件\n<!-- more -->\n# 配置步骤\n\n## 1.本地电脑创建文件夹并进入该文件夹\n\n```\nmkdir chenxingBlogs\ncd chenxingBlogs\n```\n\n## 2.将静态站托管仓库克隆回本地\n\n```\ngit clone https://github.com/lichenxing/lichenxing.github.io.git\n```\n\n## 3.新建分支并切换\n\n```\n# 新建并切换分支\ngit checkout -b source\n```\n\n备注：如果只是切换分支 git checkout 分支名。\n\n## 4.清理文件\n\n删除hexo自动生成的静态文件（注意保留.git目录）\n\n在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。\n\n## 5.添加hexo源码\n\n将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。\n\n## 6.同步代码到github\n```\ngit add -A\ngit commit -m '初始化自动部署分支'\ngit push --set-upstream origin source\n```\n## 7.登录github检查自己的仓库中是否已经有了源码的分支\n检查是否有「初始化自动部署分支」的提交。\n# 参考文档\n\nhttps://www.idzd.top/archives/1430/\n\n# 注意事项\n\n1. 在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。\n2. mac电脑显示隐藏文件快捷键：**Command + Shift + .** 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态\n","source":"_posts/hello-github.md","raw":"---\ntitle: hello github\ndate: 2024-05-18 19:38:05\ntags:\n  - hexo\n  - git\n---\n将个人博客源码也托管到github\n关键点：分支切换 找到隐藏文件\n<!-- more -->\n# 配置步骤\n\n## 1.本地电脑创建文件夹并进入该文件夹\n\n```\nmkdir chenxingBlogs\ncd chenxingBlogs\n```\n\n## 2.将静态站托管仓库克隆回本地\n\n```\ngit clone https://github.com/lichenxing/lichenxing.github.io.git\n```\n\n## 3.新建分支并切换\n\n```\n# 新建并切换分支\ngit checkout -b source\n```\n\n备注：如果只是切换分支 git checkout 分支名。\n\n## 4.清理文件\n\n删除hexo自动生成的静态文件（注意保留.git目录）\n\n在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。\n\n## 5.添加hexo源码\n\n将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。\n\n## 6.同步代码到github\n```\ngit add -A\ngit commit -m '初始化自动部署分支'\ngit push --set-upstream origin source\n```\n## 7.登录github检查自己的仓库中是否已经有了源码的分支\n检查是否有「初始化自动部署分支」的提交。\n# 参考文档\n\nhttps://www.idzd.top/archives/1430/\n\n# 注意事项\n\n1. 在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。\n2. mac电脑显示隐藏文件快捷键：**Command + Shift + .** 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态\n","slug":"hello-github","published":1,"updated":"2024-07-03T06:46:41.367Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3i000fyoim3dfgbb4q","content":"<p>将个人博客源码也托管到github<br>关键点：分支切换 找到隐藏文件</p>\n<span id=\"more\"></span>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"1-本地电脑创建文件夹并进入该文件夹\"><a href=\"#1-本地电脑创建文件夹并进入该文件夹\" class=\"headerlink\" title=\"1.本地电脑创建文件夹并进入该文件夹\"></a>1.本地电脑创建文件夹并进入该文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">mkdir chenxingBlogs<br>cd chenxingBlogs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-将静态站托管仓库克隆回本地\"><a href=\"#2-将静态站托管仓库克隆回本地\" class=\"headerlink\" title=\"2.将静态站托管仓库克隆回本地\"></a>2.将静态站托管仓库克隆回本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone https://github.com/lichenxing/lichenxing.github.io.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-新建分支并切换\"><a href=\"#3-新建分支并切换\" class=\"headerlink\" title=\"3.新建分支并切换\"></a>3.新建分支并切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 新建并切换分支<br>git checkout -b source<br></code></pre></td></tr></table></figure>\n\n<p>备注：如果只是切换分支 git checkout 分支名。</p>\n<h2 id=\"4-清理文件\"><a href=\"#4-清理文件\" class=\"headerlink\" title=\"4.清理文件\"></a>4.清理文件</h2><p>删除hexo自动生成的静态文件（注意保留.git目录）</p>\n<p>在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。</p>\n<h2 id=\"5-添加hexo源码\"><a href=\"#5-添加hexo源码\" class=\"headerlink\" title=\"5.添加hexo源码\"></a>5.添加hexo源码</h2><p>将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。</p>\n<h2 id=\"6-同步代码到github\"><a href=\"#6-同步代码到github\" class=\"headerlink\" title=\"6.同步代码到github\"></a>6.同步代码到github</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git add -A<br>git commit -m &#x27;初始化自动部署分支&#x27;<br>git push --set-upstream origin source<br></code></pre></td></tr></table></figure>\n<h2 id=\"7-登录github检查自己的仓库中是否已经有了源码的分支\"><a href=\"#7-登录github检查自己的仓库中是否已经有了源码的分支\" class=\"headerlink\" title=\"7.登录github检查自己的仓库中是否已经有了源码的分支\"></a>7.登录github检查自己的仓库中是否已经有了源码的分支</h2><p>检查是否有「初始化自动部署分支」的提交。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://www.idzd.top/archives/1430/\">https://www.idzd.top/archives/1430/</a></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。</li>\n<li>mac电脑显示隐藏文件快捷键：<strong>Command + Shift + .</strong> 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态</li>\n</ol>\n","excerpt":"<p>将个人博客源码也托管到github<br>关键点：分支切换 找到隐藏文件</p>","more":"<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><h2 id=\"1-本地电脑创建文件夹并进入该文件夹\"><a href=\"#1-本地电脑创建文件夹并进入该文件夹\" class=\"headerlink\" title=\"1.本地电脑创建文件夹并进入该文件夹\"></a>1.本地电脑创建文件夹并进入该文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">mkdir chenxingBlogs<br>cd chenxingBlogs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-将静态站托管仓库克隆回本地\"><a href=\"#2-将静态站托管仓库克隆回本地\" class=\"headerlink\" title=\"2.将静态站托管仓库克隆回本地\"></a>2.将静态站托管仓库克隆回本地</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git clone https://github.com/lichenxing/lichenxing.github.io.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-新建分支并切换\"><a href=\"#3-新建分支并切换\" class=\"headerlink\" title=\"3.新建分支并切换\"></a>3.新建分支并切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\"># 新建并切换分支<br>git checkout -b source<br></code></pre></td></tr></table></figure>\n\n<p>备注：如果只是切换分支 git checkout 分支名。</p>\n<h2 id=\"4-清理文件\"><a href=\"#4-清理文件\" class=\"headerlink\" title=\"4.清理文件\"></a>4.清理文件</h2><p>删除hexo自动生成的静态文件（注意保留.git目录）</p>\n<p>在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。</p>\n<h2 id=\"5-添加hexo源码\"><a href=\"#5-添加hexo源码\" class=\"headerlink\" title=\"5.添加hexo源码\"></a>5.添加hexo源码</h2><p>将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。</p>\n<h2 id=\"6-同步代码到github\"><a href=\"#6-同步代码到github\" class=\"headerlink\" title=\"6.同步代码到github\"></a>6.同步代码到github</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">git add -A<br>git commit -m &#x27;初始化自动部署分支&#x27;<br>git push --set-upstream origin source<br></code></pre></td></tr></table></figure>\n<h2 id=\"7-登录github检查自己的仓库中是否已经有了源码的分支\"><a href=\"#7-登录github检查自己的仓库中是否已经有了源码的分支\" class=\"headerlink\" title=\"7.登录github检查自己的仓库中是否已经有了源码的分支\"></a>7.登录github检查自己的仓库中是否已经有了源码的分支</h2><p>检查是否有「初始化自动部署分支」的提交。</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://www.idzd.top/archives/1430/\">https://www.idzd.top/archives/1430/</a></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。</li>\n<li>mac电脑显示隐藏文件快捷键：<strong>Command + Shift + .</strong> 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态</li>\n</ol>"},{"title":"hello hexo","date":"2024-05-18T11:37:11.000Z","_content":"Hexo+Github搭建个人博客\n\n## 1. 介绍\n这是首次安装hexo成功后创建的test文档！\n\n## 2. 常用操作\n通过终端\ncd 进入自己创建的myblogs文件夹 \n然后执行\nhexo clean 清静态缓存\nhexo g 生成html文件\nhexo d 部署到Github\nhexo s 启动服务 关闭 control+c\n\n## 3. 注意事项\nhexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens\n可参考https://blog.csdn.net/qq_21040559/article/details/122621179\n\n## 4. 参考博文：\nhttps://blog.csdn.net/qq_21040559/article/details/122621179\nhttps://hexo.io/zh-cn/docs/commands\nhttps://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\nhttps://yanglukuan.github.io/2017/08/17/firstblog/","source":"_posts/hello-hexo.md","raw":"---\ntitle: hello hexo\ndate: 2024-05-18 19:37:11\ntags: hexo\n---\nHexo+Github搭建个人博客\n\n## 1. 介绍\n这是首次安装hexo成功后创建的test文档！\n\n## 2. 常用操作\n通过终端\ncd 进入自己创建的myblogs文件夹 \n然后执行\nhexo clean 清静态缓存\nhexo g 生成html文件\nhexo d 部署到Github\nhexo s 启动服务 关闭 control+c\n\n## 3. 注意事项\nhexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens\n可参考https://blog.csdn.net/qq_21040559/article/details/122621179\n\n## 4. 参考博文：\nhttps://blog.csdn.net/qq_21040559/article/details/122621179\nhttps://hexo.io/zh-cn/docs/commands\nhttps://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\nhttps://yanglukuan.github.io/2017/08/17/firstblog/","slug":"hello-hexo","published":1,"updated":"2024-07-03T06:46:41.368Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3l000kyoimbwqu7rip","content":"<p>Hexo+Github搭建个人博客</p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>这是首次安装hexo成功后创建的test文档！</p>\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2. 常用操作\"></a>2. 常用操作</h2><p>通过终端<br>cd 进入自己创建的myblogs文件夹<br>然后执行<br>hexo clean 清静态缓存<br>hexo g 生成html文件<br>hexo d 部署到Github<br>hexo s 启动服务 关闭 control+c</p>\n<h2 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h2><p>hexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens<br>可参考<a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a></p>\n<h2 id=\"4-参考博文：\"><a href=\"#4-参考博文：\" class=\"headerlink\" title=\"4. 参考博文：\"></a>4. 参考博文：</h2><p><a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a><br><a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br><a href=\"https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\">https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f</a><br><a href=\"https://yanglukuan.github.io/2017/08/17/firstblog/\">https://yanglukuan.github.io/2017/08/17/firstblog/</a></p>\n","excerpt":"","more":"<p>Hexo+Github搭建个人博客</p>\n<h2 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h2><p>这是首次安装hexo成功后创建的test文档！</p>\n<h2 id=\"2-常用操作\"><a href=\"#2-常用操作\" class=\"headerlink\" title=\"2. 常用操作\"></a>2. 常用操作</h2><p>通过终端<br>cd 进入自己创建的myblogs文件夹<br>然后执行<br>hexo clean 清静态缓存<br>hexo g 生成html文件<br>hexo d 部署到Github<br>hexo s 启动服务 关闭 control+c</p>\n<h2 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h2><p>hexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens<br>可参考<a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a></p>\n<h2 id=\"4-参考博文：\"><a href=\"#4-参考博文：\" class=\"headerlink\" title=\"4. 参考博文：\"></a>4. 参考博文：</h2><p><a href=\"https://blog.csdn.net/qq_21040559/article/details/122621179\">https://blog.csdn.net/qq_21040559/article/details/122621179</a><br><a href=\"https://hexo.io/zh-cn/docs/commands\">https://hexo.io/zh-cn/docs/commands</a><br><a href=\"https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f\">https://xie.infoq.cn/article/90dc08c57463df3a1b2ad960f</a><br><a href=\"https://yanglukuan.github.io/2017/08/17/firstblog/\">https://yanglukuan.github.io/2017/08/17/firstblog/</a></p>\n"},{"title":"hello menu","date":"2024-05-18T11:36:01.000Z","_content":"自定义修改icarus的菜单，增删改新的菜单选项\n比如增加关于、相册等\n\n# 修改主题的配置文件_config.icarus.yml\n\n```\nmenu:\n主页: /\n归档: /archives\n分类: /categories\n标签: /tags\n相册: /photo\n关于: /about\n```\n\n注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面\n\n# 在Git控制台中创建对应页面\n\n从博客网站的根目录打开Git控制台，新建对应页面，例如：\n\n```\nhexo new page \"about\"\nhexo new page \"photo\"\n```\n\n# 继续在控制台键入命令\n\n```\nhexo cl\nhexo g\nhexo s\n```\n\n# 重新加载博客主页验证\n\n浏览器打开 http://localhost:4000/  新创建的菜单选项就成功了。\n","source":"_posts/hello-menu.md","raw":"---\ntitle: hello menu\ndate: 2024-05-18 19:36:01\ntags: hexo\n---\n自定义修改icarus的菜单，增删改新的菜单选项\n比如增加关于、相册等\n\n# 修改主题的配置文件_config.icarus.yml\n\n```\nmenu:\n主页: /\n归档: /archives\n分类: /categories\n标签: /tags\n相册: /photo\n关于: /about\n```\n\n注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面\n\n# 在Git控制台中创建对应页面\n\n从博客网站的根目录打开Git控制台，新建对应页面，例如：\n\n```\nhexo new page \"about\"\nhexo new page \"photo\"\n```\n\n# 继续在控制台键入命令\n\n```\nhexo cl\nhexo g\nhexo s\n```\n\n# 重新加载博客主页验证\n\n浏览器打开 http://localhost:4000/  新创建的菜单选项就成功了。\n","slug":"hello-menu","published":1,"updated":"2024-07-03T06:46:41.370Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3n000myoimcxwk308b","content":"<p>自定义修改icarus的菜单，增删改新的菜单选项<br>比如增加关于、相册等</p>\n<h1 id=\"修改主题的配置文件-config-icarus-yml\"><a href=\"#修改主题的配置文件-config-icarus-yml\" class=\"headerlink\" title=\"修改主题的配置文件_config.icarus.yml\"></a>修改主题的配置文件_config.icarus.yml</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">menu:<br>主页: /<br>归档: /archives<br>分类: /categories<br>标签: /tags<br>相册: /photo<br>关于: /about<br></code></pre></td></tr></table></figure>\n\n<p>注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面</p>\n<h1 id=\"在Git控制台中创建对应页面\"><a href=\"#在Git控制台中创建对应页面\" class=\"headerlink\" title=\"在Git控制台中创建对应页面\"></a>在Git控制台中创建对应页面</h1><p>从博客网站的根目录打开Git控制台，新建对应页面，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo new page &quot;about&quot;<br>hexo new page &quot;photo&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"继续在控制台键入命令\"><a href=\"#继续在控制台键入命令\" class=\"headerlink\" title=\"继续在控制台键入命令\"></a>继续在控制台键入命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo cl<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"重新加载博客主页验证\"><a href=\"#重新加载博客主页验证\" class=\"headerlink\" title=\"重新加载博客主页验证\"></a>重新加载博客主页验证</h1><p>浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a>  新创建的菜单选项就成功了。</p>\n","excerpt":"","more":"<p>自定义修改icarus的菜单，增删改新的菜单选项<br>比如增加关于、相册等</p>\n<h1 id=\"修改主题的配置文件-config-icarus-yml\"><a href=\"#修改主题的配置文件-config-icarus-yml\" class=\"headerlink\" title=\"修改主题的配置文件_config.icarus.yml\"></a>修改主题的配置文件_config.icarus.yml</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">menu:<br>主页: /<br>归档: /archives<br>分类: /categories<br>标签: /tags<br>相册: /photo<br>关于: /about<br></code></pre></td></tr></table></figure>\n\n<p>注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面</p>\n<h1 id=\"在Git控制台中创建对应页面\"><a href=\"#在Git控制台中创建对应页面\" class=\"headerlink\" title=\"在Git控制台中创建对应页面\"></a>在Git控制台中创建对应页面</h1><p>从博客网站的根目录打开Git控制台，新建对应页面，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo new page &quot;about&quot;<br>hexo new page &quot;photo&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"继续在控制台键入命令\"><a href=\"#继续在控制台键入命令\" class=\"headerlink\" title=\"继续在控制台键入命令\"></a>继续在控制台键入命令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">hexo cl<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"重新加载博客主页验证\"><a href=\"#重新加载博客主页验证\" class=\"headerlink\" title=\"重新加载博客主页验证\"></a>重新加载博客主页验证</h1><p>浏览器打开 <a href=\"http://localhost:4000/\">http://localhost:4000/</a>  新创建的菜单选项就成功了。</p>\n"},{"title":"hello-ollama","date":"2024-06-05T08:54:50.000Z","_content":"## Mac上使用Ollama和AnythingLLM部署Llama3模型\n\n### 安装步骤\n\n#### 1. 安装Ollama\n\n- **访问Ollama官网**: https://ollama.com/ 注册并下载适用于macOS的安装包。\n- **安装Ollama**: 双击下载的安装包并按照提示完成安装。\n- **验证安装**: 在终端中运行以下命令，确保Ollama安装成功：\n  ```bash\n  ollama\n  ```\n\n#### 2. 下载和运行Llama 3模型\n- **运行模型**: 使用以下命令启动Llama 3模型：\n  ```bash\n  ollama run llama3\n  ```\n  如果本地没有Llama 3模型，Ollama会自动下载模型。\n\n#### 3. 配置AnythingLLM\n\n  AngthingLLM官网：https://useanything.com\n  同样的选择对应的系统版本即可\n  在配置里配 LLM Preference，LLM provider选择ollama，URL填写默认地址，后面的模型选择llama3，token填4096\n\n\n#### 4. 测试部署\n- **验证运行状态**: 通过浏览器访问`http://127.0.0.1:11434`。\n\n\n### 常用Ollama命令\n- **serve**: 启动Ollama\n  ```bash\n  ollama serve\n  ```\n- **create**: 从Modelfile创建模型\n  ```bash\n  ollama create <model_name>\n  ```\n- **show**: 显示模型信息\n  ```bash\n  ollama show <model_name>\n  ```\n- **run**: 运行模型\n  ```bash\n  ollama run <model_name>\n  ```\n- **pull**: 从注册表拉取模型\n  ```bash\n  ollama pull <model_name>\n  ```\n- **push**: 将模型推送到注册表\n  ```bash\n  ollama push <model_name>\n  ```\n- **list**: 列出所有模型\n  ```bash\n  ollama list models\n  ```\n- **cp**: 复制模型\n  ```bash\n  ollama cp <source_model> <destination_model>\n  ```\n- **rm**: 删除模型\n  ```bash\n  ollama rm <model_name>\n  ```\n- **help**: 获取命令帮助\n  ```bash\n  ollama help <command>\n  ```","source":"_posts/hello-ollama.md","raw":"---\ntitle: hello-ollama\ndate: 2024-06-05 16:54:50\ntags: ollama\ncategories: ollama\n---\n## Mac上使用Ollama和AnythingLLM部署Llama3模型\n\n### 安装步骤\n\n#### 1. 安装Ollama\n\n- **访问Ollama官网**: https://ollama.com/ 注册并下载适用于macOS的安装包。\n- **安装Ollama**: 双击下载的安装包并按照提示完成安装。\n- **验证安装**: 在终端中运行以下命令，确保Ollama安装成功：\n  ```bash\n  ollama\n  ```\n\n#### 2. 下载和运行Llama 3模型\n- **运行模型**: 使用以下命令启动Llama 3模型：\n  ```bash\n  ollama run llama3\n  ```\n  如果本地没有Llama 3模型，Ollama会自动下载模型。\n\n#### 3. 配置AnythingLLM\n\n  AngthingLLM官网：https://useanything.com\n  同样的选择对应的系统版本即可\n  在配置里配 LLM Preference，LLM provider选择ollama，URL填写默认地址，后面的模型选择llama3，token填4096\n\n\n#### 4. 测试部署\n- **验证运行状态**: 通过浏览器访问`http://127.0.0.1:11434`。\n\n\n### 常用Ollama命令\n- **serve**: 启动Ollama\n  ```bash\n  ollama serve\n  ```\n- **create**: 从Modelfile创建模型\n  ```bash\n  ollama create <model_name>\n  ```\n- **show**: 显示模型信息\n  ```bash\n  ollama show <model_name>\n  ```\n- **run**: 运行模型\n  ```bash\n  ollama run <model_name>\n  ```\n- **pull**: 从注册表拉取模型\n  ```bash\n  ollama pull <model_name>\n  ```\n- **push**: 将模型推送到注册表\n  ```bash\n  ollama push <model_name>\n  ```\n- **list**: 列出所有模型\n  ```bash\n  ollama list models\n  ```\n- **cp**: 复制模型\n  ```bash\n  ollama cp <source_model> <destination_model>\n  ```\n- **rm**: 删除模型\n  ```bash\n  ollama rm <model_name>\n  ```\n- **help**: 获取命令帮助\n  ```bash\n  ollama help <command>\n  ```","slug":"hello-ollama","published":1,"updated":"2024-07-03T06:46:41.371Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3p000pyoim3iuifcpq","content":"<h2 id=\"Mac上使用Ollama和AnythingLLM部署Llama3模型\"><a href=\"#Mac上使用Ollama和AnythingLLM部署Llama3模型\" class=\"headerlink\" title=\"Mac上使用Ollama和AnythingLLM部署Llama3模型\"></a>Mac上使用Ollama和AnythingLLM部署Llama3模型</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><h4 id=\"1-安装Ollama\"><a href=\"#1-安装Ollama\" class=\"headerlink\" title=\"1. 安装Ollama\"></a>1. 安装Ollama</h4><ul>\n<li><strong>访问Ollama官网</strong>: <a href=\"https://ollama.com/\">https://ollama.com/</a> 注册并下载适用于macOS的安装包。</li>\n<li><strong>安装Ollama</strong>: 双击下载的安装包并按照提示完成安装。</li>\n<li><strong>验证安装</strong>: 在终端中运行以下命令，确保Ollama安装成功：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-下载和运行Llama-3模型\"><a href=\"#2-下载和运行Llama-3模型\" class=\"headerlink\" title=\"2. 下载和运行Llama 3模型\"></a>2. 下载和运行Llama 3模型</h4><ul>\n<li><strong>运行模型</strong>: 使用以下命令启动Llama 3模型：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama run llama3<br></code></pre></td></tr></table></figure>\n如果本地没有Llama 3模型，Ollama会自动下载模型。</li>\n</ul>\n<h4 id=\"3-配置AnythingLLM\"><a href=\"#3-配置AnythingLLM\" class=\"headerlink\" title=\"3. 配置AnythingLLM\"></a>3. 配置AnythingLLM</h4><p>  AngthingLLM官网：<a href=\"https://useanything.com/\">https://useanything.com</a><br>  同样的选择对应的系统版本即可<br>  在配置里配 LLM Preference，LLM provider选择ollama，URL填写默认地址，后面的模型选择llama3，token填4096</p>\n<h4 id=\"4-测试部署\"><a href=\"#4-测试部署\" class=\"headerlink\" title=\"4. 测试部署\"></a>4. 测试部署</h4><ul>\n<li><strong>验证运行状态</strong>: 通过浏览器访问<code>http://127.0.0.1:11434</code>。</li>\n</ul>\n<h3 id=\"常用Ollama命令\"><a href=\"#常用Ollama命令\" class=\"headerlink\" title=\"常用Ollama命令\"></a>常用Ollama命令</h3><ul>\n<li><strong>serve</strong>: 启动Ollama<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama serve<br></code></pre></td></tr></table></figure></li>\n<li><strong>create</strong>: 从Modelfile创建模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama create &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>show</strong>: 显示模型信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama show &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>run</strong>: 运行模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama run &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>pull</strong>: 从注册表拉取模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama pull &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>push</strong>: 将模型推送到注册表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama push &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>list</strong>: 列出所有模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama list models<br></code></pre></td></tr></table></figure></li>\n<li><strong>cp</strong>: 复制模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">cp</span> &lt;source_model&gt; &lt;destination_model&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>rm</strong>: 删除模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">rm</span> &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>help</strong>: 获取命令帮助<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">help</span> &lt;<span class=\"hljs-built_in\">command</span>&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Mac上使用Ollama和AnythingLLM部署Llama3模型\"><a href=\"#Mac上使用Ollama和AnythingLLM部署Llama3模型\" class=\"headerlink\" title=\"Mac上使用Ollama和AnythingLLM部署Llama3模型\"></a>Mac上使用Ollama和AnythingLLM部署Llama3模型</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><h4 id=\"1-安装Ollama\"><a href=\"#1-安装Ollama\" class=\"headerlink\" title=\"1. 安装Ollama\"></a>1. 安装Ollama</h4><ul>\n<li><strong>访问Ollama官网</strong>: <a href=\"https://ollama.com/\">https://ollama.com/</a> 注册并下载适用于macOS的安装包。</li>\n<li><strong>安装Ollama</strong>: 双击下载的安装包并按照提示完成安装。</li>\n<li><strong>验证安装</strong>: 在终端中运行以下命令，确保Ollama安装成功：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-下载和运行Llama-3模型\"><a href=\"#2-下载和运行Llama-3模型\" class=\"headerlink\" title=\"2. 下载和运行Llama 3模型\"></a>2. 下载和运行Llama 3模型</h4><ul>\n<li><strong>运行模型</strong>: 使用以下命令启动Llama 3模型：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama run llama3<br></code></pre></td></tr></table></figure>\n如果本地没有Llama 3模型，Ollama会自动下载模型。</li>\n</ul>\n<h4 id=\"3-配置AnythingLLM\"><a href=\"#3-配置AnythingLLM\" class=\"headerlink\" title=\"3. 配置AnythingLLM\"></a>3. 配置AnythingLLM</h4><p>  AngthingLLM官网：<a href=\"https://useanything.com/\">https://useanything.com</a><br>  同样的选择对应的系统版本即可<br>  在配置里配 LLM Preference，LLM provider选择ollama，URL填写默认地址，后面的模型选择llama3，token填4096</p>\n<h4 id=\"4-测试部署\"><a href=\"#4-测试部署\" class=\"headerlink\" title=\"4. 测试部署\"></a>4. 测试部署</h4><ul>\n<li><strong>验证运行状态</strong>: 通过浏览器访问<code>http://127.0.0.1:11434</code>。</li>\n</ul>\n<h3 id=\"常用Ollama命令\"><a href=\"#常用Ollama命令\" class=\"headerlink\" title=\"常用Ollama命令\"></a>常用Ollama命令</h3><ul>\n<li><strong>serve</strong>: 启动Ollama<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama serve<br></code></pre></td></tr></table></figure></li>\n<li><strong>create</strong>: 从Modelfile创建模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama create &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>show</strong>: 显示模型信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama show &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>run</strong>: 运行模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama run &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>pull</strong>: 从注册表拉取模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama pull &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>push</strong>: 将模型推送到注册表<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama push &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>list</strong>: 列出所有模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama list models<br></code></pre></td></tr></table></figure></li>\n<li><strong>cp</strong>: 复制模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">cp</span> &lt;source_model&gt; &lt;destination_model&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>rm</strong>: 删除模型<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">rm</span> &lt;model_name&gt;<br></code></pre></td></tr></table></figure></li>\n<li><strong>help</strong>: 获取命令帮助<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ollama <span class=\"hljs-built_in\">help</span> &lt;<span class=\"hljs-built_in\">command</span>&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"hello theme","date":"2024-05-18T11:34:45.000Z","_content":"对个人博客的主题进行更换。\n\n## 步骤简介\n\n1. 进入hexo官网挑选自己喜欢的主题 https://hexo.io/themes/\n2. 确定选择icarus主题，下载icarus主题 https://github.com/ppoffice/hexo-theme-icarus\n3. 更换配置文件 https://github.com/ppoffice/hexo-theme-icarus\n\n## 遇到的问题\n\nhexo clean时报错 prism_plugin\n\n**现象**\n\n```\nERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20\n```\n\n**解决**\n\n在_config.yml文件中增加下面代码\n\n```\nprism_plugin:\nmode: 'preprocess' # realtime/preprocess\ntheme: 'default'\nline_number: false # default false\n```\n\n","source":"_posts/hello-theme.md","raw":"---\ntitle: hello theme\ndate: 2024-05-18 19:34:45\ntags: hexo \n---\n对个人博客的主题进行更换。\n\n## 步骤简介\n\n1. 进入hexo官网挑选自己喜欢的主题 https://hexo.io/themes/\n2. 确定选择icarus主题，下载icarus主题 https://github.com/ppoffice/hexo-theme-icarus\n3. 更换配置文件 https://github.com/ppoffice/hexo-theme-icarus\n\n## 遇到的问题\n\nhexo clean时报错 prism_plugin\n\n**现象**\n\n```\nERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20\n```\n\n**解决**\n\n在_config.yml文件中增加下面代码\n\n```\nprism_plugin:\nmode: 'preprocess' # realtime/preprocess\ntheme: 'default'\nline_number: false # default false\n```\n\n","slug":"hello-theme","published":1,"updated":"2024-07-03T06:46:41.372Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3q000ryoim0kvt2694","content":"<p>对个人博客的主题进行更换。</p>\n<h2 id=\"步骤简介\"><a href=\"#步骤简介\" class=\"headerlink\" title=\"步骤简介\"></a>步骤简介</h2><ol>\n<li>进入hexo官网挑选自己喜欢的主题 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>确定选择icarus主题，下载icarus主题 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n<li>更换配置文件 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>hexo clean时报错 prism_plugin</p>\n<p><strong>现象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决</strong></p>\n<p>在_config.yml文件中增加下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">prism_plugin:<br>mode: &#x27;preprocess&#x27; # realtime/preprocess<br>theme: &#x27;default&#x27;<br>line_number: false # default false<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>对个人博客的主题进行更换。</p>\n<h2 id=\"步骤简介\"><a href=\"#步骤简介\" class=\"headerlink\" title=\"步骤简介\"></a>步骤简介</h2><ol>\n<li>进入hexo官网挑选自己喜欢的主题 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>确定选择icarus主题，下载icarus主题 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n<li>更换配置文件 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">https://github.com/ppoffice/hexo-theme-icarus</a></li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>hexo clean时报错 prism_plugin</p>\n<p><strong>现象</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">ERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决</strong></p>\n<p>在_config.yml文件中增加下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">prism_plugin:<br>mode: &#x27;preprocess&#x27; # realtime/preprocess<br>theme: &#x27;default&#x27;<br>line_number: false # default false<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-07-03T06:46:41.372Z","updated":"2024-07-03T06:46:41.374Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3s000uyoim2r5eavsg","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"mac上MySQL启动后立即停止","date":"2024-05-30T03:36:11.000Z","_content":"## 问题描述：\n在System Preference中，进入MySQL，当点击Start MySQL Server时，左侧的红色变成绿色后，立即又变成了红色，启动后立即又停止了!\n## 解决方法：\n在命令行中进行操作\n### 启动\n`sudo /usr/local/mysql/support-files/mysql.server start`\n### 停止\n`sudo /usr/local/mysql/support-files/mysql.server stop`\n### 重启\n`sudo /usr/local/mysql/support-files/mysql.server restart`\n","source":"_posts/mysql.md","raw":"---\ntitle: mac上MySQL启动后立即停止\ndate: 2024-05-30 11:36:11\ntags: mysql\n---\n## 问题描述：\n在System Preference中，进入MySQL，当点击Start MySQL Server时，左侧的红色变成绿色后，立即又变成了红色，启动后立即又停止了!\n## 解决方法：\n在命令行中进行操作\n### 启动\n`sudo /usr/local/mysql/support-files/mysql.server start`\n### 停止\n`sudo /usr/local/mysql/support-files/mysql.server stop`\n### 重启\n`sudo /usr/local/mysql/support-files/mysql.server restart`\n","slug":"mysql","published":1,"updated":"2024-07-03T06:46:41.375Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3u000xyoimar1ue2ru","content":"<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>在System Preference中，进入MySQL，当点击Start MySQL Server时，左侧的红色变成绿色后，立即又变成了红色，启动后立即又停止了!</p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><p>在命令行中进行操作</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server stop</code></p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server restart</code></p>\n","excerpt":"","more":"<h2 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h2><p>在System Preference中，进入MySQL，当点击Start MySQL Server时，左侧的红色变成绿色后，立即又变成了红色，启动后立即又停止了!</p>\n<h2 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h2><p>在命令行中进行操作</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server start</code></p>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server stop</code></p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p><code>sudo /usr/local/mysql/support-files/mysql.server restart</code></p>\n"},{"title":"test-hexo-admin","author":"晨星","date":"2024-06-09T06:57:00.000Z","_content":"this is a test-hexo-admin page!\n\nHexo Admin 是 Hexo 的一个插件，可以为 Hexo 博客提供一个图形化的管理界面，使得管理和发布文章更加便捷。下面是如何安装和使用 Hexo Admin 的详细步骤：\n\n### 安装 Hexo Admin\n1. **确保你已经安装了 Hexo**：\n   你需要先安装 Node.js 和 Hexo。如果还没有安装，可以使用以下命令：\n   ```bash\n   npm install -g hexo-cli\n   hexo init my-blog\n   cd my-blog\n   npm install\n   ```\n\n2. **安装 Hexo Admin 插件**：\n   在你的 Hexo 项目目录中，使用以下命令安装 Hexo Admin：\n   ```bash\n   npm install --save hexo-admin\n   ```\n\n### 配置 Hexo Admin\n3. **更新配置文件**：\n   打开你的 Hexo 项目目录下的 `_config.yml` 文件，添加以下内容来启用 Hexo Admin：\n   ```yaml\n   plugins:\n     - hexo-admin\n   ```\n\n### 启动 Hexo Admin\n4. **启动本地服务器**：\n   使用以下命令启动 Hexo 本地服务器：\n   ```bash\n   hexo server\n   ```\n\n5. **访问 Hexo Admin 界面**：\n   打开浏览器，访问 `http://localhost:4000/admin/`，你应该能看到 Hexo Admin 的管理界面。\n\n### 使用 Hexo Admin\n在 Hexo Admin 的界面中，你可以：\n- **新建文章**：点击 \"New Post\" 按钮，填写标题和内容，然后保存。\n- **编辑文章**：在文章列表中选择一个文章进行编辑。\n- **管理文件**：可以上传和管理你的静态资源文件，如图片等。\n\n### 注意事项\n- 确保你已经安装了所有必要的 Node.js 依赖包，并且 Hexo 能够正常运行。\n- Hexo Admin 插件会自动添加到 Hexo 的插件系统中，不需要额外的配置。\n- 为了安全起见，不建议将 Hexo Admin 部署在公网上，因为它没有内置的认证机制。","source":"_posts/test-hexo-admin.md","raw":"title: test-hexo-admin\nauthor: 晨星\ntags:\n  - hexo\ncategories: []\ndate: 2024-06-09 14:57:00\n---\nthis is a test-hexo-admin page!\n\nHexo Admin 是 Hexo 的一个插件，可以为 Hexo 博客提供一个图形化的管理界面，使得管理和发布文章更加便捷。下面是如何安装和使用 Hexo Admin 的详细步骤：\n\n### 安装 Hexo Admin\n1. **确保你已经安装了 Hexo**：\n   你需要先安装 Node.js 和 Hexo。如果还没有安装，可以使用以下命令：\n   ```bash\n   npm install -g hexo-cli\n   hexo init my-blog\n   cd my-blog\n   npm install\n   ```\n\n2. **安装 Hexo Admin 插件**：\n   在你的 Hexo 项目目录中，使用以下命令安装 Hexo Admin：\n   ```bash\n   npm install --save hexo-admin\n   ```\n\n### 配置 Hexo Admin\n3. **更新配置文件**：\n   打开你的 Hexo 项目目录下的 `_config.yml` 文件，添加以下内容来启用 Hexo Admin：\n   ```yaml\n   plugins:\n     - hexo-admin\n   ```\n\n### 启动 Hexo Admin\n4. **启动本地服务器**：\n   使用以下命令启动 Hexo 本地服务器：\n   ```bash\n   hexo server\n   ```\n\n5. **访问 Hexo Admin 界面**：\n   打开浏览器，访问 `http://localhost:4000/admin/`，你应该能看到 Hexo Admin 的管理界面。\n\n### 使用 Hexo Admin\n在 Hexo Admin 的界面中，你可以：\n- **新建文章**：点击 \"New Post\" 按钮，填写标题和内容，然后保存。\n- **编辑文章**：在文章列表中选择一个文章进行编辑。\n- **管理文件**：可以上传和管理你的静态资源文件，如图片等。\n\n### 注意事项\n- 确保你已经安装了所有必要的 Node.js 依赖包，并且 Hexo 能够正常运行。\n- Hexo Admin 插件会自动添加到 Hexo 的插件系统中，不需要额外的配置。\n- 为了安全起见，不建议将 Hexo Admin 部署在公网上，因为它没有内置的认证机制。","slug":"test-hexo-admin","published":1,"updated":"2024-07-03T06:46:41.377Z","comments":1,"layout":"post","photos":[],"_id":"cly5qse3x000yyoim1v7k70z6","content":"<p>this is a test-hexo-admin page!</p>\n<p>Hexo Admin 是 Hexo 的一个插件，可以为 Hexo 博客提供一个图形化的管理界面，使得管理和发布文章更加便捷。下面是如何安装和使用 Hexo Admin 的详细步骤：</p>\n<h3 id=\"安装-Hexo-Admin\"><a href=\"#安装-Hexo-Admin\" class=\"headerlink\" title=\"安装 Hexo Admin\"></a>安装 Hexo Admin</h3><ol>\n<li><p><strong>确保你已经安装了 Hexo</strong>：<br>你需要先安装 Node.js 和 Hexo。如果还没有安装，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g hexo-cli<br>hexo init my-blog<br><span class=\"hljs-built_in\">cd</span> my-blog<br>npm install<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Hexo Admin 插件</strong>：<br>在你的 Hexo 项目目录中，使用以下命令安装 Hexo Admin：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save hexo-admin<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"配置-Hexo-Admin\"><a href=\"#配置-Hexo-Admin\" class=\"headerlink\" title=\"配置 Hexo Admin\"></a>配置 Hexo Admin</h3><ol start=\"3\">\n<li><strong>更新配置文件</strong>：<br>打开你的 Hexo 项目目录下的 <code>_config.yml</code> 文件，添加以下内容来启用 Hexo Admin：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">plugins:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-admin</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"启动-Hexo-Admin\"><a href=\"#启动-Hexo-Admin\" class=\"headerlink\" title=\"启动 Hexo Admin\"></a>启动 Hexo Admin</h3><ol start=\"4\">\n<li><p><strong>启动本地服务器</strong>：<br>使用以下命令启动 Hexo 本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo server<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>访问 Hexo Admin 界面</strong>：<br>打开浏览器，访问 <code>http://localhost:4000/admin/</code>，你应该能看到 Hexo Admin 的管理界面。</p>\n</li>\n</ol>\n<h3 id=\"使用-Hexo-Admin\"><a href=\"#使用-Hexo-Admin\" class=\"headerlink\" title=\"使用 Hexo Admin\"></a>使用 Hexo Admin</h3><p>在 Hexo Admin 的界面中，你可以：</p>\n<ul>\n<li><strong>新建文章</strong>：点击 “New Post” 按钮，填写标题和内容，然后保存。</li>\n<li><strong>编辑文章</strong>：在文章列表中选择一个文章进行编辑。</li>\n<li><strong>管理文件</strong>：可以上传和管理你的静态资源文件，如图片等。</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保你已经安装了所有必要的 Node.js 依赖包，并且 Hexo 能够正常运行。</li>\n<li>Hexo Admin 插件会自动添加到 Hexo 的插件系统中，不需要额外的配置。</li>\n<li>为了安全起见，不建议将 Hexo Admin 部署在公网上，因为它没有内置的认证机制。</li>\n</ul>\n","excerpt":"","more":"<p>this is a test-hexo-admin page!</p>\n<p>Hexo Admin 是 Hexo 的一个插件，可以为 Hexo 博客提供一个图形化的管理界面，使得管理和发布文章更加便捷。下面是如何安装和使用 Hexo Admin 的详细步骤：</p>\n<h3 id=\"安装-Hexo-Admin\"><a href=\"#安装-Hexo-Admin\" class=\"headerlink\" title=\"安装 Hexo Admin\"></a>安装 Hexo Admin</h3><ol>\n<li><p><strong>确保你已经安装了 Hexo</strong>：<br>你需要先安装 Node.js 和 Hexo。如果还没有安装，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install -g hexo-cli<br>hexo init my-blog<br><span class=\"hljs-built_in\">cd</span> my-blog<br>npm install<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装 Hexo Admin 插件</strong>：<br>在你的 Hexo 项目目录中，使用以下命令安装 Hexo Admin：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save hexo-admin<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"配置-Hexo-Admin\"><a href=\"#配置-Hexo-Admin\" class=\"headerlink\" title=\"配置 Hexo Admin\"></a>配置 Hexo Admin</h3><ol start=\"3\">\n<li><strong>更新配置文件</strong>：<br>打开你的 Hexo 项目目录下的 <code>_config.yml</code> 文件，添加以下内容来启用 Hexo Admin：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">plugins:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-admin</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"启动-Hexo-Admin\"><a href=\"#启动-Hexo-Admin\" class=\"headerlink\" title=\"启动 Hexo Admin\"></a>启动 Hexo Admin</h3><ol start=\"4\">\n<li><p><strong>启动本地服务器</strong>：<br>使用以下命令启动 Hexo 本地服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo server<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>访问 Hexo Admin 界面</strong>：<br>打开浏览器，访问 <code>http://localhost:4000/admin/</code>，你应该能看到 Hexo Admin 的管理界面。</p>\n</li>\n</ol>\n<h3 id=\"使用-Hexo-Admin\"><a href=\"#使用-Hexo-Admin\" class=\"headerlink\" title=\"使用 Hexo Admin\"></a>使用 Hexo Admin</h3><p>在 Hexo Admin 的界面中，你可以：</p>\n<ul>\n<li><strong>新建文章</strong>：点击 “New Post” 按钮，填写标题和内容，然后保存。</li>\n<li><strong>编辑文章</strong>：在文章列表中选择一个文章进行编辑。</li>\n<li><strong>管理文件</strong>：可以上传和管理你的静态资源文件，如图片等。</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保你已经安装了所有必要的 Node.js 依赖包，并且 Hexo 能够正常运行。</li>\n<li>Hexo Admin 插件会自动添加到 Hexo 的插件系统中，不需要额外的配置。</li>\n<li>为了安全起见，不建议将 Hexo Admin 部署在公网上，因为它没有内置的认证机制。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cly5qse320004yoimbwo38l5d","category_id":"cly5qse370006yoim7s0h1ttt","_id":"cly5qse3j000gyoim1ezv6cic"},{"post_id":"cly5qse340005yoimaafjhui3","category_id":"cly5qse3e000byoim6pv88jav","_id":"cly5qse3o000nyoim4cufak8d"},{"post_id":"cly5qse380007yoimhod65bw5","category_id":"cly5qse3k000iyoim0vof14ap","_id":"cly5qse3r000syoim0gvv32h1"},{"post_id":"cly5qse3p000pyoim3iuifcpq","category_id":"cly5qse3s000tyoim9bx87lrp","_id":"cly5qse400011yoimb9mocrlb"}],"PostTag":[{"post_id":"cly5qse2o0001yoim3phf8lla","tag_id":"cly5qse2z0003yoimb65b82bd","_id":"cly5qse3h000eyoim4r788c6e"},{"post_id":"cly5qse2o0001yoim3phf8lla","tag_id":"cly5qse390008yoim0b3l1rdu","_id":"cly5qse3k000hyoimbjh89vd2"},{"post_id":"cly5qse2v0002yoim0g2hg8xz","tag_id":"cly5qse3f000cyoim41a16a2c","_id":"cly5qse3n000lyoimfs3s20cp"},{"post_id":"cly5qse320004yoimbwo38l5d","tag_id":"cly5qse3k000jyoima8hrhgti","_id":"cly5qse3q000qyoim7zmw6szc"},{"post_id":"cly5qse340005yoimaafjhui3","tag_id":"cly5qse3o000oyoim22za8srg","_id":"cly5qse3u000wyoima75fa5u9"},{"post_id":"cly5qse380007yoimhod65bw5","tag_id":"cly5qse3u000vyoimbn5x007n","_id":"cly5qse3z0010yoimfzhg9p6p"},{"post_id":"cly5qse3b0009yoimhh2449l3","tag_id":"cly5qse3z000zyoim7m67e5ze","_id":"cly5qse400013yoimh5z92jgu"},{"post_id":"cly5qse3c000ayoim26fc3qt4","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse430015yoimewpg1pyk"},{"post_id":"cly5qse3g000dyoimebsi9ry9","tag_id":"cly5qse3o000oyoim22za8srg","_id":"cly5qse440017yoim2lfz5tbi"},{"post_id":"cly5qse3i000fyoim3dfgbb4q","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse46001ayoimfce09466"},{"post_id":"cly5qse3i000fyoim3dfgbb4q","tag_id":"cly5qse3o000oyoim22za8srg","_id":"cly5qse46001byoimgenzgihm"},{"post_id":"cly5qse3l000kyoimbwqu7rip","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse46001dyoim1bqs2fx1"},{"post_id":"cly5qse3n000myoimcxwk308b","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse47001fyoimdtbsgpfe"},{"post_id":"cly5qse3p000pyoim3iuifcpq","tag_id":"cly5qse46001eyoim09088o2b","_id":"cly5qse48001hyoimda4jf9es"},{"post_id":"cly5qse3q000ryoim0kvt2694","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse48001jyoimd4f35b72"},{"post_id":"cly5qse3u000xyoimar1ue2ru","tag_id":"cly5qse48001iyoim733l0fct","_id":"cly5qse49001lyoimalaj78l1"},{"post_id":"cly5qse3x000yyoim1v7k70z6","tag_id":"cly5qse400012yoimcuhkh8pl","_id":"cly5qse4a001myoimhett2vdf"}],"Tag":[{"name":"github","_id":"cly5qse2z0003yoimb65b82bd"},{"name":"ssh","_id":"cly5qse390008yoim0b3l1rdu"},{"name":"launcher","_id":"cly5qse3f000cyoim41a16a2c"},{"name":"file","_id":"cly5qse3k000jyoima8hrhgti"},{"name":"git","_id":"cly5qse3o000oyoim22za8srg"},{"name":"adb","_id":"cly5qse3u000vyoimbn5x007n"},{"name":"django","_id":"cly5qse3z000zyoim7m67e5ze"},{"name":"hexo","_id":"cly5qse400012yoimcuhkh8pl"},{"name":"ollama","_id":"cly5qse46001eyoim09088o2b"},{"name":"mysql","_id":"cly5qse48001iyoim733l0fct"}]}}