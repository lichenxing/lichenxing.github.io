{"posts":[{"title":"SSH Key","text":"问题现象：12345678910111213141516171819hexo dINFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master ddf123e] Site updated: 2024-05-18 18:16:33 2 files changed, 2 insertions(+), 2 deletions(-)/Users/oo/.ssh/config line 14: keyword hostname extra arguments at end of line/Users/oo/.ssh/config line 17: keyword identityfile extra arguments at end of line/Users/oo/.ssh/config: terminating, 2 bad configuration options致命错误：无法读取远程仓库。请确认您有正确的访问权限并且仓库存在。FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failed at ChildProcess.&lt;anonymous&gt; (/Users/oo/myblogs/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21) at ChildProcess.emit (node:events:520:28) at ChildProcess._handle.onexit (node:internal/child_process:294:12) 问题分析：根据问题现象进行分析，Git上传代码时鉴权失败，SSH 配置文件参数报错，SSH 配置文件解析失败，从而无法进行 Git 部署。 解决办法：检查配置文件，重新生成SSH Key。 在 Mac 上为 GitHub 设置 SSH Key 需要按照以下步骤操作： 1. 检查现有的 SSH Key首先，检查你的 Mac 是否已经有 SSH Key。打开终端（Terminal），输入以下命令： 1ls -al ~/.ssh 这将列出 ~/.ssh 目录下的文件。如果你看到 id_rsa 和 id_rsa.pub 文件，这表示你已经有 SSH Key，可以跳过生成新 Key 的步骤。 2. 生成新的 SSH Key如果你没有现有的 SSH Key，或者想生成一个新的，可以使用以下命令： 1ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; 替换 your_email@example.com 为你在 GitHub 上使用的电子邮件地址。然后，系统会提示你指定保存位置和文件名。默认情况下，它会保存在 ~/.ssh/id_rsa。 接着，它会提示你输入一个 passphrase（密码短语）。你可以选择设置一个安全的密码短语，也可以直接按 Enter 跳过。 3. 启动 SSH 代理确保 SSH 代理正在运行，并将你的 SSH Key 添加到 SSH 代理中。输入以下命令： 1eval &quot;$(ssh-agent -s)&quot; 这将启动 SSH 代理。然后，添加你的 SSH Key 到代理中： 1ssh-add ~/.ssh/id_rsa 4. 添加 SSH Key 到 GitHub现在你需要将公钥添加到你的 GitHub 账户中。首先，复制你的 SSH 公钥： 1pbcopy &lt; ~/.ssh/id_rsa.pub 这会将公钥复制到剪贴板。 接着，打开 GitHub，登录到你的账户，按照以下步骤操作： 点击右上角的个人头像，然后选择 “Settings”。 在左侧菜单中，选择 “SSH and GPG keys”。 点击 “New SSH key” 按钮。 在 “Title” 字段中输入一个描述性名称（例如 “My MacBook”）。 在 “Key” 字段中粘贴你复制的公钥。 点击 “Add SSH key” 按钮。 5. 测试连接最后，测试是否正确配置了 SSH Key，使用以下命令： 1ssh -T git@github.com 如果一切配置正确，你会看到一条欢迎信息，类似： 1Hi username! You've successfully authenticated, but GitHub does not provide shell access. 这表示你已经成功通过 SSH 连接到 GitHub。 总结以上步骤涵盖了在 Mac 上为 GitHub 设置 SSH Key 的过程。从生成 SSH Key，到配置 SSH 代理，最后添加到 GitHub 账户并测试连接。按照这些步骤操作，你应该能够顺利配置并使用 SSH Key 来进行 Git 操作。","link":"/2024/05/19/SSH-Key/"},{"title":"app-launcher","text":"通过 adb shell 命令直接设置默认启动器 确认设备连接adb devices 列出所有已安装的包名adb shell pm list packages 查找应用主活动adb shell dumpsys package 应用包名 | grep -A 100 'Activity' adb shell dumpsys package com.rokid.glass.dxeducation | grep -A 100 'Activity' 设置launcheradb shell cmd package set-home-activity 应用包名/.activity.主活动 adb shell cmd package set-home-activity com.rokid.glass.dxeducation/.activity.UserGuideActivity","link":"/2024/06/02/app-launcher/"},{"title":"git reset","text":"要将代码回退到之前的某一次提交，你可以使用 git reset 命令。这将会撤销你的当前提交，并将代码库的 HEAD 指针移动到你指定的提交，但不会改变你的本地文件。如果你已经推送了这些更改到远程仓库，你可能需要注意，在回退后强制推送到远程仓库。以下是一些步骤： 1.确定要回退到的提交哈希值: 使用 git log 查看提交历史，找到你想要回退到的提交的哈希值1git log 2.执行回退操作: 使用 git reset –hard 将 HEAD 指针重置到你选择的提交1git reset --hard &lt;commit-hash&gt; 这将会重置你的工作目录和暂存区，使其与指定提交一致。 3.如果需要，强制推送到远程仓库: 如果你已经推送了这些更改到远程仓库，并且要修改远程仓库的历史记录，你可能需要使用 -f 或 –force 选项来强制推送。1git push origin &lt;branch-name&gt; --force 请注意，强制推送可能会导致其他开发者的工作出现问题，因为它改变了远程仓库的历史记录。请确保你的操作是必要的，并在团队中告知其他成员。通过这些步骤，你应该能够将代码回退到之前的某一次提交。请确保在执行任何重要操作之前备份你的工作目录。","link":"/2024/05/18/git-reset/"},{"title":"folderSync","text":"使用 SFTP 协议在 macOS 和 Android 设备之间进行文件同步，不需要依赖云存储服务。你可以通过设置 macOS 上的 SFTP 服务器和在 Android 设备上配置 FolderSync 应用来实现。以下是详细的步骤： 在 macOS 上设置 SFTP 服务器 在 Mac 上，选取苹果菜单 &gt;「系统偏好设置」，点按「共享」，然后选择「远程登录」。 选择「远程登录」复选框。 选择「所有用户」：您电脑的任何用户及网络上的任何人都可以登录。 注意： 远程登录下的这行小字中的信息非常重要！！！ 若要远程登录这台电脑，请键入“ssh oo@10.90.0.199”。 这里包含了你登录这个 sftp 服务器要用到的重要信息，地址是 10.90.0.199，用户名是 oo，而密码就是你开机时解锁用的密码。在 Android 上（iOS 同理）就可以用支持 sftp 协议的文件管理应用登录到这台 macOS 管理文件啦。 在 Android 设备上配置 FolderSync1.下载并安装 FolderSync： 从 Google Play 商店下载并安装 FolderSync 应用。 2.配置 SFTP 账户： 打开 FolderSync 应用。 进入“账户”选项卡，点击右下角的“+”按钮添加一个新的账户。 在“账户类型”中选择“SFTP”。 3.填写 SFTP 账户详细信息： 主机名： 输入 macOS 的本地 IP 地址。我的就是10.90.0.199 用户名： 输入你在 macOS 上的用户名。我的就是oo 密码： 输入你在 macOS 上的用户密码。 远程路径： 输入你希望同步的 macOS 文件夹路径（例如 /Users/yourusername/Documents）。 端口： 默认端口为 22，不需要更改。 4.测试连接： 填写完所有必要信息后，点击“测试连接”按钮，确保所有设置正确且可以连接到 macOS。 5.创建同步任务： 转到“同步”选项卡，点击右下角的“+”按钮创建一个新的同步任务。 选择刚才配置好的 SFTP 账户，并选择你希望同步的远程文件夹。 选择本地文件夹，你可以选择 Android 设备上的任何文件夹。 配置同步选项，例如同步方向（单向或双向）、同步频率等。 注意事项 确保 macOS 和 Android 设备都在同一个局域网内，以便通过本地 IP 地址进行连接。 确保 macOS 上的防火墙允许 SSH 服务通过。 根据需要调整 FolderSync 应用中的同步频率和条件（如仅在 Wi-Fi 下同步等），以节省移动数据流量和电量。","link":"/2024/05/18/folderSync/"},{"title":"hello domain","text":"将hexo博客部署到个人域名上 域名购买我是在腾讯云买的 首年45元 价格相对实惠购买的基本流程就是进入腾讯云官网进入控制台进行域名注册然后付钱买选择的域名就行https://www.tencentcloud.com/zh/products/domain 域名设置DNS解析 进入控制台 进入域名控制台 进行解析设置，添加这两条记录注意：这里的IP是ping yourname.github.io 创建 CNAME 文件在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是你购买的域名比如我的域名是chenxing.live 重新部署123hexo cleanhexo g hexo d 最终验证输入自己的域名地址,比如我的就是这个 https://chenxing.live 进行验证。","link":"/2024/05/18/hello-domain/"},{"title":"hello django","text":"问题描述from django.conf.urls import url # 用 url 需要引入ImportError: cannot import name ‘url’ from ‘django.conf.urls’ (/Users/oo/PycharmProjects/djangolearn001/.venv/lib/python3.9/site-packages/django/conf/urls/init.py) 问题原因这是因为在Django 4.0及更高版本中，django.conf.urls.url已被移除。取而代之的是使用django.urls.path和django.urls.re_path。 问题解决将原来的url()调用替换为path()或re_path() 12345from django.urls import path, re_pathfrom . import viewsurlpatterns = [path('example/', views.example_view, name='example'),re_path(r'^example-regex/$', views.example_view, name='example-regex'),]","link":"/2024/06/02/hello-django/"},{"title":"hello github","text":"将个人博客源码也托管到github关键点：分支切换 找到隐藏文件 配置步骤1.本地电脑创建文件夹并进入该文件夹12mkdir chenxingBlogscd chenxingBlogs 2.将静态站托管仓库克隆回本地1git clone https://github.com/lichenxing/lichenxing.github.io.git 3.新建分支并切换12# 新建并切换分支git checkout -b source 备注：如果只是切换分支 git checkout 分支名。 4.清理文件删除hexo自动生成的静态文件（注意保留.git目录） 在这一步要注意，.git文件是隐藏文件，mac电脑要看到隐藏文件需要【Command + Shift +】快捷命令打开。 5.添加hexo源码将个人博客源码目录下的文件复制到此处。（注意删除原来的.git目录）。 6.同步代码到github123git add -Agit commit -m '初始化自动部署分支'git push --set-upstream origin source 7.登录github检查自己的仓库中是否已经有了源码的分支检查是否有「初始化自动部署分支」的提交。 参考文档https://www.idzd.top/archives/1430/ 注意事项 在配置时或者操作时需要注意一下分支名称是否正确，如果不正确需要切换分支。 mac电脑显示隐藏文件快捷键：Command + Shift + . 在Finder打开你想要查看隐藏文件的文件夹，然后使用快捷键Command + Shift + .，即可查看当下文件夹中的隐藏文件。 要恢复隐藏文件的话再次按shift+cmmand+. ，即可恢复文件的隐藏状态","link":"/2024/05/18/hello-github/"},{"title":"hello hexo","text":"Hexo+Github搭建个人博客 1. 介绍这是首次安装hexo成功后创建的test文档！ 2. 常用操作通过终端cd 进入自己创建的myblogs文件夹然后执行hexo clean 清静态缓存hexo g 生成html文件hexo d 部署到Githubhexo s 启动服务 关闭 control+c 3. 注意事项hexo 首次部署到github时 需要输入账号密码 ，这里的账号密码是指github中的Personal access tokens可参考https://blog.csdn.net/qq_21040559/article/details/122621179 4. 参考博文：https://blog.csdn.net/qq_21040559/article/details/122621179https://hexo.io/zh-cn/docs/commandshttps://xie.infoq.cn/article/90dc08c57463df3a1b2ad960fhttps://yanglukuan.github.io/2017/08/17/firstblog/","link":"/2024/05/18/hello-hexo/"},{"title":"hello menu","text":"自定义修改icarus的菜单，增删改新的菜单选项比如增加关于、相册等 修改主题的配置文件_config.icarus.yml1234567menu:主页: /归档: /archives分类: /categories标签: /tags相册: /photo关于: /about 注意：后面路径为对应页面的路径，自己需要对照着在Git控制台汇总创建对应页面 在Git控制台中创建对应页面从博客网站的根目录打开Git控制台，新建对应页面，例如： 12hexo new page &quot;about&quot;hexo new page &quot;photo&quot; 继续在控制台键入命令123hexo clhexo ghexo s 重新加载博客主页验证浏览器打开 http://localhost:4000/ 新创建的菜单选项就成功了。","link":"/2024/05/18/hello-menu/"},{"title":"hello adb","text":"由于在干活过程中需要经常使用adb，所以抽空把adb常用的一些命令总结一下： ADB（Android Debug Bridge）是一种功能强大的工具，可以用来管理和控制Android设备。以下是一些常用的ADB命令及其简要说明： 基本命令 连接设备 1adb devices 列出所有连接的Android设备的序列号。 启动ADB服务器 1adb start-server 启动ADB后台服务。 停止ADB服务器 1adb kill-server 停止ADB后台服务。 文件操作 推送文件到设备 1adb push &lt;本地文件路径&gt; &lt;设备目标路径&gt; 将文件从计算机推送到设备，例如： 1adb push example.txt /sdcard/Download/ 从设备拉取文件 1adb pull &lt;设备文件路径&gt; &lt;本地目标路径&gt; 从设备拉取文件到计算机，例如： 1adb pull /sdcard/Download/example.txt ./ 应用管理 安装应用 1adb install &lt;apk文件路径&gt; 安装APK文件到设备，例如： 1adb install example.apk 卸载应用 1adb uninstall &lt;应用包名&gt; 卸载设备上的应用，例如： 1adb uninstall com.example.app 列出已安装的应用 1adb shell pm list packages 列出设备上已安装的所有应用包名。 设备控制 重启设备 1adb reboot 重启Android设备。 重启到引导加载程序 1adb reboot bootloader 重启设备到引导加载程序模式。 进入恢复模式 1adb reboot recovery 重启设备到恢复模式。 调试与日志 启动Shell 1adb shell 启动设备上的命令行shell。 查看日志 1adb logcat 查看设备的系统日志。 其他 获取设备信息 1adb shell getprop 获取设备的属性信息。 获取设备屏幕截图 12adb shell screencap /sdcard/screenshot.pngadb pull /sdcard/screenshot.png 获取设备的屏幕截图并拉取到本地。 录制屏幕 12adb shell screenrecord /sdcard/demo.mp4adb pull /sdcard/demo.mp4 录制设备的屏幕并拉取到本地。","link":"/2024/05/27/hello-adb/"},{"title":"hello-ollama","text":"Mac上使用Ollama和AnythingLLM部署Llama3模型安装步骤1. 安装Ollama 访问Ollama官网: https://ollama.com/ 注册并下载适用于macOS的安装包。 安装Ollama: 双击下载的安装包并按照提示完成安装。 验证安装: 在终端中运行以下命令，确保Ollama安装成功：1ollama 2. 下载和运行Llama 3模型 运行模型: 使用以下命令启动Llama 3模型：1ollama run llama3 如果本地没有Llama 3模型，Ollama会自动下载模型。 3. 配置AnythingLLM AngthingLLM官网：https://useanything.com 同样的选择对应的系统版本即可 在配置里配 LLM Preference，LLM provider选择ollama，URL填写默认地址，后面的模型选择llama3，token填4096 4. 测试部署 验证运行状态: 通过浏览器访问http://127.0.0.1:11434。 常用Ollama命令 serve: 启动Ollama1ollama serve create: 从Modelfile创建模型1ollama create &lt;model_name&gt; show: 显示模型信息1ollama show &lt;model_name&gt; run: 运行模型1ollama run &lt;model_name&gt; pull: 从注册表拉取模型1ollama pull &lt;model_name&gt; push: 将模型推送到注册表1ollama push &lt;model_name&gt; list: 列出所有模型1ollama list models cp: 复制模型1ollama cp &lt;source_model&gt; &lt;destination_model&gt; rm: 删除模型1ollama rm &lt;model_name&gt; help: 获取命令帮助1ollama help &lt;command&gt;","link":"/2024/06/05/hello-ollama/"},{"title":"hello theme","text":"对个人博客的主题进行更换。 步骤简介 进入hexo官网挑选自己喜欢的主题 https://hexo.io/themes/ 确定选择icarus主题，下载icarus主题 https://github.com/ppoffice/hexo-theme-icarus 更换配置文件 https://github.com/ppoffice/hexo-theme-icarus 遇到的问题hexo clean时报错 prism_plugin 现象 1ERROR Plugin load failed: hexo-prism-plugin Error: `prism_plugin` options should be added to _config.yml file at /Users/oo/myblogs/node_modules/hexo-prism-plugin/src/index.js:70:9 at /Users/oo/myblogs/node_modules/hexo/dist/hexo/index.js:255:20 解决 在_config.yml文件中增加下面代码 1234prism_plugin:mode: 'preprocess' # realtime/preprocesstheme: 'default'line_number: false # default false","link":"/2024/05/18/hello-theme/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/06/19/hello-world/"},{"title":"mac上MySQL启动后立即停止","text":"问题描述：在System Preference中，进入MySQL，当点击Start MySQL Server时，左侧的红色变成绿色后，立即又变成了红色，启动后立即又停止了! 解决方法：在命令行中进行操作 启动sudo /usr/local/mysql/support-files/mysql.server start 停止sudo /usr/local/mysql/support-files/mysql.server stop 重启sudo /usr/local/mysql/support-files/mysql.server restart","link":"/2024/05/30/mysql/"},{"title":"test-hexo-admin","text":"this is a test-hexo-admin page! Hexo Admin 是 Hexo 的一个插件，可以为 Hexo 博客提供一个图形化的管理界面，使得管理和发布文章更加便捷。下面是如何安装和使用 Hexo Admin 的详细步骤： 安装 Hexo Admin 确保你已经安装了 Hexo：你需要先安装 Node.js 和 Hexo。如果还没有安装，可以使用以下命令： 1234npm install -g hexo-clihexo init my-blogcd my-blognpm install 安装 Hexo Admin 插件：在你的 Hexo 项目目录中，使用以下命令安装 Hexo Admin： 1npm install --save hexo-admin 配置 Hexo Admin 更新配置文件：打开你的 Hexo 项目目录下的 _config.yml 文件，添加以下内容来启用 Hexo Admin：12plugins: - hexo-admin 启动 Hexo Admin 启动本地服务器：使用以下命令启动 Hexo 本地服务器： 1hexo server 访问 Hexo Admin 界面：打开浏览器，访问 http://localhost:4000/admin/，你应该能看到 Hexo Admin 的管理界面。 使用 Hexo Admin在 Hexo Admin 的界面中，你可以： 新建文章：点击 “New Post” 按钮，填写标题和内容，然后保存。 编辑文章：在文章列表中选择一个文章进行编辑。 管理文件：可以上传和管理你的静态资源文件，如图片等。 注意事项 确保你已经安装了所有必要的 Node.js 依赖包，并且 Hexo 能够正常运行。 Hexo Admin 插件会自动添加到 Hexo 的插件系统中，不需要额外的配置。 为了安全起见，不建议将 Hexo Admin 部署在公网上，因为它没有内置的认证机制。","link":"/2024/06/09/test-hexo-admin/"},{"title":"hello-git","text":"最近在搭博客过程中经常用到git，把之前学习git的内容再复习一下 Git是一种开源的分布式版本控制系统，主要用于跟踪和管理源代码的更改。它由Linus Torvalds在2005年开发，最初是为了支持Linux内核开发。Git的设计目标是高效处理大规模项目，同时能够保持速度和数据完整性。以下是对Git的一些关键特性的介绍： 1. 分布式版本控制Git与集中式版本控制系统（如SVN、CVS）不同，它是分布式的。这意味着每个开发者的工作目录都是一个完整的代码仓库，包括所有的历史版本记录。这种设计使得Git具有以下优势： 离线工作能力：开发者可以在本地进行提交、创建分支等操作，即使没有网络连接。 备份和恢复：由于每个克隆的仓库都包含完整的历史记录，数据的冗余性提高了可靠性。 2. 强大的分支模型Git的分支（branch）管理非常轻量且灵活，允许开发者快速创建、合并和删除分支。常见的分支策略包括： 功能分支（Feature Branch）：每个新功能都在一个独立的分支上开发，完成后再合并到主分支。 修复分支（Hotfix Branch）：用于紧急修复生产环境中的问题。 发布分支（Release Branch）：在发布新版本前进行的最后调试和修复工作。 3. 高效的合并和冲突解决Git使用三方合并（Three-way Merge）算法，可以高效地合并不同分支的代码变更。即使在多人协作中出现冲突，Git也提供了丰富的工具来帮助解决冲突，例如： 命令行工具：如git merge和git rebase。 图形化工具：如GitKraken、Sourcetree等。 4. 提交和历史记录每次提交（commit）都包含一组文件的快照及其元数据，如作者、时间戳和提交信息。提交记录可以通过哈希值唯一标识。常用的历史记录命令包括： git log：查看提交历史。 git diff：比较文件差异。 git blame：查看每行代码的最后修改记录。 5. 分布式协作Git支持多种协作方式，如通过GitHub、GitLab等平台进行代码托管和协作。开发者可以通过克隆（clone）、拉取（pull）和推送（push）来同步代码变化。此外，Pull Request（合并请求）和Code Review（代码审查）功能进一步增强了协作的效率和代码质量。 基本命令以下是一些常用的Git命令及其简要说明： git init：初始化一个新的Git仓库。 git clone [url]：克隆一个远程仓库到本地。 git add [file]：将文件的更改添加到暂存区。 git commit -m &quot;message&quot;：提交暂存区的内容。 git status：查看当前工作目录的状态。 git push：将本地提交推送到远程仓库。 git pull：从远程仓库拉取并合并更新。 git branch：列出、创建或删除分支。 git checkout [branch]：切换到指定分支。 Git实践 创建了本地版本仓库并将文件提交到本地仓库 常用操作：1、mkdir 创建一个文件夹2、cd 进入该目录3、pwd 显示该目录路径4、git init 将创建的文件夹 变成一个本地仓库5、git add 文件名6、git commit -m “这里通常对提交的文件做一个简单的说明”7、git status 随时掌握工作去的状态8、git diff 查看修改内容9、git log 查看历史记录10、git log –pretty=oneline 查看历史记录（带过滤）11、git reflog 用来记录每一次的命令12、git reset –hard commit_id 返回到历史版本13、cat 文件名 查看文件内容14、git checkout – 文件名 实质是用版本库里面的文件版本替换工作去的版本15、git rm 文件名 删除文件 直接用rm命令或者在工作区中删除会造成版本库和工作区中文件不一致 远程托管：16、git remote add origin ssh地址（ssh地址为github上创建的仓库时生成的）17、git push -u origin master 第一次把当前分支master的所有内容推送到远程18、git push origin master 非首次推送19、git clone ssh地址 从远程库克隆 git remote -v 查看远程库信息 分支管理：20、git branch 查看分支21、git branch branch_name 创建分支( branch_name为自定义的分支名称）22、git checkout branch_name 切换分支23、git checkout -b branch_name 创建并切换分支24、git merge branch_name 合并某分支到当前分支25、git branch -d branch_name 删除分支26、git log –graph 查看分支合并图27、git merge –no-ff branch_name 普通模式下的合并，合并后的历史有分支，能看出来曾经做过合并28、git stash 把当前工作现场“隐藏”29、git stash list 查看隐藏的工作现场30、git stash apply 恢复工作现场，但是恢复后，stash内容并不删除，需要git stash drop 删除31、git stash pop 恢复工作现场的同时，stash内容也被删除32、git branch -D branch_name 强行丢弃一个没有被合并过的分支 创建标签：33、git tag tag_name 创建一个标签，默认为HEAD，也可以指定一个commit id34、git tag -a tag_name -m “此处指定标签信息”35、git tag -s tag_name -m “此处用PGP签名标签”36、git tag 查看所有标签37、git show tag_name 查看标签信息 操作标签：38、git tag -d tag_name 删除一个本地标签39、git push origin tag_name 推送某个标签到本地40、git push origin –tags 推送全部未推送过的本地标签41、git push origin ： refs/tags/tag_name 删除一个远程标签 自定义git：42、git config –global color.ui true43、git config –global alias.st status 设置status的别名为st44、git config –global alias.last ‘log -1’ 配置了一个git last，显示最后一次提交信息 注意：当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成注意： 要add的文件必须放在创建的文件夹目录或子目录（即就是工作区，.git文件就是版本区）","link":"/2024/05/22/hello-git/"}],"tags":[{"name":"github","slug":"github","link":"/tags/github/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"launcher","slug":"launcher","link":"/tags/launcher/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"file","slug":"file","link":"/tags/file/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"django","slug":"django","link":"/tags/django/"},{"name":"adb","slug":"adb","link":"/tags/adb/"},{"name":"ollama","slug":"ollama","link":"/tags/ollama/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"}],"categories":[{"name":"git","slug":"git","link":"/categories/git/"},{"name":"file","slug":"file","link":"/categories/file/"},{"name":"adb","slug":"adb","link":"/categories/adb/"},{"name":"ollama","slug":"ollama","link":"/categories/ollama/"}],"pages":[{"title":"about","text":"this is about page!this is about page!this is about page!this is about page!this is about page!this is about page!","link":"/about/index.html"}]}